
STM32_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007838  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080084f4  080084f4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084f4  080084f4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080084fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  20000040  0800853c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  0800853c  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9fe  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021da  00000000  00000000  0002ea67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00030c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00031ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ec  00000000  00000000  00032870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f27b  00000000  00000000  0004ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f03e  00000000  00000000  00059dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004084  00000000  00000000  000e8e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000040 	.word	0x20000040
 800012c:	00000000 	.word	0x00000000
 8000130:	08007930 	.word	0x08007930

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000044 	.word	0x20000044
 800014c:	08007930 	.word	0x08007930

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2iz>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30f      	bcc.n	800106e <__aeabi_f2iz+0x2a>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d90d      	bls.n	8001074 <__aeabi_f2iz+0x30>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001064:	fa23 f002 	lsr.w	r0, r3, r2
 8001068:	bf18      	it	ne
 800106a:	4240      	negne	r0, r0
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr
 8001074:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001078:	d101      	bne.n	800107e <__aeabi_f2iz+0x3a>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	d105      	bne.n	800108a <__aeabi_f2iz+0x46>
 800107e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001082:	bf08      	it	eq
 8001084:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr

08001090 <__aeabi_f2uiz>:
 8001090:	0042      	lsls	r2, r0, #1
 8001092:	d20e      	bcs.n	80010b2 <__aeabi_f2uiz+0x22>
 8001094:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001098:	d30b      	bcc.n	80010b2 <__aeabi_f2uiz+0x22>
 800109a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800109e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a2:	d409      	bmi.n	80010b8 <__aeabi_f2uiz+0x28>
 80010a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ac:	fa23 f002 	lsr.w	r0, r3, r2
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2uiz+0x32>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d102      	bne.n	80010c8 <__aeabi_f2uiz+0x38>
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	4770      	bx	lr
 80010c8:	f04f 0000 	mov.w	r0, #0
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6078      	str	r0, [r7, #4]
	/**************************************************************************
	 * Función de servicio a la interrupción del temporizador 1
	 * Ejecucion periódica cada 5ms, que el periodo de muestreo.
	**************************************************************************/
	if (htim->Instance == TIM1) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a96      	ldr	r2, [pc, #600]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	f040 811b 	bne.w	800131a <HAL_TIM_PeriodElapsedCallback+0x24a>
		// Esto solo es para distinguir la interrupción de otros temporizadores,
		// si estos tienen interrupción activada.
		// Leer el valor del encoder con Timer 4 (la posicion)
		// Te devuelve un int (se debe pasar a float)
		posicion_f = (float)__HAL_TIM_GET_COUNTER(&htim4);
 80010e4:	4b95      	ldr	r3, [pc, #596]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fd8c 	bl	8000c08 <__aeabi_ui2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a93      	ldr	r2, [pc, #588]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010f4:	6013      	str	r3, [r2, #0]
		// Leer el voltaje de la batería con ADC1 (CANAL 6)
		// Hay que ordenar la conversión y después esperar a que termine

		// Como hay un divisor resistivo que hay en la placa R2=10K R3=1K
		// Hay que realizar el siguiente cálculo:  VBAT= VA6·(R2+R3)/R3
		voltaje_f= ((float)valores_ADC[1])*3.3*11*100/1.0/4096;
 80010f6:	4b93      	ldr	r3, [pc, #588]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fd84 	bl	8000c08 <__aeabi_ui2f>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f988 	bl	8000418 <__aeabi_f2d>
 8001108:	a387      	add	r3, pc, #540	; (adr r3, 8001328 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff f9db 	bl	80004c8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b8a      	ldr	r3, [pc, #552]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001120:	f7ff f9d2 	bl	80004c8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b86      	ldr	r3, [pc, #536]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001132:	f7ff f9c9 	bl	80004c8 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b83      	ldr	r3, [pc, #524]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001144:	f7ff faea 	bl	800071c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fc54 	bl	80009fc <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	4a7f      	ldr	r2, [pc, #508]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001158:	6013      	str	r3, [r2, #0]
		voltaje_f= filtro_voltaje(voltaje_f,0.8);
 800115a:	4b7e      	ldr	r3, [pc, #504]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	497e      	ldr	r1, [pc, #504]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fc39 	bl	80019d8 <filtro_voltaje>
 8001166:	4603      	mov	r3, r0
 8001168:	4a7a      	ldr	r2, [pc, #488]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800116a:	6013      	str	r3, [r2, #0]
		// Leer el angulo con ADC1 (CANAL 3): 5 muestras
		angulo_f = obtener_angulo();
 800116c:	f000 f950 	bl	8001410 <obtener_angulo>
 8001170:	4603      	mov	r3, r0
 8001172:	4a7a      	ldr	r2, [pc, #488]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001174:	6013      	str	r3, [r2, #0]
		// Obtener la referencia de posicion: local o externa
		referencia = obtener_referencia();
 8001176:	f000 f92d 	bl	80013d4 <obtener_referencia>
 800117a:	4603      	mov	r3, r0
 800117c:	4a78      	ldr	r2, [pc, #480]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800117e:	6013      	str	r3, [r2, #0]
		// CONTROL
		if (Flag_control_motor) {
 8001180:	4b78      	ldr	r3, [pc, #480]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d04f      	beq.n	8001228 <HAL_TIM_PeriodElapsedCallback+0x158>
	    	if (Cuenta_un_segundo < 300) {
 8001188:	4b77      	ldr	r3, [pc, #476]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001190:	d205      	bcs.n	800119e <HAL_TIM_PeriodElapsedCallback+0xce>
				Cuenta_un_segundo++;
 8001192:	4b75      	ldr	r3, [pc, #468]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b73      	ldr	r3, [pc, #460]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800119c:	801a      	strh	r2, [r3, #0]
				// Durante este tiempo está en el control agresivo
	    	}
			if (Cuenta_cinco_segundos > 0) {
 800119e:	4b73      	ldr	r3, [pc, #460]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0xe4>
				Cuenta_cinco_segundos--;
 80011a6:	4b71      	ldr	r3, [pc, #452]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011b0:	801a      	strh	r2, [r3, #0]
 80011b2:	e01f      	b.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x124>
			}
	    	else if(Cuenta_un_segundo==300) {
 80011b4:	4b6c      	ldr	r3, [pc, #432]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011bc:	d11a      	bne.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x124>
				param_filtro_pos = 0.956;
 80011be:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80011c0:	4a6c      	ldr	r2, [pc, #432]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011c2:	601a      	str	r2, [r3, #0]
				param_filtro_ang = 0.8;
 80011c4:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011c6:	4a64      	ldr	r2, [pc, #400]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80011c8:	601a      	str	r2, [r3, #0]
				Ki = 163;
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011cc:	4a6c      	ldr	r2, [pc, #432]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011ce:	601a      	str	r2, [r3, #0]
				K1 = 101;
 80011d0:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011d2:	4a6d      	ldr	r2, [pc, #436]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011d4:	601a      	str	r2, [r3, #0]
				K2 = 683;
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011d8:	4a6d      	ldr	r2, [pc, #436]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011da:	601a      	str	r2, [r3, #0]
				K3 = 46;
 80011dc:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80011e0:	601a      	str	r2, [r3, #0]
				K4 = 11.4;		//21.4 11.4
 80011e2:	4b6e      	ldr	r3, [pc, #440]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80011e4:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80011e6:	601a      	str	r2, [r3, #0]
				// Cuando pase 1 segundo, vuelve al control suave
	    		Cuenta_un_segundo ++;
 80011e8:	4b5f      	ldr	r3, [pc, #380]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011f2:	801a      	strh	r2, [r3, #0]
			case 0: {
				PWM_motor = control_dos_PID(referencia, posicion_f, angulo_f);
				break;
			}
			case 1: {
				PWM_motor = control_realim_estados(referencia, posicion_f,
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a51      	ldr	r2, [pc, #324]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80011fa:	6811      	ldr	r1, [r2, #0]
 80011fc:	4a57      	ldr	r2, [pc, #348]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f979 	bl	80014f8 <control_realim_estados>
 8001206:	4603      	mov	r3, r0
 8001208:	4a66      	ldr	r2, [pc, #408]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800120a:	6013      	str	r3, [r2, #0]
						angulo_f);
			}
	    	}
			// Apaga motor y termina el control si el péndulo cae, o baja el
			// voltaje por debajo del límite.
			if (comprueba_limites_control())
 800120c:	f000 fcca 	bl	8001ba4 <comprueba_limites_control>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_TIM_PeriodElapsedCallback+0x14e>
				PWM_motor = 0;
 8001216:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
			poner_PWM_motor (PWM_motor);
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fc48 	bl	8001ab8 <poner_PWM_motor>
	    }

	    if (Flag_swing_up) {
 8001228:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d018      	beq.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x192>
	    	PWM_motor =swing_up(posicion_f, angulo_f);
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fce6 	bl	8002c0c <swing_up>
 8001240:	4603      	mov	r3, r0
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001244:	6013      	str	r3, [r2, #0]
			if (comprueba_limites_swing())
 8001246:	f000 fc89 	bl	8001b5c <comprueba_limites_swing>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x188>
				PWM_motor = 0;
 8001250:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
	    	poner_PWM_motor(PWM_motor);
 8001258:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fc2b 	bl	8001ab8 <poner_PWM_motor>
	    }

	    // Comprueba si se ha activado el pulsador
	    key();
 8001262:	f000 fd71 	bl	8001d48 <key>
		// Cuenta el numero de veces que se repite TIM1 hasta llegar a 10 (50ms)
		Cuenta_diez_periodos++;
 8001266:	4b51      	ldr	r3, [pc, #324]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001270:	701a      	strb	r2, [r3, #0]
		//if (Cuenta_diez_periodos%2==0)

		// Envía señales al ordenador
		envia_datos_serie((posicion_f - 10000) * 360 / 1040,	// ch1
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	494e      	ldr	r1, [pc, #312]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fc13 	bl	8000aa4 <__aeabi_fsub>
 800127e:	4603      	mov	r3, r0
 8001280:	494c      	ldr	r1, [pc, #304]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd18 	bl	8000cb8 <__aeabi_fmul>
 8001288:	4603      	mov	r3, r0
 800128a:	494b      	ldr	r1, [pc, #300]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fdc7 	bl	8000e20 <__aeabi_fdiv>
 8001292:	4603      	mov	r3, r0
 8001294:	461e      	mov	r6, r3
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001298:	681c      	ldr	r4, [r3, #0]
		referencia,					// ch2
				(angulo_f - VERTICAL) * 180 / 2134,		// ch3
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800129c:	681d      	ldr	r5, [r3, #0]
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fcb4 	bl	8000c10 <__aeabi_i2f>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4619      	mov	r1, r3
 80012ac:	4628      	mov	r0, r5
 80012ae:	f7ff fbf9 	bl	8000aa4 <__aeabi_fsub>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4942      	ldr	r1, [pc, #264]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fcfe 	bl	8000cb8 <__aeabi_fmul>
 80012bc:	4603      	mov	r3, r0
		envia_datos_serie((posicion_f - 10000) * 360 / 1040,	// ch1
 80012be:	4941      	ldr	r1, [pc, #260]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fdad 	bl	8000e20 <__aeabi_fdiv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461d      	mov	r5, r3
						   (PWM_motor)*100.0/7200.0,	// ch4
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8a2 	bl	8000418 <__aeabi_f2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012da:	f7ff f8f5 	bl	80004c8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	a312      	add	r3, pc, #72	; (adr r3, 8001330 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fa16 	bl	800071c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
		envia_datos_serie((posicion_f - 10000) * 360 / 1040,	// ch1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fb80 	bl	80009fc <__aeabi_d2f>
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	4932      	ldr	r1, [pc, #200]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001306:	6809      	ldr	r1, [r1, #0]
 8001308:	9102      	str	r1, [sp, #8]
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4603      	mov	r3, r0
 8001310:	462a      	mov	r2, r5
 8001312:	4621      	mov	r1, r4
 8001314:	4630      	mov	r0, r6
 8001316:	f001 fbff 	bl	8002b18 <envia_datos_serie>
				acc_integral,							// ch5
				velocidad_1,					// ch6
				velocidad_2);				// ch7
	}
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	66666666 	.word	0x66666666
 800132c:	400a6666 	.word	0x400a6666
 8001330:	00000000 	.word	0x00000000
 8001334:	40bc2000 	.word	0x40bc2000
 8001338:	40012c00 	.word	0x40012c00
 800133c:	200000c8 	.word	0x200000c8
 8001340:	200002e4 	.word	0x200002e4
 8001344:	20000260 	.word	0x20000260
 8001348:	40260000 	.word	0x40260000
 800134c:	40590000 	.word	0x40590000
 8001350:	40b00000 	.word	0x40b00000
 8001354:	200003a0 	.word	0x200003a0
 8001358:	3f4ccccd 	.word	0x3f4ccccd
 800135c:	200003a4 	.word	0x200003a4
 8001360:	20000060 	.word	0x20000060
 8001364:	20000116 	.word	0x20000116
 8001368:	200000c4 	.word	0x200000c4
 800136c:	2000002e 	.word	0x2000002e
 8001370:	20000024 	.word	0x20000024
 8001374:	3f74bc6a 	.word	0x3f74bc6a
 8001378:	2000005c 	.word	0x2000005c
 800137c:	20000010 	.word	0x20000010
 8001380:	43230000 	.word	0x43230000
 8001384:	20000014 	.word	0x20000014
 8001388:	42ca0000 	.word	0x42ca0000
 800138c:	2000001c 	.word	0x2000001c
 8001390:	442ac000 	.word	0x442ac000
 8001394:	20000018 	.word	0x20000018
 8001398:	42380000 	.word	0x42380000
 800139c:	20000020 	.word	0x20000020
 80013a0:	41366666 	.word	0x41366666
 80013a4:	2000032c 	.word	0x2000032c
 80013a8:	20000118 	.word	0x20000118
 80013ac:	2000006c 	.word	0x2000006c
 80013b0:	461c4000 	.word	0x461c4000
 80013b4:	43b40000 	.word	0x43b40000
 80013b8:	44820000 	.word	0x44820000
 80013bc:	20000030 	.word	0x20000030
 80013c0:	43340000 	.word	0x43340000
 80013c4:	45056000 	.word	0x45056000
 80013c8:	20000164 	.word	0x20000164
 80013cc:	20000110 	.word	0x20000110
 80013d0:	200002e0 	.word	0x200002e0

080013d4 <obtener_referencia>:

float obtener_referencia(void) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
	/**************************************************************************
	 * Obtiene el valor de la referencia
	 **************************************************************************/
	float ref;
	if (ORIGEN_REF==1)	// Local
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <obtener_referencia+0x30>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d103      	bne.n	80013ea <obtener_referencia+0x16>
		ref = referencia_local;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <obtener_referencia+0x34>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	e006      	b.n	80013f8 <obtener_referencia+0x24>
	else if (ORIGEN_REF==2)	// Externa (desde el ordenador)
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <obtener_referencia+0x30>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d102      	bne.n	80013f8 <obtener_referencia+0x24>
		ref = referencia_externa;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <obtener_referencia+0x38>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	607b      	str	r3, [r7, #4]
	return(ref);
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000032 	.word	0x20000032
 8001408:	20000064 	.word	0x20000064
 800140c:	20000068 	.word	0x20000068

08001410 <obtener_angulo>:
float obtener_angulo(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	/**************************************************************************
	 * Obtiene el valor del ángulo a partir de la media de varias conversiones
	 * seguidas del ADC.
	 **************************************************************************/
	float angulo_medio=0;
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
	angulo_medio = ((float) (valores_ADC[0] + valores_ADC[2] + valores_ADC[3]
 800141c:	4b33      	ldr	r3, [pc, #204]	; (80014ec <obtener_angulo+0xdc>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <obtener_angulo+0xdc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	441a      	add	r2, r3
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <obtener_angulo+0xdc>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	441a      	add	r2, r3
			+ valores_ADC[4] + valores_ADC[5] + valores_ADC[6] + valores_ADC[7]
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <obtener_angulo+0xdc>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	441a      	add	r2, r3
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <obtener_angulo+0xdc>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	441a      	add	r2, r3
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <obtener_angulo+0xdc>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	441a      	add	r2, r3
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <obtener_angulo+0xdc>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	441a      	add	r2, r3
			+ valores_ADC[8] + valores_ADC[9] + valores_ADC[10]
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <obtener_angulo+0xdc>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	441a      	add	r2, r3
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <obtener_angulo+0xdc>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	441a      	add	r2, r3
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <obtener_angulo+0xdc>)
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	441a      	add	r2, r3
			+ valores_ADC[11] + valores_ADC[12] + valores_ADC[13]
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <obtener_angulo+0xdc>)
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	441a      	add	r2, r3
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <obtener_angulo+0xdc>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	441a      	add	r2, r3
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <obtener_angulo+0xdc>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	441a      	add	r2, r3
			+ valores_ADC[14] + valores_ADC[15] + valores_ADC[16]
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <obtener_angulo+0xdc>)
 800146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146c:	441a      	add	r2, r3
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <obtener_angulo+0xdc>)
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001472:	441a      	add	r2, r3
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <obtener_angulo+0xdc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	441a      	add	r2, r3
			+ valores_ADC[18] + valores_ADC[19] + valores_ADC[20]
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <obtener_angulo+0xdc>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	441a      	add	r2, r3
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <obtener_angulo+0xdc>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	441a      	add	r2, r3
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <obtener_angulo+0xdc>)
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	441a      	add	r2, r3
			+ valores_ADC[21] + valores_ADC[22] + valores_ADC[23]
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <obtener_angulo+0xdc>)
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	441a      	add	r2, r3
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <obtener_angulo+0xdc>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	441a      	add	r2, r3
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <obtener_angulo+0xdc>)
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	441a      	add	r2, r3
			+ valores_ADC[24] + valores_ADC[25] + valores_ADC[26]
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <obtener_angulo+0xdc>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	441a      	add	r2, r3
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <obtener_angulo+0xdc>)
 80014a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014a8:	441a      	add	r2, r3
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <obtener_angulo+0xdc>)
 80014ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014ae:	441a      	add	r2, r3
			+ valores_ADC[27] + valores_ADC[28] + valores_ADC[29]
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <obtener_angulo+0xdc>)
 80014b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014b4:	441a      	add	r2, r3
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <obtener_angulo+0xdc>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	441a      	add	r2, r3
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <obtener_angulo+0xdc>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	441a      	add	r2, r3
			+ valores_ADC[30] + valores_ADC[31])) / 30.0;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <obtener_angulo+0xdc>)
 80014c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014c6:	441a      	add	r2, r3
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <obtener_angulo+0xdc>)
 80014ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014cc:	4413      	add	r3, r2
	angulo_medio = ((float) (valores_ADC[0] + valores_ADC[2] + valores_ADC[3]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb9a 	bl	8000c08 <__aeabi_ui2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <obtener_angulo+0xe0>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fca1 	bl	8000e20 <__aeabi_fdiv>
 80014de:	4603      	mov	r3, r0
 80014e0:	607b      	str	r3, [r7, #4]
	return (angulo_medio);
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000260 	.word	0x20000260
 80014f0:	41f00000 	.word	0x41f00000
 80014f4:	00000000 	.word	0x00000000

080014f8 <control_realim_estados>:
	velocidad_1 = Dp_k/KD_Pos;
	velocidad_2 = Da_k/KD_Bal;
	return (uk);
}

float control_realim_estados (float ref, float posicion, float angulo) {
 80014f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014fc:	b08e      	sub	sp, #56	; 0x38
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
	float x1_k, x2_k, x3_k, x4_k, e1_k, xf2_k, xf1_k, uk, vk;
	static float int_k_1, xf1_k_1, xf2_k_1;
	float int_k;
	static uint8_t flag_inicio=0;
	// Inicializacion variables
	if (flag_inicio==0) {
 8001506:	4b9c      	ldr	r3, [pc, #624]	; (8001778 <control_realim_estados+0x280>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d130      	bne.n	8001570 <control_realim_estados+0x78>
			xf1_k_1= (posicion-10000)*360/1040;
 800150e:	499b      	ldr	r1, [pc, #620]	; (800177c <control_realim_estados+0x284>)
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f7ff fac7 	bl	8000aa4 <__aeabi_fsub>
 8001516:	4603      	mov	r3, r0
 8001518:	4999      	ldr	r1, [pc, #612]	; (8001780 <control_realim_estados+0x288>)
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fbcc 	bl	8000cb8 <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	4998      	ldr	r1, [pc, #608]	; (8001784 <control_realim_estados+0x28c>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fc7b 	bl	8000e20 <__aeabi_fdiv>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b96      	ldr	r3, [pc, #600]	; (8001788 <control_realim_estados+0x290>)
 8001530:	601a      	str	r2, [r3, #0]
			xf2_k_1=(angulo - VERTICAL)*180/2134;
 8001532:	4b96      	ldr	r3, [pc, #600]	; (800178c <control_realim_estados+0x294>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb6a 	bl	8000c10 <__aeabi_i2f>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff faaf 	bl	8000aa4 <__aeabi_fsub>
 8001546:	4603      	mov	r3, r0
 8001548:	4991      	ldr	r1, [pc, #580]	; (8001790 <control_realim_estados+0x298>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbb4 	bl	8000cb8 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	4990      	ldr	r1, [pc, #576]	; (8001794 <control_realim_estados+0x29c>)
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fc63 	bl	8000e20 <__aeabi_fdiv>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <control_realim_estados+0x2a0>)
 8001560:	601a      	str	r2, [r3, #0]
			int_k_1=0;
 8001562:	4b8e      	ldr	r3, [pc, #568]	; (800179c <control_realim_estados+0x2a4>)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
			flag_inicio=1;
 800156a:	4b83      	ldr	r3, [pc, #524]	; (8001778 <control_realim_estados+0x280>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
	}

	/* Escalado de las variables */
	posicion = (posicion - 10000) * 360 / 1040;	// Convierte a grados
 8001570:	4982      	ldr	r1, [pc, #520]	; (800177c <control_realim_estados+0x284>)
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f7ff fa96 	bl	8000aa4 <__aeabi_fsub>
 8001578:	4603      	mov	r3, r0
 800157a:	4981      	ldr	r1, [pc, #516]	; (8001780 <control_realim_estados+0x288>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fb9b 	bl	8000cb8 <__aeabi_fmul>
 8001582:	4603      	mov	r3, r0
 8001584:	497f      	ldr	r1, [pc, #508]	; (8001784 <control_realim_estados+0x28c>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc4a 	bl	8000e20 <__aeabi_fdiv>
 800158c:	4603      	mov	r3, r0
 800158e:	60bb      	str	r3, [r7, #8]
	angulo = (angulo - VERTICAL) * 180 / 2134;	// Convierte a grados
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <control_realim_estados+0x294>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fb3b 	bl	8000c10 <__aeabi_i2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fa80 	bl	8000aa4 <__aeabi_fsub>
 80015a4:	4603      	mov	r3, r0
 80015a6:	497a      	ldr	r1, [pc, #488]	; (8001790 <control_realim_estados+0x298>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb85 	bl	8000cb8 <__aeabi_fmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4978      	ldr	r1, [pc, #480]	; (8001794 <control_realim_estados+0x29c>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc34 	bl	8000e20 <__aeabi_fdiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	607b      	str	r3, [r7, #4]
	x1_k=posicion;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2_k=angulo;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Filtro para la posición del brazo */
	xf1_k = filtro_posicion(x1_k, param_filtro_pos);
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <control_realim_estados+0x2a8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015cc:	f000 f99c 	bl	8001908 <filtro_posicion>
 80015d0:	6278      	str	r0, [r7, #36]	; 0x24
	//xf1_k = filtro_butterworth(posicion,8);

	/* filtro para el ángulo del pendulo */
	xf2_k = filtro_angulo(x2_k, param_filtro_ang);
 80015d2:	4b74      	ldr	r3, [pc, #464]	; (80017a4 <control_realim_estados+0x2ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015da:	f000 f9c9 	bl	8001970 <filtro_angulo>
 80015de:	6238      	str	r0, [r7, #32]
	//xf2_k = filtro_butterworth_2(angulo,70);
	e1_k = posicion-ref;
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f7ff fa5e 	bl	8000aa4 <__aeabi_fsub>
 80015e8:	4603      	mov	r3, r0
 80015ea:	61fb      	str	r3, [r7, #28]

	/* Estimación de las velocidades */
	x3_k = (xf1_k-xf1_k_1)/Ts;
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <control_realim_estados+0x290>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015f4:	f7ff fa56 	bl	8000aa4 <__aeabi_fsub>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff0c 	bl	8000418 <__aeabi_f2d>
 8001600:	a35b      	add	r3, pc, #364	; (adr r3, 8001770 <control_realim_estados+0x278>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff f889 	bl	800071c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff f9f3 	bl	80009fc <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
	x4_k = (xf2_k-xf2_k_1)/Ts;
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <control_realim_estados+0x2a0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f7ff fa3f 	bl	8000aa4 <__aeabi_fsub>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fef5 	bl	8000418 <__aeabi_f2d>
 800162e:	a350      	add	r3, pc, #320	; (adr r3, 8001770 <control_realim_estados+0x278>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f872 	bl	800071c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff f9dc 	bl	80009fc <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	617b      	str	r3, [r7, #20]

	/* Ley de control */
	int_k = int_k_1-(Ki*Ts)*e1_k;
 8001648:	4b54      	ldr	r3, [pc, #336]	; (800179c <control_realim_estados+0x2a4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fee3 	bl	8000418 <__aeabi_f2d>
 8001652:	4604      	mov	r4, r0
 8001654:	460d      	mov	r5, r1
 8001656:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <control_realim_estados+0x2b0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fedc 	bl	8000418 <__aeabi_f2d>
 8001660:	a343      	add	r3, pc, #268	; (adr r3, 8001770 <control_realim_estados+0x278>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ff2f 	bl	80004c8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4690      	mov	r8, r2
 8001670:	4699      	mov	r9, r3
 8001672:	69f8      	ldr	r0, [r7, #28]
 8001674:	f7fe fed0 	bl	8000418 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4640      	mov	r0, r8
 800167e:	4649      	mov	r1, r9
 8001680:	f7fe ff22 	bl	80004c8 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fd64 	bl	8000158 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f9b0 	bl	80009fc <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
	vk = int_k-K1*x1_k-K2*x2_k-K3*x3_k-K4*x4_k;
 80016a0:	4b42      	ldr	r3, [pc, #264]	; (80017ac <control_realim_estados+0x2b4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fb06 	bl	8000cb8 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4619      	mov	r1, r3
 80016b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016b2:	f7ff f9f7 	bl	8000aa4 <__aeabi_fsub>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461c      	mov	r4, r3
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <control_realim_estados+0x2b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff faf9 	bl	8000cb8 <__aeabi_fmul>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff f9ea 	bl	8000aa4 <__aeabi_fsub>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461c      	mov	r4, r3
 80016d4:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <control_realim_estados+0x2bc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff faec 	bl	8000cb8 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff f9dd 	bl	8000aa4 <__aeabi_fsub>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461c      	mov	r4, r3
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <control_realim_estados+0x2c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6979      	ldr	r1, [r7, #20]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fadf 	bl	8000cb8 <__aeabi_fmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4619      	mov	r1, r3
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff f9d0 	bl	8000aa4 <__aeabi_fsub>
 8001704:	4603      	mov	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

	/* Saturación y antiwindup */
	if (vk>LIMITE_PWM) {
 8001708:	492c      	ldr	r1, [pc, #176]	; (80017bc <control_realim_estados+0x2c4>)
 800170a:	6938      	ldr	r0, [r7, #16]
 800170c:	f7ff fc90 	bl	8001030 <__aeabi_fcmpgt>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <control_realim_estados+0x22a>
		uk=LIMITE_PWM;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <control_realim_estados+0x2c4>)
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
		int_k=int_k_1;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <control_realim_estados+0x2a4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
 8001720:	e00e      	b.n	8001740 <control_realim_estados+0x248>
	}
	else if (vk<-LIMITE_PWM){
 8001722:	4927      	ldr	r1, [pc, #156]	; (80017c0 <control_realim_estados+0x2c8>)
 8001724:	6938      	ldr	r0, [r7, #16]
 8001726:	f7ff fc65 	bl	8000ff4 <__aeabi_fcmplt>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <control_realim_estados+0x244>
		uk=-LIMITE_PWM;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <control_realim_estados+0x2c8>)
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
		int_k=int_k_1;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <control_realim_estados+0x2a4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
 800173a:	e001      	b.n	8001740 <control_realim_estados+0x248>
	}
	else
		uk=vk;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Actualizamos valores anteriores en memoria */
	xf1_k_1 = xf1_k;
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <control_realim_estados+0x290>)
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	6013      	str	r3, [r2, #0]
	xf2_k_1 = xf2_k;
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <control_realim_estados+0x2a0>)
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	6013      	str	r3, [r2, #0]
	int_k_1=int_k;
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <control_realim_estados+0x2a4>)
 800174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001750:	6013      	str	r3, [r2, #0]

	/* Variables para visualizacion por el ordenador */
	acc_integral = int_k;
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <control_realim_estados+0x2cc>)
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	6013      	str	r3, [r2, #0]
	velocidad_1 = x3_k;
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <control_realim_estados+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6013      	str	r3, [r2, #0]
	velocidad_2 = x4_k;
 800175e:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <control_realim_estados+0x2d4>)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	6013      	str	r3, [r2, #0]
	return (uk);
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001766:	4618      	mov	r0, r3
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001770:	47ae147b 	.word	0x47ae147b
 8001774:	3f747ae1 	.word	0x3f747ae1
 8001778:	2000006e 	.word	0x2000006e
 800177c:	461c4000 	.word	0x461c4000
 8001780:	43b40000 	.word	0x43b40000
 8001784:	44820000 	.word	0x44820000
 8001788:	20000070 	.word	0x20000070
 800178c:	20000030 	.word	0x20000030
 8001790:	43340000 	.word	0x43340000
 8001794:	45056000 	.word	0x45056000
 8001798:	20000074 	.word	0x20000074
 800179c:	20000078 	.word	0x20000078
 80017a0:	20000024 	.word	0x20000024
 80017a4:	2000005c 	.word	0x2000005c
 80017a8:	20000010 	.word	0x20000010
 80017ac:	20000014 	.word	0x20000014
 80017b0:	2000001c 	.word	0x2000001c
 80017b4:	20000018 	.word	0x20000018
 80017b8:	20000020 	.word	0x20000020
 80017bc:	45bb8000 	.word	0x45bb8000
 80017c0:	c5bb8000 	.word	0xc5bb8000
 80017c4:	20000164 	.word	0x20000164
 80017c8:	20000110 	.word	0x20000110
 80017cc:	200002e0 	.word	0x200002e0

080017d0 <filtro_roc>:


float filtro_roc (float yk, float roc_max) {
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	static float yfk_1;
	float yfk;
	static uint8_t flag_inicio;

	// Inicializa los valores anteriores la primera llamada a la función
	if (flag_inicio==0) {
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <filtro_roc+0x130>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <filtro_roc+0x20>
		yfk_1 = 0;
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <filtro_roc+0x134>)
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
		flag_inicio =1;
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <filtro_roc+0x130>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
	}

	if ((yk-yfk_1)>roc_max*Ts)
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <filtro_roc+0x134>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff f954 	bl	8000aa4 <__aeabi_fsub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe0a 	bl	8000418 <__aeabi_f2d>
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7fe fe05 	bl	8000418 <__aeabi_f2d>
 800180e:	a33a      	add	r3, pc, #232	; (adr r3, 80018f8 <filtro_roc+0x128>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fe58 	bl	80004c8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7ff f8e2 	bl	80009e8 <__aeabi_dcmpgt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01d      	beq.n	8001866 <filtro_roc+0x96>
		yfk=yfk_1+roc_max*Ts;
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <filtro_roc+0x134>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fdf2 	bl	8000418 <__aeabi_f2d>
 8001834:	4604      	mov	r4, r0
 8001836:	460d      	mov	r5, r1
 8001838:	6838      	ldr	r0, [r7, #0]
 800183a:	f7fe fded 	bl	8000418 <__aeabi_f2d>
 800183e:	a32e      	add	r3, pc, #184	; (adr r3, 80018f8 <filtro_roc+0x128>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fe40 	bl	80004c8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fc84 	bl	800015c <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f8ce 	bl	80009fc <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e03f      	b.n	80018e6 <filtro_roc+0x116>
	else if ((yk-yfk_1)<-roc_max*Ts)
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <filtro_roc+0x134>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f919 	bl	8000aa4 <__aeabi_fsub>
 8001872:	4603      	mov	r3, r0
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fdcf 	bl	8000418 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fdc7 	bl	8000418 <__aeabi_f2d>
 800188a:	a31b      	add	r3, pc, #108	; (adr r3, 80018f8 <filtro_roc+0x128>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fe1a 	bl	80004c8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7ff f886 	bl	80009ac <__aeabi_dcmplt>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01d      	beq.n	80018e2 <filtro_roc+0x112>
		yfk=yfk_1-roc_max*Ts;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <filtro_roc+0x134>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fdb4 	bl	8000418 <__aeabi_f2d>
 80018b0:	4604      	mov	r4, r0
 80018b2:	460d      	mov	r5, r1
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f7fe fdaf 	bl	8000418 <__aeabi_f2d>
 80018ba:	a30f      	add	r3, pc, #60	; (adr r3, 80018f8 <filtro_roc+0x128>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fe02 	bl	80004c8 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	f7fe fc44 	bl	8000158 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f890 	bl	80009fc <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e001      	b.n	80018e6 <filtro_roc+0x116>
	else yfk=yk;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
	yfk_1=yfk;
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <filtro_roc+0x134>)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6013      	str	r3, [r2, #0]
	return (yfk);
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bdb0      	pop	{r4, r5, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	47ae147b 	.word	0x47ae147b
 80018fc:	3f747ae1 	.word	0x3f747ae1
 8001900:	2000007c 	.word	0x2000007c
 8001904:	20000080 	.word	0x20000080

08001908 <filtro_posicion>:

float filtro_posicion (float yk, float a) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	static float yfk_1;
	float yfk;
	static uint8_t flag_inicio=0;

	// Inicializa los valores anteriores la primera llamada a la función
	if (flag_inicio==0) {
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <filtro_posicion+0x60>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <filtro_posicion+0x1e>
		yfk_1 = yk;
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <filtro_posicion+0x64>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]
		flag_inicio =1;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <filtro_posicion+0x60>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
	}
	// a = exp(-wc*Ts)	Frecuencia de corte del filtro
	yfk = a*yfk_1 + (1-a)*yk;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <filtro_posicion+0x64>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f9c3 	bl	8000cb8 <__aeabi_fmul>
 8001932:	4603      	mov	r3, r0
 8001934:	461c      	mov	r4, r3
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800193c:	f7ff f8b2 	bl	8000aa4 <__aeabi_fsub>
 8001940:	4603      	mov	r3, r0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f9b7 	bl	8000cb8 <__aeabi_fmul>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff f8aa 	bl	8000aa8 <__addsf3>
 8001954:	4603      	mov	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]
	yfk_1 =yfk;
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <filtro_posicion+0x64>)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6013      	str	r3, [r2, #0]
	return (yfk);
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	20000084 	.word	0x20000084
 800196c:	20000088 	.word	0x20000088

08001970 <filtro_angulo>:
float filtro_angulo (float yk, float a) {
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	 **************************************************************************/
	static float yfk_1;
	float yfk;
	static uint8_t flag_inicio=0;
	// Inicializa los valores anteriores la primera llamada a la función
	if (flag_inicio==0) {
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <filtro_angulo+0x60>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <filtro_angulo+0x1e>
		yfk_1 = yk;
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <filtro_angulo+0x64>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
		flag_inicio =1;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <filtro_angulo+0x60>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	}
	yfk = a*yfk_1 + (1-a)*yk;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <filtro_angulo+0x64>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f98f 	bl	8000cb8 <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	461c      	mov	r4, r3
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80019a4:	f7ff f87e 	bl	8000aa4 <__aeabi_fsub>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f983 	bl	8000cb8 <__aeabi_fmul>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff f876 	bl	8000aa8 <__addsf3>
 80019bc:	4603      	mov	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]
	yfk_1 =yfk;
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <filtro_angulo+0x64>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6013      	str	r3, [r2, #0]
	return (yfk);
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	2000008c 	.word	0x2000008c
 80019d4:	20000090 	.word	0x20000090

080019d8 <filtro_voltaje>:
	yfk = a*yfk_1 + (1-a)*yk;
	yfk_1 =yfk;

	return (yfk);
}
float filtro_voltaje (float yk, float a) {
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	 **************************************************************************/
	static float yfk_1;
	float yfk;
	static uint8_t flag_inicio=0;
	// Inicializa los valores anteriores la primera llamada a la función
	if (flag_inicio==0) {
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <filtro_voltaje+0x60>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <filtro_voltaje+0x1e>
		yfk_1 = yk;
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <filtro_voltaje+0x64>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6013      	str	r3, [r2, #0]
		flag_inicio =1;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <filtro_voltaje+0x60>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
	}
	yfk = a*yfk_1 + (1-a)*yk;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <filtro_voltaje+0x64>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f95b 	bl	8000cb8 <__aeabi_fmul>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461c      	mov	r4, r3
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a0c:	f7ff f84a 	bl	8000aa4 <__aeabi_fsub>
 8001a10:	4603      	mov	r3, r0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f94f 	bl	8000cb8 <__aeabi_fmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff f842 	bl	8000aa8 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]
	yfk_1 =yfk;
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <filtro_voltaje+0x64>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6013      	str	r3, [r2, #0]
	return (yfk);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	20000094 	.word	0x20000094
 8001a3c:	20000098 	.word	0x20000098

08001a40 <filtro_apaga>:
float filtro_apaga (float yk, float a) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	 **************************************************************************/
	static float yfk_1;
	float yfk;
	static uint8_t flag_inicio=0;
	// Inicializa los valores anteriores la primera llamada a la función
	if (flag_inicio==0) {
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <filtro_apaga+0x6c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <filtro_apaga+0x28>
		yfk_1 = VERTICAL;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <filtro_apaga+0x70>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8d6 	bl	8000c08 <__aeabi_ui2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <filtro_apaga+0x74>)
 8001a60:	6013      	str	r3, [r2, #0]
		flag_inicio =1;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <filtro_apaga+0x6c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
	}

	yfk = a*yfk_1 + (1-a)*yk;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <filtro_apaga+0x74>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f922 	bl	8000cb8 <__aeabi_fmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461c      	mov	r4, r3
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a7e:	f7ff f811 	bl	8000aa4 <__aeabi_fsub>
 8001a82:	4603      	mov	r3, r0
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f916 	bl	8000cb8 <__aeabi_fmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff f809 	bl	8000aa8 <__addsf3>
 8001a96:	4603      	mov	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]
	yfk_1 =yfk;
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <filtro_apaga+0x74>)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6013      	str	r3, [r2, #0]
	return (yfk);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000009c 	.word	0x2000009c
 8001ab0:	20000030 	.word	0x20000030
 8001ab4:	200000a0 	.word	0x200000a0

08001ab8 <poner_PWM_motor>:
	yfk =-((a*Ts-2)/(a*Ts+2))*yfk_1 + (a*Ts/(a*Ts+2))*(yk+yk_1);
	yfk_1 =yfk;
	yk_1 = yk;
	return (yfk);
}
void poner_PWM_motor(float valor_pwm) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	//  - PB13 = BIN1

	//static uint16_t valor_pwm_ant=0;
	uint16_t valor_pwm_abs;
	// Indica la dirección del motor
	if (valor_pwm>0) {
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fab3 	bl	8001030 <__aeabi_fcmpgt>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d011      	beq.n	8001af4 <poner_PWM_motor+0x3c>
		valor_pwm_abs=valor_pwm;
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fadd 	bl	8001090 <__aeabi_f2uiz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,0);		// BIN2 = 0;
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	481c      	ldr	r0, [pc, #112]	; (8001b54 <poner_PWM_motor+0x9c>)
 8001ae2:	f003 fc66 	bl	80053b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,1);		// BIN1 = 1;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aec:	4819      	ldr	r0, [pc, #100]	; (8001b54 <poner_PWM_motor+0x9c>)
 8001aee:	f003 fc60 	bl	80053b2 <HAL_GPIO_WritePin>
 8001af2:	e028      	b.n	8001b46 <poner_PWM_motor+0x8e>
	}
	else if (valor_pwm==0) {
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fa71 	bl	8000fe0 <__aeabi_fcmpeq>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00c      	beq.n	8001b1e <poner_PWM_motor+0x66>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,0);		// BIN2 = 0;
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,0);		// BIN1 = 0;
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,1);		// BIN2 = ~BIN2;
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,1);		// BIN1 = ~BIN1;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <poner_PWM_motor+0x9c>)
 8001b0a:	f003 fc6a 	bl	80053e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b12:	4810      	ldr	r0, [pc, #64]	; (8001b54 <poner_PWM_motor+0x9c>)
 8001b14:	f003 fc65 	bl	80053e2 <HAL_GPIO_TogglePin>
		valor_pwm_abs=0;		// Es 0 y no 7199
 8001b18:	2300      	movs	r3, #0
 8001b1a:	81fb      	strh	r3, [r7, #14]
 8001b1c:	e013      	b.n	8001b46 <poner_PWM_motor+0x8e>
	}
	else {
		valor_pwm_abs=-valor_pwm;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fab3 	bl	8001090 <__aeabi_f2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);		// BIN2 = 1;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b34:	4807      	ldr	r0, [pc, #28]	; (8001b54 <poner_PWM_motor+0x9c>)
 8001b36:	f003 fc3c 	bl	80053b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,0);		// BIN1 = 0;
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <poner_PWM_motor+0x9c>)
 8001b42:	f003 fc36 	bl	80053b2 <HAL_GPIO_WritePin>
	}
	// Colocar valor de PWM en el temporizador 3
	//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,valor_pwm_abs);
	TIM3->CCR4=valor_pwm_abs;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <poner_PWM_motor+0xa0>)
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
	//valor_pwm_ant = valor_pwm;
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	40000400 	.word	0x40000400

08001b5c <comprueba_limites_swing>:
uint8_t comprueba_limites_swing(void)
/**************************************************************************
 * Indica si se ha salido de los límites de la posición durante el
 * swing up. En ese caso, devuelve 1 y termina swing up
 **************************************************************************/
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	if ((posicion_f < (10000 + LIMITE_GIRO))
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <comprueba_limites_swing+0x38>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <comprueba_limites_swing+0x3c>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa44 	bl	8000ff4 <__aeabi_fcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <comprueba_limites_swing+0x2c>
			&& (posicion_f > (10000 - LIMITE_GIRO)))
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <comprueba_limites_swing+0x38>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4909      	ldr	r1, [pc, #36]	; (8001b9c <comprueba_limites_swing+0x40>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fa59 	bl	8001030 <__aeabi_fcmpgt>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <comprueba_limites_swing+0x2c>
		return 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e003      	b.n	8001b90 <comprueba_limites_swing+0x34>
	else  {
		Flag_swing_up=0;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <comprueba_limites_swing+0x44>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
		return 1;
 8001b8e:	2301      	movs	r3, #1

	}
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200002e4 	.word	0x200002e4
 8001b98:	4621b800 	.word	0x4621b800
 8001b9c:	4616c800 	.word	0x4616c800
 8001ba0:	20000118 	.word	0x20000118

08001ba4 <comprueba_limites_control>:
uint8_t comprueba_limites_control(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	 * Indica si se ha salido de los límites de posición, angulo o voltaje.
	 * En ese caso devuelve 1 y termina el control.
	 **************************************************************************/
	uint8_t temp; //variable que indica que se ha apagado el motor
	float ang_fil;
	ang_fil = filtro_apaga(angulo_f,0.8);
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <comprueba_limites_control+0x84>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	491f      	ldr	r1, [pc, #124]	; (8001c2c <comprueba_limites_control+0x88>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff45 	bl	8001a40 <filtro_apaga>
 8001bb6:	6038      	str	r0, [r7, #0]
	if ((Flag_control_motor == 0) || (ang_fil < (VERTICAL - LIMITE_ANGULO))
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <comprueba_limites_control+0x8c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d026      	beq.n	8001c0e <comprueba_limites_control+0x6a>
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <comprueba_limites_control+0x90>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f821 	bl	8000c10 <__aeabi_i2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f7ff fa0e 	bl	8000ff4 <__aeabi_fcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d117      	bne.n	8001c0e <comprueba_limites_control+0x6a>
			|| (ang_fil > (VERTICAL + LIMITE_ANGULO))
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <comprueba_limites_control+0x90>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f812 	bl	8000c10 <__aeabi_i2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6838      	ldr	r0, [r7, #0]
 8001bf2:	f7ff fa1d 	bl	8001030 <__aeabi_fcmpgt>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <comprueba_limites_control+0x6a>
			|| (voltaje_f < LIMITE_VOLTAJE))
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <comprueba_limites_control+0x94>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <comprueba_limites_control+0x98>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f9f6 	bl	8000ff4 <__aeabi_fcmplt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <comprueba_limites_control+0x76>
	{
		Flag_control_motor = 0;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <comprueba_limites_control+0x8c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
		// Termina el control si cualquiera de las causas de antes se produjo
		temp=1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	e001      	b.n	8001c1e <comprueba_limites_control+0x7a>
	}
	else
		temp=0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	return temp;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200003a4 	.word	0x200003a4
 8001c2c:	3f4ccccd 	.word	0x3f4ccccd
 8001c30:	20000116 	.word	0x20000116
 8001c34:	20000030 	.word	0x20000030
 8001c38:	200003a0 	.word	0x200003a0
 8001c3c:	44898000 	.word	0x44898000

08001c40 <click_N_Double>:


int click_N_Double(uint8_t time) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	 * - Si no se ha pulsado, devuevle 0.
	 **************************************************************************/
	static uint8_t flag_key, count_key, double_key;
	static uint16_t count_single, Forever_count;
	uint8_t KEY2;
	KEY2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);	// Lee el valor de  PA2
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4838      	ldr	r0, [pc, #224]	; (8001d30 <click_N_Double+0xf0>)
 8001c4e:	f003 fb99 	bl	8005384 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]
	if (KEY2==0)				// La activación del botón es a nivel bajo 0
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <click_N_Double+0x2a>
		Forever_count++;		// Cuenta el tiempo (se incrementa cada 5ms)
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <click_N_Double+0xf4>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <click_N_Double+0xf4>)
 8001c66:	801a      	strh	r2, [r3, #0]
 8001c68:	e002      	b.n	8001c70 <click_N_Double+0x30>
	else
		Forever_count=0;		// Se ha soltado el botón
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <click_N_Double+0xf4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	801a      	strh	r2, [r3, #0]

	if ((0==KEY2)&&(0==flag_key))	flag_key=1;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <click_N_Double+0x44>
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <click_N_Double+0xf8>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <click_N_Double+0x44>
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <click_N_Double+0xf8>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
	if (0==count_key) {
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <click_N_Double+0xfc>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <click_N_Double+0x7e>
		if (flag_key==1) {
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <click_N_Double+0xf8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d108      	bne.n	8001ca6 <click_N_Double+0x66>
			double_key++;
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <click_N_Double+0x100>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <click_N_Double+0x100>)
 8001c9e:	701a      	strb	r2, [r3, #0]
			count_key=1;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <click_N_Double+0xfc>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
		}
		if (double_key==2) {	// Se ha pulsado 2 veces el botón
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <click_N_Double+0x100>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <click_N_Double+0x7e>
			double_key=0;
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <click_N_Double+0x100>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			count_single=0;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <click_N_Double+0x104>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
			return 2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e033      	b.n	8001d26 <click_N_Double+0xe6>
		}
	}
	if (1==KEY2)	flag_key=0, count_key=0;	// Desactivación
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <click_N_Double+0x90>
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <click_N_Double+0xf8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <click_N_Double+0xfc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
	if (1==double_key)	{
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <click_N_Double+0x100>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d125      	bne.n	8001d24 <click_N_Double+0xe4>
		count_single++;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <click_N_Double+0x104>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <click_N_Double+0x104>)
 8001ce2:	801a      	strh	r2, [r3, #0]
		if ((count_single>time) && (Forever_count<time))
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <click_N_Double+0x104>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d20d      	bcs.n	8001d0c <click_N_Double+0xcc>
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <click_N_Double+0xf4>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d907      	bls.n	8001d0c <click_N_Double+0xcc>
		{
			double_key=0;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <click_N_Double+0x100>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
			count_single=0;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <click_N_Double+0x104>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	801a      	strh	r2, [r3, #0]
			return 1;			// Se ha pulsado 1 vez el botón
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e00c      	b.n	8001d26 <click_N_Double+0xe6>
		}
		if (Forever_count>time)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <click_N_Double+0xf4>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d205      	bcs.n	8001d24 <click_N_Double+0xe4>
		{
			double_key=0;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <click_N_Double+0x100>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
			count_single=0;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <click_N_Double+0x104>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
		}
	}
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40010800 	.word	0x40010800
 8001d34:	200000a4 	.word	0x200000a4
 8001d38:	200000a6 	.word	0x200000a6
 8001d3c:	200000a7 	.word	0x200000a7
 8001d40:	200000a8 	.word	0x200000a8
 8001d44:	200000aa 	.word	0x200000aa

08001d48 <key>:

void key(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
	 * Comprueba la activación de PA2 y en ese caso aplica un cambio en la
	 * referencia de posición del péndulo, que puede ser:
	 * - Rampa
	 * - Escalón
	 **************************************************************************/
	float Position=2*360;	// Se puede poner cte
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <key+0x180>)
 8001d50:	607b      	str	r3, [r7, #4]
	//The default is that the swing lever Z-turn is one turn and the output is
	// 1040 jump edges.
	static int tmp, flag;
	static float count;
	// Determina si se ha pulsado 1 o 2 veces el botón (tmp=1 o tmp=2)
	tmp = click_N_Double (100);
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f7ff ff74 	bl	8001c40 <click_N_Double>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <key+0x184>)
 8001d5c:	6013      	str	r3, [r2, #0]

	if (tmp==1) flag=1; //++
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <key+0x184>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <key+0x24>
 8001d66:	4b5a      	ldr	r3, [pc, #360]	; (8001ed0 <key+0x188>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
	if (tmp==2) flag=2; //--
 8001d6c:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <key+0x184>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d102      	bne.n	8001d7a <key+0x32>
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <key+0x188>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]

	//  Cambio referencia escalón
	if (Tipo_ref==0) {
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <key+0x18c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d123      	bne.n	8001dca <key+0x82>
		if (flag==1)
 8001d82:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <key+0x188>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10c      	bne.n	8001da4 <key+0x5c>
		{
			referencia_local = referencia_local+90;
 8001d8a:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <key+0x190>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4953      	ldr	r1, [pc, #332]	; (8001edc <key+0x194>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fe89 	bl	8000aa8 <__addsf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <key+0x190>)
 8001d9c:	601a      	str	r2, [r3, #0]
			flag=0;
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <key+0x188>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
		}
		if (flag==2)
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <key+0x188>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	f040 8083 	bne.w	8001eb4 <key+0x16c>
		{
			referencia_local = referencia_local-90;
 8001dae:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <key+0x190>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	494a      	ldr	r1, [pc, #296]	; (8001edc <key+0x194>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fe75 	bl	8000aa4 <__aeabi_fsub>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <key+0x190>)
 8001dc0:	601a      	str	r2, [r3, #0]
			flag=0;
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <key+0x188>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
			referencia_local=referencia_local-1*360.0/1040;
			count=count+1*360.0/1040;
			if (count>Position)	flag=0, count=0;
		}
	}
}
 8001dc8:	e074      	b.n	8001eb4 <key+0x16c>
		if (flag == 1)
 8001dca:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <key+0x188>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d135      	bne.n	8001e3e <key+0xf6>
			referencia_local = referencia_local + 1 * 360.0 / 1040;
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <key+0x190>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb1e 	bl	8000418 <__aeabi_f2d>
 8001ddc:	a338      	add	r3, pc, #224	; (adr r3, 8001ec0 <key+0x178>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe f9bb 	bl	800015c <__adddf3>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fe05 	bl	80009fc <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a38      	ldr	r2, [pc, #224]	; (8001ed8 <key+0x190>)
 8001df6:	6013      	str	r3, [r2, #0]
			count=count+1*360.0/1040;
 8001df8:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <key+0x198>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb0b 	bl	8000418 <__aeabi_f2d>
 8001e02:	a32f      	add	r3, pc, #188	; (adr r3, 8001ec0 <key+0x178>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe f9a8 	bl	800015c <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fdf2 	bl	80009fc <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <key+0x198>)
 8001e1c:	6013      	str	r3, [r2, #0]
			if(count>Position) 	flag=0,count=0;
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <key+0x198>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff f8e5 	bl	8000ff4 <__aeabi_fcmplt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <key+0xf6>
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <key+0x188>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <key+0x198>)
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
		if (flag == 2)
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <key+0x188>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d136      	bne.n	8001eb4 <key+0x16c>
			referencia_local=referencia_local-1*360.0/1040;
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <key+0x190>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fae4 	bl	8000418 <__aeabi_f2d>
 8001e50:	a31b      	add	r3, pc, #108	; (adr r3, 8001ec0 <key+0x178>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe f97f 	bl	8000158 <__aeabi_dsub>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fdcb 	bl	80009fc <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <key+0x190>)
 8001e6a:	6013      	str	r3, [r2, #0]
			count=count+1*360.0/1040;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <key+0x198>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fad1 	bl	8000418 <__aeabi_f2d>
 8001e76:	a312      	add	r3, pc, #72	; (adr r3, 8001ec0 <key+0x178>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f7fe f96e 	bl	800015c <__adddf3>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fdb8 	bl	80009fc <__aeabi_d2f>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <key+0x198>)
 8001e90:	6013      	str	r3, [r2, #0]
			if (count>Position)	flag=0, count=0;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <key+0x198>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff f8ab 	bl	8000ff4 <__aeabi_fcmplt>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d100      	bne.n	8001ea6 <key+0x15e>
}
 8001ea4:	e006      	b.n	8001eb4 <key+0x16c>
			if (count>Position)	flag=0, count=0;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <key+0x188>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <key+0x198>)
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	76276276 	.word	0x76276276
 8001ec4:	3fd62762 	.word	0x3fd62762
 8001ec8:	44340000 	.word	0x44340000
 8001ecc:	200000ac 	.word	0x200000ac
 8001ed0:	200000b0 	.word	0x200000b0
 8001ed4:	20000117 	.word	0x20000117
 8001ed8:	20000064 	.word	0x20000064
 8001edc:	42b40000 	.word	0x42b40000
 8001ee0:	200000b4 	.word	0x200000b4

08001ee4 <oled_show>:



void oled_show(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af02      	add	r7, sp, #8
	/**************************************************************************
	 * Actualiza o refresca el contenido de la pantalla, en función del menu
	 * que se haya seleccionado.
	 **************************************************************************/
	OLED_ShowString(00,00,(uint8_t*)("PENDULO CIRCULAR"));
 8001eea:	4aa1      	ldr	r2, [pc, #644]	; (8002170 <oled_show+0x28c>)
 8001eec:	2100      	movs	r1, #0
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f001 fd7c 	bl	80039ec <OLED_ShowString>
	switch (Menu) {
 8001ef4:	4b9f      	ldr	r3, [pc, #636]	; (8002174 <oled_show+0x290>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	2b09      	cmp	r3, #9
 8001efc:	f200 83df 	bhi.w	80026be <oled_show+0x7da>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <oled_show+0x24>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	08001f6b 	.word	0x08001f6b
 8001f10:	08002017 	.word	0x08002017
 8001f14:	080020c3 	.word	0x080020c3
 8001f18:	080021a9 	.word	0x080021a9
 8001f1c:	08002255 	.word	0x08002255
 8001f20:	08002295 	.word	0x08002295
 8001f24:	0800238d 	.word	0x0800238d
 8001f28:	08002575 	.word	0x08002575
 8001f2c:	08002619 	.word	0x08002619
	case 1: {
		OLED_ShowString(0,20,(uint8_t*)("MENU:  SWING UP"));
 8001f30:	4a91      	ldr	r2, [pc, #580]	; (8002178 <oled_show+0x294>)
 8001f32:	2114      	movs	r1, #20
 8001f34:	2000      	movs	r0, #0
 8001f36:	f001 fd59 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("Prim swing="));
 8001f3a:	4a90      	ldr	r2, [pc, #576]	; (800217c <oled_show+0x298>)
 8001f3c:	2128      	movs	r1, #40	; 0x28
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f001 fd54 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(80, 40, SWING_PRIMERO, 3, 12);
 8001f44:	4b8e      	ldr	r3, [pc, #568]	; (8002180 <oled_show+0x29c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2303      	movs	r3, #3
 8001f50:	2128      	movs	r1, #40	; 0x28
 8001f52:	2050      	movs	r0, #80	; 0x50
 8001f54:	f001 fcdc 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowChar(100, 40, '-', 12, 1);
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	222d      	movs	r2, #45	; 0x2d
 8001f60:	2128      	movs	r1, #40	; 0x28
 8001f62:	2064      	movs	r0, #100	; 0x64
 8001f64:	f001 fc46 	bl	80037f4 <OLED_ShowChar>
		break;
 8001f68:	e3a9      	b.n	80026be <oled_show+0x7da>
	}
	case 2: {
		OLED_ShowString(0,20,(uint8_t*)("MENU:  CONTROL "));
 8001f6a:	4a86      	ldr	r2, [pc, #536]	; (8002184 <oled_show+0x2a0>)
 8001f6c:	2114      	movs	r1, #20
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f001 fd3c 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("K1= "));
 8001f74:	4a84      	ldr	r2, [pc, #528]	; (8002188 <oled_show+0x2a4>)
 8001f76:	2128      	movs	r1, #40	; 0x28
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f001 fd37 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 40, K1, 3, 12);
 8001f7e:	4b83      	ldr	r3, [pc, #524]	; (800218c <oled_show+0x2a8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f884 	bl	8001090 <__aeabi_f2uiz>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2303      	movs	r3, #3
 8001f90:	2128      	movs	r1, #40	; 0x28
 8001f92:	201e      	movs	r0, #30
 8001f94:	f001 fcbc 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowChar(50, 40, '-', 12, 1);
 8001f98:	2301      	movs	r3, #1
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	222d      	movs	r2, #45	; 0x2d
 8001fa0:	2128      	movs	r1, #40	; 0x28
 8001fa2:	2032      	movs	r0, #50	; 0x32
 8001fa4:	f001 fc26 	bl	80037f4 <OLED_ShowChar>
		OLED_ShowString(0, 50, (uint8_t*) ("K2= "));
 8001fa8:	4a79      	ldr	r2, [pc, #484]	; (8002190 <oled_show+0x2ac>)
 8001faa:	2132      	movs	r1, #50	; 0x32
 8001fac:	2000      	movs	r0, #0
 8001fae:	f001 fd1d 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 50, K2, 3, 12);
 8001fb2:	4b78      	ldr	r3, [pc, #480]	; (8002194 <oled_show+0x2b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f86a 	bl	8001090 <__aeabi_f2uiz>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	2132      	movs	r1, #50	; 0x32
 8001fc6:	201e      	movs	r0, #30
 8001fc8:	f001 fca2 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 40, (uint8_t*) ("K3= "));
 8001fcc:	4a72      	ldr	r2, [pc, #456]	; (8002198 <oled_show+0x2b4>)
 8001fce:	2128      	movs	r1, #40	; 0x28
 8001fd0:	2046      	movs	r0, #70	; 0x46
 8001fd2:	f001 fd0b 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 40, K3, 3, 12);
 8001fd6:	4b71      	ldr	r3, [pc, #452]	; (800219c <oled_show+0x2b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f858 	bl	8001090 <__aeabi_f2uiz>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	230c      	movs	r3, #12
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	2128      	movs	r1, #40	; 0x28
 8001fea:	2064      	movs	r0, #100	; 0x64
 8001fec:	f001 fc90 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 50, (uint8_t*) ("K4= "));
 8001ff0:	4a6b      	ldr	r2, [pc, #428]	; (80021a0 <oled_show+0x2bc>)
 8001ff2:	2132      	movs	r1, #50	; 0x32
 8001ff4:	2046      	movs	r0, #70	; 0x46
 8001ff6:	f001 fcf9 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 50, K4, 3, 12);
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <oled_show+0x2c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f846 	bl	8001090 <__aeabi_f2uiz>
 8002004:	4602      	mov	r2, r0
 8002006:	230c      	movs	r3, #12
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2303      	movs	r3, #3
 800200c:	2132      	movs	r1, #50	; 0x32
 800200e:	2064      	movs	r0, #100	; 0x64
 8002010:	f001 fc7e 	bl	8003910 <OLED_ShowNumber>
		break;
 8002014:	e353      	b.n	80026be <oled_show+0x7da>
	}
	case 3: {
		OLED_ShowString(0,20,(uint8_t*)("MENU:  CONTROL "));
 8002016:	4a5b      	ldr	r2, [pc, #364]	; (8002184 <oled_show+0x2a0>)
 8002018:	2114      	movs	r1, #20
 800201a:	2000      	movs	r0, #0
 800201c:	f001 fce6 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("K1= "));
 8002020:	4a59      	ldr	r2, [pc, #356]	; (8002188 <oled_show+0x2a4>)
 8002022:	2128      	movs	r1, #40	; 0x28
 8002024:	2000      	movs	r0, #0
 8002026:	f001 fce1 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 40, K1, 3, 12);
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <oled_show+0x2a8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f82e 	bl	8001090 <__aeabi_f2uiz>
 8002034:	4602      	mov	r2, r0
 8002036:	230c      	movs	r3, #12
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2303      	movs	r3, #3
 800203c:	2128      	movs	r1, #40	; 0x28
 800203e:	201e      	movs	r0, #30
 8002040:	f001 fc66 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(0, 50, (uint8_t*) ("K2= "));
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <oled_show+0x2ac>)
 8002046:	2132      	movs	r1, #50	; 0x32
 8002048:	2000      	movs	r0, #0
 800204a:	f001 fccf 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 50, K2, 3, 12);
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <oled_show+0x2b0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f81c 	bl	8001090 <__aeabi_f2uiz>
 8002058:	4602      	mov	r2, r0
 800205a:	230c      	movs	r3, #12
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2303      	movs	r3, #3
 8002060:	2132      	movs	r1, #50	; 0x32
 8002062:	201e      	movs	r0, #30
 8002064:	f001 fc54 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowChar(50, 50, '-', 12, 1);
 8002068:	2301      	movs	r3, #1
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	230c      	movs	r3, #12
 800206e:	222d      	movs	r2, #45	; 0x2d
 8002070:	2132      	movs	r1, #50	; 0x32
 8002072:	2032      	movs	r0, #50	; 0x32
 8002074:	f001 fbbe 	bl	80037f4 <OLED_ShowChar>
		OLED_ShowString(70, 40, (uint8_t*) ("K3= "));
 8002078:	4a47      	ldr	r2, [pc, #284]	; (8002198 <oled_show+0x2b4>)
 800207a:	2128      	movs	r1, #40	; 0x28
 800207c:	2046      	movs	r0, #70	; 0x46
 800207e:	f001 fcb5 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 40, K3, 3, 12);
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <oled_show+0x2b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f802 	bl	8001090 <__aeabi_f2uiz>
 800208c:	4602      	mov	r2, r0
 800208e:	230c      	movs	r3, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2303      	movs	r3, #3
 8002094:	2128      	movs	r1, #40	; 0x28
 8002096:	2064      	movs	r0, #100	; 0x64
 8002098:	f001 fc3a 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 50, (uint8_t*) ("K4= "));
 800209c:	4a40      	ldr	r2, [pc, #256]	; (80021a0 <oled_show+0x2bc>)
 800209e:	2132      	movs	r1, #50	; 0x32
 80020a0:	2046      	movs	r0, #70	; 0x46
 80020a2:	f001 fca3 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 50, K4, 3, 12);
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <oled_show+0x2c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fff0 	bl	8001090 <__aeabi_f2uiz>
 80020b0:	4602      	mov	r2, r0
 80020b2:	230c      	movs	r3, #12
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2303      	movs	r3, #3
 80020b8:	2132      	movs	r1, #50	; 0x32
 80020ba:	2064      	movs	r0, #100	; 0x64
 80020bc:	f001 fc28 	bl	8003910 <OLED_ShowNumber>
		break;
 80020c0:	e2fd      	b.n	80026be <oled_show+0x7da>
	}
	case 4: {
		OLED_ShowString(0,20,(uint8_t*)("MENU:  CONTROL "));
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <oled_show+0x2a0>)
 80020c4:	2114      	movs	r1, #20
 80020c6:	2000      	movs	r0, #0
 80020c8:	f001 fc90 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("K1= "));
 80020cc:	4a2e      	ldr	r2, [pc, #184]	; (8002188 <oled_show+0x2a4>)
 80020ce:	2128      	movs	r1, #40	; 0x28
 80020d0:	2000      	movs	r0, #0
 80020d2:	f001 fc8b 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 40, K1, 3, 12);
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <oled_show+0x2a8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ffd8 	bl	8001090 <__aeabi_f2uiz>
 80020e0:	4602      	mov	r2, r0
 80020e2:	230c      	movs	r3, #12
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2303      	movs	r3, #3
 80020e8:	2128      	movs	r1, #40	; 0x28
 80020ea:	201e      	movs	r0, #30
 80020ec:	f001 fc10 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(0, 50, (uint8_t*) ("K2= "));
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <oled_show+0x2ac>)
 80020f2:	2132      	movs	r1, #50	; 0x32
 80020f4:	2000      	movs	r0, #0
 80020f6:	f001 fc79 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 50, K2, 3, 12);
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <oled_show+0x2b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe ffc6 	bl	8001090 <__aeabi_f2uiz>
 8002104:	4602      	mov	r2, r0
 8002106:	230c      	movs	r3, #12
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2303      	movs	r3, #3
 800210c:	2132      	movs	r1, #50	; 0x32
 800210e:	201e      	movs	r0, #30
 8002110:	f001 fbfe 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 40, (uint8_t*) ("K3= "));
 8002114:	4a20      	ldr	r2, [pc, #128]	; (8002198 <oled_show+0x2b4>)
 8002116:	2128      	movs	r1, #40	; 0x28
 8002118:	2046      	movs	r0, #70	; 0x46
 800211a:	f001 fc67 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 40, K3, 3, 12);
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <oled_show+0x2b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe ffb4 	bl	8001090 <__aeabi_f2uiz>
 8002128:	4602      	mov	r2, r0
 800212a:	230c      	movs	r3, #12
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2303      	movs	r3, #3
 8002130:	2128      	movs	r1, #40	; 0x28
 8002132:	2064      	movs	r0, #100	; 0x64
 8002134:	f001 fbec 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowChar(120, 40, '-', 12, 1);
 8002138:	2301      	movs	r3, #1
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	230c      	movs	r3, #12
 800213e:	222d      	movs	r2, #45	; 0x2d
 8002140:	2128      	movs	r1, #40	; 0x28
 8002142:	2078      	movs	r0, #120	; 0x78
 8002144:	f001 fb56 	bl	80037f4 <OLED_ShowChar>
		OLED_ShowString(70, 50, (uint8_t*) ("K4= "));
 8002148:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <oled_show+0x2bc>)
 800214a:	2132      	movs	r1, #50	; 0x32
 800214c:	2046      	movs	r0, #70	; 0x46
 800214e:	f001 fc4d 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 50, K4, 3, 12);
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <oled_show+0x2c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe ff9a 	bl	8001090 <__aeabi_f2uiz>
 800215c:	4602      	mov	r2, r0
 800215e:	230c      	movs	r3, #12
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2303      	movs	r3, #3
 8002164:	2132      	movs	r1, #50	; 0x32
 8002166:	2064      	movs	r0, #100	; 0x64
 8002168:	f001 fbd2 	bl	8003910 <OLED_ShowNumber>
		break;
 800216c:	e2a7      	b.n	80026be <oled_show+0x7da>
 800216e:	bf00      	nop
 8002170:	08007948 	.word	0x08007948
 8002174:	20000028 	.word	0x20000028
 8002178:	0800795c 	.word	0x0800795c
 800217c:	0800796c 	.word	0x0800796c
 8002180:	2000006d 	.word	0x2000006d
 8002184:	08007978 	.word	0x08007978
 8002188:	08007988 	.word	0x08007988
 800218c:	20000014 	.word	0x20000014
 8002190:	08007990 	.word	0x08007990
 8002194:	2000001c 	.word	0x2000001c
 8002198:	08007998 	.word	0x08007998
 800219c:	20000018 	.word	0x20000018
 80021a0:	080079a0 	.word	0x080079a0
 80021a4:	20000020 	.word	0x20000020
	}
	case 5: {
		OLED_ShowString(0,20,(uint8_t*)("MENU:  CONTROL "));
 80021a8:	4aab      	ldr	r2, [pc, #684]	; (8002458 <oled_show+0x574>)
 80021aa:	2114      	movs	r1, #20
 80021ac:	2000      	movs	r0, #0
 80021ae:	f001 fc1d 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("K1= "));
 80021b2:	4aaa      	ldr	r2, [pc, #680]	; (800245c <oled_show+0x578>)
 80021b4:	2128      	movs	r1, #40	; 0x28
 80021b6:	2000      	movs	r0, #0
 80021b8:	f001 fc18 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 40, K1, 3, 12);
 80021bc:	4ba8      	ldr	r3, [pc, #672]	; (8002460 <oled_show+0x57c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe ff65 	bl	8001090 <__aeabi_f2uiz>
 80021c6:	4602      	mov	r2, r0
 80021c8:	230c      	movs	r3, #12
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2303      	movs	r3, #3
 80021ce:	2128      	movs	r1, #40	; 0x28
 80021d0:	201e      	movs	r0, #30
 80021d2:	f001 fb9d 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(0, 50, (uint8_t*) ("K2= "));
 80021d6:	4aa3      	ldr	r2, [pc, #652]	; (8002464 <oled_show+0x580>)
 80021d8:	2132      	movs	r1, #50	; 0x32
 80021da:	2000      	movs	r0, #0
 80021dc:	f001 fc06 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 50, K2, 3, 12);
 80021e0:	4ba1      	ldr	r3, [pc, #644]	; (8002468 <oled_show+0x584>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe ff53 	bl	8001090 <__aeabi_f2uiz>
 80021ea:	4602      	mov	r2, r0
 80021ec:	230c      	movs	r3, #12
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2303      	movs	r3, #3
 80021f2:	2132      	movs	r1, #50	; 0x32
 80021f4:	201e      	movs	r0, #30
 80021f6:	f001 fb8b 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 40, (uint8_t*) ("K3= "));
 80021fa:	4a9c      	ldr	r2, [pc, #624]	; (800246c <oled_show+0x588>)
 80021fc:	2128      	movs	r1, #40	; 0x28
 80021fe:	2046      	movs	r0, #70	; 0x46
 8002200:	f001 fbf4 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 40, K3, 3, 12);
 8002204:	4b9a      	ldr	r3, [pc, #616]	; (8002470 <oled_show+0x58c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ff41 	bl	8001090 <__aeabi_f2uiz>
 800220e:	4602      	mov	r2, r0
 8002210:	230c      	movs	r3, #12
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2303      	movs	r3, #3
 8002216:	2128      	movs	r1, #40	; 0x28
 8002218:	2064      	movs	r0, #100	; 0x64
 800221a:	f001 fb79 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 50, (uint8_t*) ("K4= "));
 800221e:	4a95      	ldr	r2, [pc, #596]	; (8002474 <oled_show+0x590>)
 8002220:	2132      	movs	r1, #50	; 0x32
 8002222:	2046      	movs	r0, #70	; 0x46
 8002224:	f001 fbe2 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(100, 50, K4, 3, 12);
 8002228:	4b93      	ldr	r3, [pc, #588]	; (8002478 <oled_show+0x594>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe ff2f 	bl	8001090 <__aeabi_f2uiz>
 8002232:	4602      	mov	r2, r0
 8002234:	230c      	movs	r3, #12
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2303      	movs	r3, #3
 800223a:	2132      	movs	r1, #50	; 0x32
 800223c:	2064      	movs	r0, #100	; 0x64
 800223e:	f001 fb67 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowChar(120, 50, '-', 12, 1);
 8002242:	2301      	movs	r3, #1
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	230c      	movs	r3, #12
 8002248:	222d      	movs	r2, #45	; 0x2d
 800224a:	2132      	movs	r1, #50	; 0x32
 800224c:	2078      	movs	r0, #120	; 0x78
 800224e:	f001 fad1 	bl	80037f4 <OLED_ShowChar>
		break;
 8002252:	e234      	b.n	80026be <oled_show+0x7da>
	}
	case 6: {
			OLED_ShowString(0,20,(uint8_t*)("MENU:  CONTROL "));
 8002254:	4a80      	ldr	r2, [pc, #512]	; (8002458 <oled_show+0x574>)
 8002256:	2114      	movs	r1, #20
 8002258:	2000      	movs	r0, #0
 800225a:	f001 fbc7 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("Ki= "));
 800225e:	4a87      	ldr	r2, [pc, #540]	; (800247c <oled_show+0x598>)
 8002260:	2128      	movs	r1, #40	; 0x28
 8002262:	2000      	movs	r0, #0
 8002264:	f001 fbc2 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 40, Ki, 3, 12);
 8002268:	4b85      	ldr	r3, [pc, #532]	; (8002480 <oled_show+0x59c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe ff0f 	bl	8001090 <__aeabi_f2uiz>
 8002272:	4602      	mov	r2, r0
 8002274:	230c      	movs	r3, #12
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2303      	movs	r3, #3
 800227a:	2128      	movs	r1, #40	; 0x28
 800227c:	201e      	movs	r0, #30
 800227e:	f001 fb47 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowChar(50, 40, '-', 12, 1);
 8002282:	2301      	movs	r3, #1
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	230c      	movs	r3, #12
 8002288:	222d      	movs	r2, #45	; 0x2d
 800228a:	2128      	movs	r1, #40	; 0x28
 800228c:	2032      	movs	r0, #50	; 0x32
 800228e:	f001 fab1 	bl	80037f4 <OLED_ShowChar>
			break;
 8002292:	e214      	b.n	80026be <oled_show+0x7da>
		}
	case 7: {
		OLED_ShowString(0,20,(uint8_t*)("MENU: MEDIDAS 1"));
 8002294:	4a7b      	ldr	r2, [pc, #492]	; (8002484 <oled_show+0x5a0>)
 8002296:	2114      	movs	r1, #20
 8002298:	2000      	movs	r0, #0
 800229a:	f001 fba7 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 40, (uint8_t*) ("Ang= "));
 800229e:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <oled_show+0x5a4>)
 80022a0:	2128      	movs	r1, #40	; 0x28
 80022a2:	2000      	movs	r0, #0
 80022a4:	f001 fba2 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 40, (int32_t) angulo_f, 4, 12);
 80022a8:	4b78      	ldr	r3, [pc, #480]	; (800248c <oled_show+0x5a8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fec9 	bl	8001044 <__aeabi_f2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	230c      	movs	r3, #12
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2304      	movs	r3, #4
 80022bc:	2128      	movs	r1, #40	; 0x28
 80022be:	201e      	movs	r0, #30
 80022c0:	f001 fb26 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(0, 50, (uint8_t*) ("Pos= "));
 80022c4:	4a72      	ldr	r2, [pc, #456]	; (8002490 <oled_show+0x5ac>)
 80022c6:	2132      	movs	r1, #50	; 0x32
 80022c8:	2000      	movs	r0, #0
 80022ca:	f001 fb8f 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(30, 50, (int32_t) posicion_f, 5, 12);
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <oled_show+0x5b0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe feb6 	bl	8001044 <__aeabi_f2iz>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	230c      	movs	r3, #12
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2305      	movs	r3, #5
 80022e2:	2132      	movs	r1, #50	; 0x32
 80022e4:	201e      	movs	r0, #30
 80022e6:	f001 fb13 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(70, 40, (uint8_t*) ("Vol= "));
 80022ea:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <oled_show+0x5b4>)
 80022ec:	2128      	movs	r1, #40	; 0x28
 80022ee:	2046      	movs	r0, #70	; 0x46
 80022f0:	f001 fb7c 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(70, 50, (int32_t) voltaje_f / 100, 2, 12);
 80022f4:	4b69      	ldr	r3, [pc, #420]	; (800249c <oled_show+0x5b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fea3 	bl	8001044 <__aeabi_f2iz>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <oled_show+0x5bc>)
 8002302:	fb82 1203 	smull	r1, r2, r2, r3
 8002306:	1152      	asrs	r2, r2, #5
 8002308:	17db      	asrs	r3, r3, #31
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	461a      	mov	r2, r3
 800230e:	230c      	movs	r3, #12
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2302      	movs	r3, #2
 8002314:	2132      	movs	r1, #50	; 0x32
 8002316:	2046      	movs	r0, #70	; 0x46
 8002318:	f001 fafa 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(83,50,(uint8_t*)".");
 800231c:	4a61      	ldr	r2, [pc, #388]	; (80024a4 <oled_show+0x5c0>)
 800231e:	2132      	movs	r1, #50	; 0x32
 8002320:	2053      	movs	r0, #83	; 0x53
 8002322:	f001 fb63 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(93,50,((int)voltaje_f)%100,2,12);	// Parte decimal
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <oled_show+0x5b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fe8a 	bl	8001044 <__aeabi_f2iz>
 8002330:	4603      	mov	r3, r0
 8002332:	4a5b      	ldr	r2, [pc, #364]	; (80024a0 <oled_show+0x5bc>)
 8002334:	fb82 1203 	smull	r1, r2, r2, r3
 8002338:	1151      	asrs	r1, r2, #5
 800233a:	17da      	asrs	r2, r3, #31
 800233c:	1a8a      	subs	r2, r1, r2
 800233e:	2164      	movs	r1, #100	; 0x64
 8002340:	fb01 f202 	mul.w	r2, r1, r2
 8002344:	1a9a      	subs	r2, r3, r2
 8002346:	230c      	movs	r3, #12
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2302      	movs	r3, #2
 800234c:	2132      	movs	r1, #50	; 0x32
 800234e:	205d      	movs	r0, #93	; 0x5d
 8002350:	f001 fade 	bl	8003910 <OLED_ShowNumber>
		if(((int)voltaje_f)%100<10) 	OLED_ShowNumber(87,40,0,2,12);
 8002354:	4b51      	ldr	r3, [pc, #324]	; (800249c <oled_show+0x5b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fe73 	bl	8001044 <__aeabi_f2iz>
 800235e:	4602      	mov	r2, r0
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <oled_show+0x5bc>)
 8002362:	fb83 1302 	smull	r1, r3, r3, r2
 8002366:	1159      	asrs	r1, r3, #5
 8002368:	17d3      	asrs	r3, r2, #31
 800236a:	1acb      	subs	r3, r1, r3
 800236c:	2164      	movs	r1, #100	; 0x64
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b09      	cmp	r3, #9
 8002376:	f300 81a1 	bgt.w	80026bc <oled_show+0x7d8>
 800237a:	230c      	movs	r3, #12
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2302      	movs	r3, #2
 8002380:	2200      	movs	r2, #0
 8002382:	2128      	movs	r1, #40	; 0x28
 8002384:	2057      	movs	r0, #87	; 0x57
 8002386:	f001 fac3 	bl	8003910 <OLED_ShowNumber>
		break;
 800238a:	e197      	b.n	80026bc <oled_show+0x7d8>
	}
	case 8: {
		OLED_ShowString(0,20,(uint8_t*)("MENU: MEDIDAS 2"));
 800238c:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <oled_show+0x5c4>)
 800238e:	2114      	movs	r1, #20
 8002390:	2000      	movs	r0, #0
 8002392:	f001 fb2b 	bl	80039ec <OLED_ShowString>
		if (velocidad_2>=0) {
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <oled_show+0x5c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe3c 	bl	800101c <__aeabi_fcmpge>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d018      	beq.n	80023dc <oled_show+0x4f8>
			OLED_ShowString(0, 40, (uint8_t*) ("dA= "));
 80023aa:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <oled_show+0x5cc>)
 80023ac:	2128      	movs	r1, #40	; 0x28
 80023ae:	2000      	movs	r0, #0
 80023b0:	f001 fb1c 	bl	80039ec <OLED_ShowString>
			OLED_ShowNumber(30, 40, (int32_t) (+velocidad_2), 5, 12);
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <oled_show+0x5c8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fe43 	bl	8001044 <__aeabi_f2iz>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	230c      	movs	r3, #12
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2305      	movs	r3, #5
 80023c8:	2128      	movs	r1, #40	; 0x28
 80023ca:	201e      	movs	r0, #30
 80023cc:	f001 faa0 	bl	8003910 <OLED_ShowNumber>
			OLED_ShowString(25,40,(uint8_t*)"+");
 80023d0:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <oled_show+0x5d0>)
 80023d2:	2128      	movs	r1, #40	; 0x28
 80023d4:	2019      	movs	r0, #25
 80023d6:	f001 fb09 	bl	80039ec <OLED_ShowString>
 80023da:	e019      	b.n	8002410 <oled_show+0x52c>
		}
		else {
			OLED_ShowString(0, 40, (uint8_t*) ("dA= "));
 80023dc:	4a34      	ldr	r2, [pc, #208]	; (80024b0 <oled_show+0x5cc>)
 80023de:	2128      	movs	r1, #40	; 0x28
 80023e0:	2000      	movs	r0, #0
 80023e2:	f001 fb03 	bl	80039ec <OLED_ShowString>
			OLED_ShowNumber(30, 40, (int32_t) (-velocidad_2), 5, 12);
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <oled_show+0x5c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fe28 	bl	8001044 <__aeabi_f2iz>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	230c      	movs	r3, #12
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2305      	movs	r3, #5
 80023fe:	2128      	movs	r1, #40	; 0x28
 8002400:	201e      	movs	r0, #30
 8002402:	f001 fa85 	bl	8003910 <OLED_ShowNumber>
			OLED_ShowString(25,40,(uint8_t*)"-");
 8002406:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <oled_show+0x5d4>)
 8002408:	2128      	movs	r1, #40	; 0x28
 800240a:	2019      	movs	r0, #25
 800240c:	f001 faee 	bl	80039ec <OLED_ShowString>
		}
		if (acc_integral>=0) {
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <oled_show+0x5d8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fdff 	bl	800101c <__aeabi_fcmpge>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d04f      	beq.n	80024c4 <oled_show+0x5e0>
			OLED_ShowString(70, 40, (uint8_t*) ("in= "));
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <oled_show+0x5dc>)
 8002426:	2128      	movs	r1, #40	; 0x28
 8002428:	2046      	movs	r0, #70	; 0x46
 800242a:	f001 fadf 	bl	80039ec <OLED_ShowString>
			OLED_ShowNumber(95, 40, (int32_t) (+acc_integral), 5, 12);
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <oled_show+0x5d8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fe06 	bl	8001044 <__aeabi_f2iz>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	230c      	movs	r3, #12
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2305      	movs	r3, #5
 8002442:	2128      	movs	r1, #40	; 0x28
 8002444:	205f      	movs	r0, #95	; 0x5f
 8002446:	f001 fa63 	bl	8003910 <OLED_ShowNumber>
			OLED_ShowString(95,40,(uint8_t*)"+");
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <oled_show+0x5d0>)
 800244c:	2128      	movs	r1, #40	; 0x28
 800244e:	205f      	movs	r0, #95	; 0x5f
 8002450:	f001 facc 	bl	80039ec <OLED_ShowString>
 8002454:	e050      	b.n	80024f8 <oled_show+0x614>
 8002456:	bf00      	nop
 8002458:	08007978 	.word	0x08007978
 800245c:	08007988 	.word	0x08007988
 8002460:	20000014 	.word	0x20000014
 8002464:	08007990 	.word	0x08007990
 8002468:	2000001c 	.word	0x2000001c
 800246c:	08007998 	.word	0x08007998
 8002470:	20000018 	.word	0x20000018
 8002474:	080079a0 	.word	0x080079a0
 8002478:	20000020 	.word	0x20000020
 800247c:	080079a8 	.word	0x080079a8
 8002480:	20000010 	.word	0x20000010
 8002484:	080079b0 	.word	0x080079b0
 8002488:	080079c0 	.word	0x080079c0
 800248c:	200003a4 	.word	0x200003a4
 8002490:	080079c8 	.word	0x080079c8
 8002494:	200002e4 	.word	0x200002e4
 8002498:	080079d0 	.word	0x080079d0
 800249c:	200003a0 	.word	0x200003a0
 80024a0:	51eb851f 	.word	0x51eb851f
 80024a4:	080079d8 	.word	0x080079d8
 80024a8:	080079dc 	.word	0x080079dc
 80024ac:	200002e0 	.word	0x200002e0
 80024b0:	080079ec 	.word	0x080079ec
 80024b4:	080079f4 	.word	0x080079f4
 80024b8:	080079f8 	.word	0x080079f8
 80024bc:	20000164 	.word	0x20000164
 80024c0:	080079fc 	.word	0x080079fc
		}
		else {
			OLED_ShowString(70, 40, (uint8_t*) ("in= "));
 80024c4:	4a80      	ldr	r2, [pc, #512]	; (80026c8 <oled_show+0x7e4>)
 80024c6:	2128      	movs	r1, #40	; 0x28
 80024c8:	2046      	movs	r0, #70	; 0x46
 80024ca:	f001 fa8f 	bl	80039ec <OLED_ShowString>
			OLED_ShowNumber(95, 40, (int32_t) (-acc_integral), 5, 12);
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <oled_show+0x7e8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fdb4 	bl	8001044 <__aeabi_f2iz>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	230c      	movs	r3, #12
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2305      	movs	r3, #5
 80024e6:	2128      	movs	r1, #40	; 0x28
 80024e8:	205f      	movs	r0, #95	; 0x5f
 80024ea:	f001 fa11 	bl	8003910 <OLED_ShowNumber>
			OLED_ShowString(95,40,(uint8_t*)"-");
 80024ee:	4a78      	ldr	r2, [pc, #480]	; (80026d0 <oled_show+0x7ec>)
 80024f0:	2128      	movs	r1, #40	; 0x28
 80024f2:	205f      	movs	r0, #95	; 0x5f
 80024f4:	f001 fa7a 	bl	80039ec <OLED_ShowString>
		}
		if (velocidad_1>=0) {
 80024f8:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <oled_show+0x7f0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fd8b 	bl	800101c <__aeabi_fcmpge>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <oled_show+0x65a>
			OLED_ShowString(0, 50, (uint8_t*) ("dP= "));
 800250c:	4a72      	ldr	r2, [pc, #456]	; (80026d8 <oled_show+0x7f4>)
 800250e:	2132      	movs	r1, #50	; 0x32
 8002510:	2000      	movs	r0, #0
 8002512:	f001 fa6b 	bl	80039ec <OLED_ShowString>
			OLED_ShowNumber(30, 50, (int32_t) (+velocidad_1), 5, 12);
 8002516:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <oled_show+0x7f0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fd92 	bl	8001044 <__aeabi_f2iz>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	230c      	movs	r3, #12
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2305      	movs	r3, #5
 800252a:	2132      	movs	r1, #50	; 0x32
 800252c:	201e      	movs	r0, #30
 800252e:	f001 f9ef 	bl	8003910 <OLED_ShowNumber>
			OLED_ShowString(25,50,(uint8_t*)"+");
 8002532:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <oled_show+0x7f8>)
 8002534:	2132      	movs	r1, #50	; 0x32
 8002536:	2019      	movs	r0, #25
 8002538:	f001 fa58 	bl	80039ec <OLED_ShowString>
		else {
			OLED_ShowString(0, 50, (uint8_t*) ("dP= "));
			OLED_ShowNumber(30, 50, (int32_t) (-velocidad_1), 5, 12);
			OLED_ShowString(25,50,(uint8_t*)"-");
		}
		break;
 800253c:	e0bf      	b.n	80026be <oled_show+0x7da>
			OLED_ShowString(0, 50, (uint8_t*) ("dP= "));
 800253e:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <oled_show+0x7f4>)
 8002540:	2132      	movs	r1, #50	; 0x32
 8002542:	2000      	movs	r0, #0
 8002544:	f001 fa52 	bl	80039ec <OLED_ShowString>
			OLED_ShowNumber(30, 50, (int32_t) (-velocidad_1), 5, 12);
 8002548:	4b62      	ldr	r3, [pc, #392]	; (80026d4 <oled_show+0x7f0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd77 	bl	8001044 <__aeabi_f2iz>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	230c      	movs	r3, #12
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2305      	movs	r3, #5
 8002560:	2132      	movs	r1, #50	; 0x32
 8002562:	201e      	movs	r0, #30
 8002564:	f001 f9d4 	bl	8003910 <OLED_ShowNumber>
			OLED_ShowString(25,50,(uint8_t*)"-");
 8002568:	4a59      	ldr	r2, [pc, #356]	; (80026d0 <oled_show+0x7ec>)
 800256a:	2132      	movs	r1, #50	; 0x32
 800256c:	2019      	movs	r0, #25
 800256e:	f001 fa3d 	bl	80039ec <OLED_ShowString>
		break;
 8002572:	e0a4      	b.n	80026be <oled_show+0x7da>
	}
	case 9: {
		OLED_ShowString(0,20,(uint8_t*)("MODO: REFERENCIA"));
 8002574:	4a5a      	ldr	r2, [pc, #360]	; (80026e0 <oled_show+0x7fc>)
 8002576:	2114      	movs	r1, #20
 8002578:	2000      	movs	r0, #0
 800257a:	f001 fa37 	bl	80039ec <OLED_ShowString>
		if (Tipo_ref==0) OLED_ShowString(0,30,(uint8_t*)("Tipo: Escalon"));
 800257e:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <oled_show+0x800>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <oled_show+0x6ae>
 8002586:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <oled_show+0x804>)
 8002588:	211e      	movs	r1, #30
 800258a:	2000      	movs	r0, #0
 800258c:	f001 fa2e 	bl	80039ec <OLED_ShowString>
 8002590:	e004      	b.n	800259c <oled_show+0x6b8>
		else OLED_ShowString(0,30,(uint8_t*)("Tipo:   Rampa"));
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <oled_show+0x808>)
 8002594:	211e      	movs	r1, #30
 8002596:	2000      	movs	r0, #0
 8002598:	f001 fa28 	bl	80039ec <OLED_ShowString>
		OLED_ShowChar(120,30,'-',12,1);
 800259c:	2301      	movs	r3, #1
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	230c      	movs	r3, #12
 80025a2:	222d      	movs	r2, #45	; 0x2d
 80025a4:	211e      	movs	r1, #30
 80025a6:	2078      	movs	r0, #120	; 0x78
 80025a8:	f001 f924 	bl	80037f4 <OLED_ShowChar>
		if (ORIGEN_REF==1) OLED_ShowString(0,40,(uint8_t*)("Fuente: Local"));
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <oled_show+0x80c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <oled_show+0x6dc>
 80025b4:	4a4f      	ldr	r2, [pc, #316]	; (80026f4 <oled_show+0x810>)
 80025b6:	2128      	movs	r1, #40	; 0x28
 80025b8:	2000      	movs	r0, #0
 80025ba:	f001 fa17 	bl	80039ec <OLED_ShowString>
 80025be:	e004      	b.n	80025ca <oled_show+0x6e6>
		else OLED_ShowString(0,40,(uint8_t*)("Fuente: Exter"));
 80025c0:	4a4d      	ldr	r2, [pc, #308]	; (80026f8 <oled_show+0x814>)
 80025c2:	2128      	movs	r1, #40	; 0x28
 80025c4:	2000      	movs	r0, #0
 80025c6:	f001 fa11 	bl	80039ec <OLED_ShowString>
		OLED_ShowString(0, 50, (uint8_t*) ("P= "));
 80025ca:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <oled_show+0x818>)
 80025cc:	2132      	movs	r1, #50	; 0x32
 80025ce:	2000      	movs	r0, #0
 80025d0:	f001 fa0c 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(25, 50, (int32_t) posicion_f, 5, 12);
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <oled_show+0x81c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fd33 	bl	8001044 <__aeabi_f2iz>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	230c      	movs	r3, #12
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2305      	movs	r3, #5
 80025e8:	2132      	movs	r1, #50	; 0x32
 80025ea:	2019      	movs	r0, #25
 80025ec:	f001 f990 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(65, 50, (uint8_t*) ("R= "));
 80025f0:	4a44      	ldr	r2, [pc, #272]	; (8002704 <oled_show+0x820>)
 80025f2:	2132      	movs	r1, #50	; 0x32
 80025f4:	2041      	movs	r0, #65	; 0x41
 80025f6:	f001 f9f9 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(90, 50, (int32_t) referencia, 5, 12);
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <oled_show+0x824>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd20 	bl	8001044 <__aeabi_f2iz>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	230c      	movs	r3, #12
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2305      	movs	r3, #5
 800260e:	2132      	movs	r1, #50	; 0x32
 8002610:	205a      	movs	r0, #90	; 0x5a
 8002612:	f001 f97d 	bl	8003910 <OLED_ShowNumber>
		break;
 8002616:	e052      	b.n	80026be <oled_show+0x7da>
	}
	case 10: {
		OLED_ShowString(0,20,(uint8_t*)("MODO: REFERENCIA"));
 8002618:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <oled_show+0x7fc>)
 800261a:	2114      	movs	r1, #20
 800261c:	2000      	movs	r0, #0
 800261e:	f001 f9e5 	bl	80039ec <OLED_ShowString>
		if (Tipo_ref==0) OLED_ShowString(0,30,(uint8_t*)("Tipo: Escalon"));
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <oled_show+0x800>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <oled_show+0x752>
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <oled_show+0x804>)
 800262c:	211e      	movs	r1, #30
 800262e:	2000      	movs	r0, #0
 8002630:	f001 f9dc 	bl	80039ec <OLED_ShowString>
 8002634:	e004      	b.n	8002640 <oled_show+0x75c>
		else OLED_ShowString(0,30,(uint8_t*)("Tipo:   Rampa"));
 8002636:	4a2d      	ldr	r2, [pc, #180]	; (80026ec <oled_show+0x808>)
 8002638:	211e      	movs	r1, #30
 800263a:	2000      	movs	r0, #0
 800263c:	f001 f9d6 	bl	80039ec <OLED_ShowString>
		if (ORIGEN_REF==1) OLED_ShowString(0,40,(uint8_t*)("Fuente: Local"));
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <oled_show+0x80c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <oled_show+0x770>
 8002648:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <oled_show+0x810>)
 800264a:	2128      	movs	r1, #40	; 0x28
 800264c:	2000      	movs	r0, #0
 800264e:	f001 f9cd 	bl	80039ec <OLED_ShowString>
 8002652:	e004      	b.n	800265e <oled_show+0x77a>
		else  OLED_ShowString(0,40,(uint8_t*)("Fuente: Exter"));
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <oled_show+0x814>)
 8002656:	2128      	movs	r1, #40	; 0x28
 8002658:	2000      	movs	r0, #0
 800265a:	f001 f9c7 	bl	80039ec <OLED_ShowString>
		OLED_ShowChar(120,40,'-',12,1);
 800265e:	2301      	movs	r3, #1
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	230c      	movs	r3, #12
 8002664:	222d      	movs	r2, #45	; 0x2d
 8002666:	2128      	movs	r1, #40	; 0x28
 8002668:	2078      	movs	r0, #120	; 0x78
 800266a:	f001 f8c3 	bl	80037f4 <OLED_ShowChar>
		OLED_ShowString(0, 50, (uint8_t*) ("P= "));
 800266e:	4a23      	ldr	r2, [pc, #140]	; (80026fc <oled_show+0x818>)
 8002670:	2132      	movs	r1, #50	; 0x32
 8002672:	2000      	movs	r0, #0
 8002674:	f001 f9ba 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(25, 50, (int32_t) posicion_f, 5, 12);
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <oled_show+0x81c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fce1 	bl	8001044 <__aeabi_f2iz>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	230c      	movs	r3, #12
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2305      	movs	r3, #5
 800268c:	2132      	movs	r1, #50	; 0x32
 800268e:	2019      	movs	r0, #25
 8002690:	f001 f93e 	bl	8003910 <OLED_ShowNumber>
		OLED_ShowString(65, 50, (uint8_t*) ("R= "));
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <oled_show+0x820>)
 8002696:	2132      	movs	r1, #50	; 0x32
 8002698:	2041      	movs	r0, #65	; 0x41
 800269a:	f001 f9a7 	bl	80039ec <OLED_ShowString>
		OLED_ShowNumber(90, 50, (int32_t) referencia, 5, 12);
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <oled_show+0x824>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fcce 	bl	8001044 <__aeabi_f2iz>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	230c      	movs	r3, #12
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2305      	movs	r3, #5
 80026b2:	2132      	movs	r1, #50	; 0x32
 80026b4:	205a      	movs	r0, #90	; 0x5a
 80026b6:	f001 f92b 	bl	8003910 <OLED_ShowNumber>
		break;
 80026ba:	e000      	b.n	80026be <oled_show+0x7da>
		break;
 80026bc:	bf00      	nop
	}
	}
	OLED_Refresh_Gram();
 80026be:	f000 ff97 	bl	80035f0 <OLED_Refresh_Gram>
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	080079fc 	.word	0x080079fc
 80026cc:	20000164 	.word	0x20000164
 80026d0:	080079f8 	.word	0x080079f8
 80026d4:	20000110 	.word	0x20000110
 80026d8:	08007a04 	.word	0x08007a04
 80026dc:	080079f4 	.word	0x080079f4
 80026e0:	08007a0c 	.word	0x08007a0c
 80026e4:	20000117 	.word	0x20000117
 80026e8:	08007a20 	.word	0x08007a20
 80026ec:	08007a30 	.word	0x08007a30
 80026f0:	20000032 	.word	0x20000032
 80026f4:	08007a40 	.word	0x08007a40
 80026f8:	08007a50 	.word	0x08007a50
 80026fc:	08007a60 	.word	0x08007a60
 8002700:	200002e4 	.word	0x200002e4
 8002704:	08007a64 	.word	0x08007a64
 8002708:	20000060 	.word	0x20000060

0800270c <HAL_GPIO_EXTI_Callback>:


// INTERRUPCION POR PATILLA EXTERNA (FLANCO CAIDA)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
	/**************************************************************************
	 * Interrupción por activación de una patilla externa.
	 * Es común para todas las entradas, por lo que hay que distinguir cuál
	 * es la que se ha pulsado.
	 **************************************************************************/
	HAL_Delay(5);	// Espera 5ms a que acaben rebotes mecánicos.
 8002716:	2005      	movs	r0, #5
 8002718:	f001 fd5e 	bl	80041d8 <HAL_Delay>
	if ((GPIO_Pin==GPIO_PIN_5)||(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==0))
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d006      	beq.n	8002730 <HAL_GPIO_EXTI_Callback+0x24>
 8002722:	2120      	movs	r1, #32
 8002724:	4892      	ldr	r0, [pc, #584]	; (8002970 <HAL_GPIO_EXTI_Callback+0x264>)
 8002726:	f002 fe2d 	bl	8005384 <HAL_GPIO_ReadPin>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d124      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x6e>
	// Interrupcion por flanco bajada PA5 (También entran aqui por PB5 y PC5)
	// Activación/desactivación del swing-up o control automático
	{
		if (Flag_control_motor==0 && Flag_swing_up==0) {	// Si está apagado
 8002730:	4b90      	ldr	r3, [pc, #576]	; (8002974 <HAL_GPIO_EXTI_Callback+0x268>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d120      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x6e>
 8002738:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <HAL_GPIO_EXTI_Callback+0x26c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11c      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x6e>
			if (SWING_PRIMERO) {
 8002740:	4b8e      	ldr	r3, [pc, #568]	; (800297c <HAL_GPIO_EXTI_Callback+0x270>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <HAL_GPIO_EXTI_Callback+0x56>
				Flag_swing_up=1;
 8002748:	4b8b      	ldr	r3, [pc, #556]	; (8002978 <HAL_GPIO_EXTI_Callback+0x26c>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
				referencia_local = 0;
 800274e:	4b8c      	ldr	r3, [pc, #560]	; (8002980 <HAL_GPIO_EXTI_Callback+0x274>)
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER (&htim4,10000);
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_GPIO_EXTI_Callback+0x278>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f242 7210 	movw	r2, #10000	; 0x2710
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
 8002760:	e00b      	b.n	800277a <HAL_GPIO_EXTI_Callback+0x6e>
			}
			else {
				Flag_control_motor=1;
 8002762:	4b84      	ldr	r3, [pc, #528]	; (8002974 <HAL_GPIO_EXTI_Callback+0x268>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
				referencia_local = 0;
 8002768:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_GPIO_EXTI_Callback+0x274>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim4, 10000);
 8002770:	4b84      	ldr	r3, [pc, #528]	; (8002984 <HAL_GPIO_EXTI_Callback+0x278>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f242 7210 	movw	r2, #10000	; 0x2710
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
				// Reinica a 10000 cuenta encoder
			}
		}
	}
	if ((GPIO_Pin==GPIO_PIN_7)||(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==0))
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d006      	beq.n	800278e <HAL_GPIO_EXTI_Callback+0x82>
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	487b      	ldr	r0, [pc, #492]	; (8002970 <HAL_GPIO_EXTI_Callback+0x264>)
 8002784:	f002 fdfe 	bl	8005384 <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_GPIO_EXTI_Callback+0x9e>
	// Interrupcion por flanco bajada PA7
	{
		if (Menu==10) {	// Cambia el menu de la pantalla
 800278e:	4b7e      	ldr	r3, [pc, #504]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d103      	bne.n	800279e <HAL_GPIO_EXTI_Callback+0x92>
			Menu=1;
 8002796:	4b7c      	ldr	r3, [pc, #496]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e005      	b.n	80027aa <HAL_GPIO_EXTI_Callback+0x9e>
		}
		else Menu++;
 800279e:	4b7a      	ldr	r3, [pc, #488]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b78      	ldr	r3, [pc, #480]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 80027a8:	701a      	strb	r2, [r3, #0]
	}
	if ((GPIO_Pin==GPIO_PIN_11)||(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0))
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b0:	d008      	beq.n	80027c4 <HAL_GPIO_EXTI_Callback+0xb8>
 80027b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b6:	486e      	ldr	r0, [pc, #440]	; (8002970 <HAL_GPIO_EXTI_Callback+0x264>)
 80027b8:	f002 fde4 	bl	8005384 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 8090 	bne.w	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
	// Interrupcion por flanco bajada PA1
	{
		if (Menu==1)		SWING_PRIMERO =!SWING_PRIMERO;
 80027c4:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10a      	bne.n	80027e2 <HAL_GPIO_EXTI_Callback+0xd6>
 80027cc:	4b6b      	ldr	r3, [pc, #428]	; (800297c <HAL_GPIO_EXTI_Callback+0x270>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	4b67      	ldr	r3, [pc, #412]	; (800297c <HAL_GPIO_EXTI_Callback+0x270>)
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e080      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==2)		K1-=Amplitude1;	// Reducir valores PID
 80027e2:	4b69      	ldr	r3, [pc, #420]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d110      	bne.n	800280c <HAL_GPIO_EXTI_Callback+0x100>
 80027ea:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_GPIO_EXTI_Callback+0x280>)
 80027ec:	681c      	ldr	r4, [r3, #0]
 80027ee:	4b68      	ldr	r3, [pc, #416]	; (8002990 <HAL_GPIO_EXTI_Callback+0x284>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fa0c 	bl	8000c10 <__aeabi_i2f>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4619      	mov	r1, r3
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7fe f951 	bl	8000aa4 <__aeabi_fsub>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_GPIO_EXTI_Callback+0x280>)
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e06b      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==3)	K2-=Amplitude2;
 800280c:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d110      	bne.n	8002836 <HAL_GPIO_EXTI_Callback+0x12a>
 8002814:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <HAL_GPIO_EXTI_Callback+0x288>)
 8002816:	681c      	ldr	r4, [r3, #0]
 8002818:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_GPIO_EXTI_Callback+0x28c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe f9f7 	bl	8000c10 <__aeabi_i2f>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f93c 	bl	8000aa4 <__aeabi_fsub>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b58      	ldr	r3, [pc, #352]	; (8002994 <HAL_GPIO_EXTI_Callback+0x288>)
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e056      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==4)	K3-=Amplitude3;
 8002836:	4b54      	ldr	r3, [pc, #336]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d110      	bne.n	8002860 <HAL_GPIO_EXTI_Callback+0x154>
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_GPIO_EXTI_Callback+0x290>)
 8002840:	681c      	ldr	r4, [r3, #0]
 8002842:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x294>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe f9e2 	bl	8000c10 <__aeabi_i2f>
 800284c:	4603      	mov	r3, r0
 800284e:	4619      	mov	r1, r3
 8002850:	4620      	mov	r0, r4
 8002852:	f7fe f927 	bl	8000aa4 <__aeabi_fsub>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_GPIO_EXTI_Callback+0x290>)
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e041      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==5)	K4-=Amplitude4;
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d110      	bne.n	800288a <HAL_GPIO_EXTI_Callback+0x17e>
 8002868:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x298>)
 800286a:	681c      	ldr	r4, [r3, #0]
 800286c:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x29c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe f9cd 	bl	8000c10 <__aeabi_i2f>
 8002876:	4603      	mov	r3, r0
 8002878:	4619      	mov	r1, r3
 800287a:	4620      	mov	r0, r4
 800287c:	f7fe f912 	bl	8000aa4 <__aeabi_fsub>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x298>)
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e02c      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==6)	Ki-=1;
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b06      	cmp	r3, #6
 8002890:	d10b      	bne.n	80028aa <HAL_GPIO_EXTI_Callback+0x19e>
 8002892:	4b46      	ldr	r3, [pc, #280]	; (80029ac <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f902 	bl	8000aa4 <__aeabi_fsub>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_GPIO_EXTI_Callback+0x2a0>)
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e01c      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==9)	Tipo_ref = !Tipo_ref;
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d10a      	bne.n	80028c8 <HAL_GPIO_EXTI_Callback+0x1bc>
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e00d      	b.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
		else if (Menu==10)	ORIGEN_REF = !ORIGEN_REF;
 80028c8:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	d109      	bne.n	80028e4 <HAL_GPIO_EXTI_Callback+0x1d8>
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80028e2:	701a      	strb	r2, [r3, #0]
	}
	if ((GPIO_Pin==GPIO_PIN_12)||(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==0))
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	d008      	beq.n	80028fe <HAL_GPIO_EXTI_Callback+0x1f2>
 80028ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f0:	481f      	ldr	r0, [pc, #124]	; (8002970 <HAL_GPIO_EXTI_Callback+0x264>)
 80028f2:	f002 fd47 	bl	8005384 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 80b4 	bne.w	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
	// Interrupcion por flanco bajada PA12
	{
		if (Menu==1)		SWING_PRIMERO =!SWING_PRIMERO;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10a      	bne.n	800291c <HAL_GPIO_EXTI_Callback+0x210>
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_GPIO_EXTI_Callback+0x270>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_GPIO_EXTI_Callback+0x270>)
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e0a4      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
		else if (Menu==2)	K1+=Amplitude1;	// Aumentar valores PID
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d110      	bne.n	8002946 <HAL_GPIO_EXTI_Callback+0x23a>
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_GPIO_EXTI_Callback+0x284>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f971 	bl	8000c10 <__aeabi_i2f>
 800292e:	4602      	mov	r2, r0
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_GPIO_EXTI_Callback+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f7fe f8b6 	bl	8000aa8 <__addsf3>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_GPIO_EXTI_Callback+0x280>)
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e08f      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
		else if (Menu==3)	K2+=Amplitude2;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d134      	bne.n	80029b8 <HAL_GPIO_EXTI_Callback+0x2ac>
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_GPIO_EXTI_Callback+0x28c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f95c 	bl	8000c10 <__aeabi_i2f>
 8002958:	4602      	mov	r2, r0
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_GPIO_EXTI_Callback+0x288>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7fe f8a1 	bl	8000aa8 <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_GPIO_EXTI_Callback+0x288>)
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e07a      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
 8002970:	40010800 	.word	0x40010800
 8002974:	20000116 	.word	0x20000116
 8002978:	20000118 	.word	0x20000118
 800297c:	2000006d 	.word	0x2000006d
 8002980:	20000064 	.word	0x20000064
 8002984:	200000c8 	.word	0x200000c8
 8002988:	20000028 	.word	0x20000028
 800298c:	20000014 	.word	0x20000014
 8002990:	20000029 	.word	0x20000029
 8002994:	2000001c 	.word	0x2000001c
 8002998:	2000002a 	.word	0x2000002a
 800299c:	20000018 	.word	0x20000018
 80029a0:	2000002b 	.word	0x2000002b
 80029a4:	20000020 	.word	0x20000020
 80029a8:	2000002c 	.word	0x2000002c
 80029ac:	20000010 	.word	0x20000010
 80029b0:	20000117 	.word	0x20000117
 80029b4:	20000032 	.word	0x20000032
		else if (Menu==4)	K3+=Amplitude3;
 80029b8:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d110      	bne.n	80029e2 <HAL_GPIO_EXTI_Callback+0x2d6>
 80029c0:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe f923 	bl	8000c10 <__aeabi_i2f>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f7fe f868 	bl	8000aa8 <__addsf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e041      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
		else if (Menu==5)	K4+=Amplitude4;
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d110      	bne.n	8002a0c <HAL_GPIO_EXTI_Callback+0x300>
 80029ea:	4b40      	ldr	r3, [pc, #256]	; (8002aec <HAL_GPIO_EXTI_Callback+0x3e0>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f90e 	bl	8000c10 <__aeabi_i2f>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f853 	bl	8000aa8 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e02c      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
		else if (Menu==6)	Ki+=1;
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	d10b      	bne.n	8002a2c <HAL_GPIO_EXTI_Callback+0x320>
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f843 	bl	8000aa8 <__addsf3>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e01c      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
		else if (Menu==9)	Tipo_ref = !Tipo_ref;
 8002a2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d10a      	bne.n	8002a4a <HAL_GPIO_EXTI_Callback+0x33e>
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e00d      	b.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
		else if (Menu==10)	ORIGEN_REF = !ORIGEN_REF;
 8002a4a:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d109      	bne.n	8002a66 <HAL_GPIO_EXTI_Callback+0x35a>
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_GPIO_EXTI_Callback+0x3f0>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_GPIO_EXTI_Callback+0x3f0>)
 8002a64:	701a      	strb	r2, [r3, #0]
	}
	if (K1<=0) KP_Bal=0;
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x3f4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe faca 	bl	8001008 <__aeabi_fcmple>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_EXTI_Callback+0x376>
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
	if (K2<=0) KD_Bal=0;
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fabc 	bl	8001008 <__aeabi_fcmple>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_EXTI_Callback+0x392>
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_GPIO_EXTI_Callback+0x400>)
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
	if (K3<=0) KP_Pos=0;
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe faae 	bl	8001008 <__aeabi_fcmple>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_EXTI_Callback+0x3ae>
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_GPIO_EXTI_Callback+0x404>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
	if (K4<=0) KD_Pos=0;
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe faa0 	bl	8001008 <__aeabi_fcmple>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d100      	bne.n	8002ad0 <HAL_GPIO_EXTI_Callback+0x3c4>
}
 8002ace:	e003      	b.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x3cc>
	if (K4<=0) KD_Pos=0;
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x408>)
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}
 8002ae0:	20000028 	.word	0x20000028
 8002ae4:	2000002b 	.word	0x2000002b
 8002ae8:	20000018 	.word	0x20000018
 8002aec:	2000002c 	.word	0x2000002c
 8002af0:	20000020 	.word	0x20000020
 8002af4:	20000010 	.word	0x20000010
 8002af8:	20000117 	.word	0x20000117
 8002afc:	20000032 	.word	0x20000032
 8002b00:	20000014 	.word	0x20000014
 8002b04:	20000008 	.word	0x20000008
 8002b08:	2000001c 	.word	0x2000001c
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <envia_datos_serie>:

void envia_datos_serie(float dato1, float dato2, float dato3, float dato4,
		float dato5, float dato6, float dato7) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
	 * para visualizarlos en el ordenador
	 **************************************************************************/
	// Envia datos al ordenador
	// Convierte los datos tipo float en 4 byes, que envía por
	// el puerto serie.
		  txBuffer [0] = '$';
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <envia_datos_serie+0xec>)
 8002b28:	2224      	movs	r2, #36	; 0x24
 8002b2a:	701a      	strb	r2, [r3, #0]
		  txBuffer [1] = *((uint8_t*)(&dato1));
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <envia_datos_serie+0xec>)
 8002b34:	705a      	strb	r2, [r3, #1]
		  txBuffer [2] = *((uint8_t*)(&dato1)+1);
 8002b36:	7b7a      	ldrb	r2, [r7, #13]
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <envia_datos_serie+0xec>)
 8002b3a:	709a      	strb	r2, [r3, #2]
		  txBuffer [3] = *((uint8_t*)(&dato1)+2);
 8002b3c:	7bba      	ldrb	r2, [r7, #14]
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <envia_datos_serie+0xec>)
 8002b40:	70da      	strb	r2, [r3, #3]
		  txBuffer [4] = *((uint8_t*)(&dato1)+3);
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <envia_datos_serie+0xec>)
 8002b46:	711a      	strb	r2, [r3, #4]
		  txBuffer [5] = *((uint8_t*)(&dato2));
 8002b48:	f107 0308 	add.w	r3, r7, #8
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <envia_datos_serie+0xec>)
 8002b50:	715a      	strb	r2, [r3, #5]
		  txBuffer [6] = *((uint8_t*)(&dato2)+1);
 8002b52:	7a7a      	ldrb	r2, [r7, #9]
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <envia_datos_serie+0xec>)
 8002b56:	719a      	strb	r2, [r3, #6]
		  txBuffer [7] = *((uint8_t*)(&dato2)+2);
 8002b58:	7aba      	ldrb	r2, [r7, #10]
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <envia_datos_serie+0xec>)
 8002b5c:	71da      	strb	r2, [r3, #7]
		  txBuffer [8] = *((uint8_t*)(&dato2)+3);
 8002b5e:	7afa      	ldrb	r2, [r7, #11]
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <envia_datos_serie+0xec>)
 8002b62:	721a      	strb	r2, [r3, #8]
		  txBuffer [9] =  *((uint8_t*)(&dato3));
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <envia_datos_serie+0xec>)
 8002b6a:	725a      	strb	r2, [r3, #9]
		  txBuffer [10] = *((uint8_t*)(&dato3)+1);
 8002b6c:	797a      	ldrb	r2, [r7, #5]
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <envia_datos_serie+0xec>)
 8002b70:	729a      	strb	r2, [r3, #10]
		  txBuffer [11] = *((uint8_t*)(&dato3)+2);
 8002b72:	79ba      	ldrb	r2, [r7, #6]
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <envia_datos_serie+0xec>)
 8002b76:	72da      	strb	r2, [r3, #11]
		  txBuffer [12] = *((uint8_t*)(&dato3)+3);
 8002b78:	79fa      	ldrb	r2, [r7, #7]
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <envia_datos_serie+0xec>)
 8002b7c:	731a      	strb	r2, [r3, #12]
		  txBuffer [13] = *((uint8_t*)(&dato4));
 8002b7e:	463b      	mov	r3, r7
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <envia_datos_serie+0xec>)
 8002b84:	735a      	strb	r2, [r3, #13]
		  txBuffer [14] = *((uint8_t*)(&dato4)+1);
 8002b86:	787a      	ldrb	r2, [r7, #1]
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <envia_datos_serie+0xec>)
 8002b8a:	739a      	strb	r2, [r3, #14]
		  txBuffer [15] = *((uint8_t*)(&dato4)+2);
 8002b8c:	78ba      	ldrb	r2, [r7, #2]
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <envia_datos_serie+0xec>)
 8002b90:	73da      	strb	r2, [r3, #15]
		  txBuffer [16] = *((uint8_t*)(&dato4)+3);
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <envia_datos_serie+0xec>)
 8002b96:	741a      	strb	r2, [r3, #16]
		  txBuffer [17] = *((uint8_t*)(&dato5));
 8002b98:	f107 0318 	add.w	r3, r7, #24
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <envia_datos_serie+0xec>)
 8002ba0:	745a      	strb	r2, [r3, #17]
		  txBuffer [18] = *((uint8_t*)(&dato5)+1);
 8002ba2:	7e7a      	ldrb	r2, [r7, #25]
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <envia_datos_serie+0xec>)
 8002ba6:	749a      	strb	r2, [r3, #18]
		  txBuffer [19] = *((uint8_t*)(&dato5)+2);
 8002ba8:	7eba      	ldrb	r2, [r7, #26]
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <envia_datos_serie+0xec>)
 8002bac:	74da      	strb	r2, [r3, #19]
		  txBuffer [20] = *((uint8_t*)(&dato5)+3);
 8002bae:	7efa      	ldrb	r2, [r7, #27]
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <envia_datos_serie+0xec>)
 8002bb2:	751a      	strb	r2, [r3, #20]
		  txBuffer [21] = *((uint8_t*)(&dato6));
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <envia_datos_serie+0xec>)
 8002bbc:	755a      	strb	r2, [r3, #21]
		  txBuffer [22] = *((uint8_t*)(&dato6)+1);
 8002bbe:	7f7a      	ldrb	r2, [r7, #29]
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <envia_datos_serie+0xec>)
 8002bc2:	759a      	strb	r2, [r3, #22]
		  txBuffer [23] = *((uint8_t*)(&dato6)+2);
 8002bc4:	7fba      	ldrb	r2, [r7, #30]
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <envia_datos_serie+0xec>)
 8002bc8:	75da      	strb	r2, [r3, #23]
		  txBuffer [24] = *((uint8_t*)(&dato6)+3);
 8002bca:	7ffa      	ldrb	r2, [r7, #31]
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <envia_datos_serie+0xec>)
 8002bce:	761a      	strb	r2, [r3, #24]
		  txBuffer [25] = *((uint8_t*)(&dato7));
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <envia_datos_serie+0xec>)
 8002bd8:	765a      	strb	r2, [r3, #25]
		  txBuffer [26] = *((uint8_t*)(&dato7)+1);
 8002bda:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <envia_datos_serie+0xec>)
 8002be0:	769a      	strb	r2, [r3, #26]
		  txBuffer [27] = *((uint8_t*)(&dato7)+2);
 8002be2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <envia_datos_serie+0xec>)
 8002be8:	76da      	strb	r2, [r3, #27]
		  txBuffer [28] = *((uint8_t*)(&dato7)+3);
 8002bea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <envia_datos_serie+0xec>)
 8002bf0:	771a      	strb	r2, [r3, #28]
	//HAL_UART_Transmit(&huart1, txBuffer, 29,1);	// Sin interrupciones
	HAL_UART_Transmit_DMA(&huart1, txBuffer, 29);	// Con interrupciones
 8002bf2:	221d      	movs	r2, #29
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <envia_datos_serie+0xec>)
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <envia_datos_serie+0xf0>)
 8002bf8:	f004 f9e8 	bl	8006fcc <HAL_UART_Transmit_DMA>
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000380 	.word	0x20000380
 8002c08:	20000220 	.word	0x20000220

08002c0c <swing_up>:


float swing_up(float posicion, float angulo) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
#define dist_1  -200
	static uint16_t etapa=0;
	static int PWM;


	switch (etapa) {
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <swing_up+0x178>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d04b      	beq.n	8002cb6 <swing_up+0xaa>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	f300 80a1 	bgt.w	8002d66 <swing_up+0x15a>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <swing_up+0x22>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d01b      	beq.n	8002c64 <swing_up+0x58>
 8002c2c:	e09b      	b.n	8002d66 <swing_up+0x15a>
	case 0: {
		PWM = 5300;	// DERECHA
 8002c2e:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <swing_up+0x17c>)
 8002c30:	f241 42b4 	movw	r2, #5300	; 0x14b4
 8002c34:	601a      	str	r2, [r3, #0]
		if (((10000 + dist_1 - 100) < posicion)
 8002c36:	4955      	ldr	r1, [pc, #340]	; (8002d8c <swing_up+0x180>)
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe f9f9 	bl	8001030 <__aeabi_fcmpgt>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <swing_up+0x3a>
				&& (posicion < (10000 + dist_1))) { 
			etapa=1;
			PWM = 0;
		}
		break;
 8002c44:	e08f      	b.n	8002d66 <swing_up+0x15a>
				&& (posicion < (10000 + dist_1))) { 
 8002c46:	4952      	ldr	r1, [pc, #328]	; (8002d90 <swing_up+0x184>)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe f9d3 	bl	8000ff4 <__aeabi_fcmplt>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d100      	bne.n	8002c56 <swing_up+0x4a>
		break;
 8002c54:	e087      	b.n	8002d66 <swing_up+0x15a>
			etapa=1;
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <swing_up+0x178>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	801a      	strh	r2, [r3, #0]
			PWM = 0;
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <swing_up+0x17c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
		break;
 8002c62:	e080      	b.n	8002d66 <swing_up+0x15a>
	}
	case 1:
	{
		PWM = -4800; // IZQUIERDA
 8002c64:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <swing_up+0x17c>)
 8002c66:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <swing_up+0x188>)
 8002c68:	601a      	str	r2, [r3, #0]
		if(((VERTICAL-1000)<angulo)&&(angulo<(VERTICAL))){
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <swing_up+0x18c>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd ffcc 	bl	8000c10 <__aeabi_i2f>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f7fe f9d7 	bl	8001030 <__aeabi_fcmpgt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <swing_up+0x7e>
		    PWM=3800; // DERECHA
		    etapa=2;
	    }
		break;
 8002c88:	e06d      	b.n	8002d66 <swing_up+0x15a>
		if(((VERTICAL-1000)<angulo)&&(angulo<(VERTICAL))){
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <swing_up+0x18c>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd ffbe 	bl	8000c10 <__aeabi_i2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4619      	mov	r1, r3
 8002c98:	6838      	ldr	r0, [r7, #0]
 8002c9a:	f7fe f9ab 	bl	8000ff4 <__aeabi_fcmplt>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d100      	bne.n	8002ca6 <swing_up+0x9a>
		break;
 8002ca4:	e05f      	b.n	8002d66 <swing_up+0x15a>
		    PWM=3800; // DERECHA
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <swing_up+0x17c>)
 8002ca8:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002cac:	601a      	str	r2, [r3, #0]
		    etapa=2;
 8002cae:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <swing_up+0x178>)
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	801a      	strh	r2, [r3, #0]
		break;
 8002cb4:	e057      	b.n	8002d66 <swing_up+0x15a>
	}
	case 2:
	{
		if (((VERTICAL-400)<angulo)&&(angulo<VERTICAL))
 8002cb6:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <swing_up+0x18c>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ffa6 	bl	8000c10 <__aeabi_i2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6838      	ldr	r0, [r7, #0]
 8002cca:	f7fe f9b1 	bl	8001030 <__aeabi_fcmpgt>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <swing_up+0xea>
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <swing_up+0x18c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd ff99 	bl	8000c10 <__aeabi_i2f>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f7fe f986 	bl	8000ff4 <__aeabi_fcmplt>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <swing_up+0xea>
			PWM=3000;
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <swing_up+0x17c>)
 8002cf0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002cf4:	601a      	str	r2, [r3, #0]
		if (((VERTICAL-100)<angulo)&&(angulo<(VERTICAL+100))){
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <swing_up+0x18c>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	3b64      	subs	r3, #100	; 0x64
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd ff87 	bl	8000c10 <__aeabi_i2f>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4619      	mov	r1, r3
 8002d06:	6838      	ldr	r0, [r7, #0]
 8002d08:	f7fe f992 	bl	8001030 <__aeabi_fcmpgt>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d100      	bne.n	8002d14 <swing_up+0x108>
			// Reinicia  10000 cuenta encoder
			__HAL_TIM_SET_COUNTER(&htim4, 10000); 
			
			etapa =0;
		}
		break;
 8002d12:	e027      	b.n	8002d64 <swing_up+0x158>
		if (((VERTICAL-100)<angulo)&&(angulo<(VERTICAL+100))){
 8002d14:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <swing_up+0x18c>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	3364      	adds	r3, #100	; 0x64
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd ff78 	bl	8000c10 <__aeabi_i2f>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4619      	mov	r1, r3
 8002d24:	6838      	ldr	r0, [r7, #0]
 8002d26:	f7fe f965 	bl	8000ff4 <__aeabi_fcmplt>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d100      	bne.n	8002d32 <swing_up+0x126>
		break;
 8002d30:	e018      	b.n	8002d64 <swing_up+0x158>
			Flag_control_motor=1;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <swing_up+0x190>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
			Flag_swing_up=0;
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <swing_up+0x194>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
			PWM=0;
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <swing_up+0x17c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
			referencia_local=(10000-10000)*360/1040;
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <swing_up+0x198>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
			referencia_externa=(10000-10000)*360/1040;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <swing_up+0x19c>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 10000); 
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <swing_up+0x1a0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
			etapa =0;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <swing_up+0x178>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
		break;
 8002d64:	bf00      	nop
	}
	}

	return (filtro_roc(PWM,120000));
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <swing_up+0x17c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd ff50 	bl	8000c10 <__aeabi_i2f>
 8002d70:	4603      	mov	r3, r0
 8002d72:	490f      	ldr	r1, [pc, #60]	; (8002db0 <swing_up+0x1a4>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fd2b 	bl	80017d0 <filtro_roc>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200000b8 	.word	0x200000b8
 8002d88:	200000bc 	.word	0x200000bc
 8002d8c:	46179000 	.word	0x46179000
 8002d90:	46192000 	.word	0x46192000
 8002d94:	ffffed40 	.word	0xffffed40
 8002d98:	20000030 	.word	0x20000030
 8002d9c:	20000116 	.word	0x20000116
 8002da0:	20000118 	.word	0x20000118
 8002da4:	20000064 	.word	0x20000064
 8002da8:	20000068 	.word	0x20000068
 8002dac:	200000c8 	.word	0x200000c8
 8002db0:	47ea6000 	.word	0x47ea6000

08002db4 <HAL_UART_RxCpltCallback>:

// INTERRUPCIONES POR RECEPCIÓN O TRANSMISIÓN POR EL PUERTO SERIE
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	/**************************************************************************
	 * Función asociada a una recepción de una trama de datos completa
	 **************************************************************************/
	uint8_t inicio=4;
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0; i<4; i++) {
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73bb      	strb	r3, [r7, #14]
 8002dc4:	e009      	b.n	8002dda <HAL_UART_RxCpltCallback+0x26>
		if(rxBuffer[i]=='A')
 8002dc6:	7bbb      	ldrb	r3, [r7, #14]
 8002dc8:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_UART_RxCpltCallback+0x78>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	2b41      	cmp	r3, #65	; 0x41
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_RxCpltCallback+0x20>
			inicio = i;
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0; i<4; i++) {
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	73bb      	strb	r3, [r7, #14]
 8002dda:	7bbb      	ldrb	r3, [r7, #14]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d9f2      	bls.n	8002dc6 <HAL_UART_RxCpltCallback+0x12>
	}
	if(inicio<3)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d80c      	bhi.n	8002e00 <HAL_UART_RxCpltCallback+0x4c>
		referencia_externa =  *((int16_t*)(rxBuffer+inicio+1));
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_UART_RxCpltCallback+0x78>)
 8002dec:	4413      	add	r3, r2
 8002dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ff0c 	bl	8000c10 <__aeabi_i2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <HAL_UART_RxCpltCallback+0x7c>)
 8002dfc:	6013      	str	r3, [r2, #0]
	else if (inicio==3)
		referencia_externa =  *((int16_t*)(rxBuffer));
	else
		referencia_externa = referencia; // No altera valor
}
 8002dfe:	e010      	b.n	8002e22 <HAL_UART_RxCpltCallback+0x6e>
	else if (inicio==3)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d109      	bne.n	8002e1a <HAL_UART_RxCpltCallback+0x66>
		referencia_externa =  *((int16_t*)(rxBuffer));
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_UART_RxCpltCallback+0x78>)
 8002e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd feff 	bl	8000c10 <__aeabi_i2f>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_UART_RxCpltCallback+0x7c>)
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	e003      	b.n	8002e22 <HAL_UART_RxCpltCallback+0x6e>
		referencia_externa = referencia; // No altera valor
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_UART_RxCpltCallback+0x80>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_UART_RxCpltCallback+0x7c>)
 8002e20:	6013      	str	r3, [r2, #0]
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000330 	.word	0x20000330
 8002e30:	20000068 	.word	0x20000068
 8002e34:	20000060 	.word	0x20000060

08002e38 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	/**************************************************************************
	 * Función asociada al envío de una trama de datos completa
	 **************************************************************************/
	
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
	...

08002e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e50:	f001 f960 	bl	8004114 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e54:	f000 f880 	bl	8002f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e58:	f000 fb28 	bl	80034ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002e5c:	f000 faf8 	bl	8003450 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002e60:	f000 facc 	bl	80033fc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002e64:	f000 fa1c 	bl	80032a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e68:	f000 fa74 	bl	8003354 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002e6c:	f000 f9c8 	bl	8003200 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002e70:	f000 f8ce 	bl	8003010 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Primero lee el valor del ángulo en la posición inferior.
  // A partir de este, determina el ángulo de la vertical.
  // Hay que activar el ADC:
  HAL_ADC_Start_DMA (&hadc1,valores_ADC,32);
 8002e74:	2220      	movs	r2, #32
 8002e76:	492c      	ldr	r1, [pc, #176]	; (8002f28 <main+0xdc>)
 8002e78:	482c      	ldr	r0, [pc, #176]	; (8002f2c <main+0xe0>)
 8002e7a:	f001 faa9 	bl	80043d0 <HAL_ADC_Start_DMA>
  HAL_Delay(10);
 8002e7e:	200a      	movs	r0, #10
 8002e80:	f001 f9aa 	bl	80041d8 <HAL_Delay>
  INFERIOR = valores_ADC[0];
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <main+0xdc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <main+0xe4>)
 8002e8c:	801a      	strh	r2, [r3, #0]
  VERTICAL =INFERIOR+2134;
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <main+0xe4>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	f603 0356 	addw	r3, r3, #2134	; 0x856
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <main+0xe8>)
 8002e9a:	801a      	strh	r2, [r3, #0]

  // Configura el temporizador que lee el valor del encoder
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002e9c:	213c      	movs	r1, #60	; 0x3c
 8002e9e:	4826      	ldr	r0, [pc, #152]	; (8002f38 <main+0xec>)
 8002ea0:	f003 f9d6 	bl	8006250 <HAL_TIM_Encoder_Start_IT>
	// Comienza contaje encoder por  TEMP4
	__HAL_TIM_SET_COUNTER(&htim4, 10000);
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <main+0xec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
	// Empieza en 10000 cuenta encoder
  __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_ALL,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <main+0xec>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <main+0xec>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebc:	621a      	str	r2, [r3, #32]
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <main+0xec>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <main+0xec>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ecc:	621a      	str	r2, [r3, #32]
  HAL_TIM_Base_Start_IT(&htim1);
 8002ece:	481b      	ldr	r0, [pc, #108]	; (8002f3c <main+0xf0>)
 8002ed0:	f002 ffd8 	bl	8005e84 <HAL_TIM_Base_Start_IT>

  // Comienza generación señal PWM por TEMP3
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002ed4:	210c      	movs	r1, #12
 8002ed6:	481a      	ldr	r0, [pc, #104]	; (8002f40 <main+0xf4>)
 8002ed8:	f003 f876 	bl	8005fc8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <main+0xf4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <main+0xf4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28


  // Inicializacion pantalla OLED
  OLED_Init();
 8002eec:	f000 fdb0 	bl	8003a50 <OLED_Init>

  HAL_UART_Receive_DMA(&huart1, rxBuffer, 4);
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	4914      	ldr	r1, [pc, #80]	; (8002f44 <main+0xf8>)
 8002ef4:	4814      	ldr	r0, [pc, #80]	; (8002f48 <main+0xfc>)
 8002ef6:	f004 f8d5 	bl	80070a4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Comprueba si ha cambiado el menu
	  if (Menu!=Menu_ant) {
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <main+0x100>)
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <main+0x104>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d005      	beq.n	8002f12 <main+0xc6>
		  // Limpia la pantalla para el siguiente menu
		  OLED_Clear();
 8002f06:	f000 fbf7 	bl	80036f8 <OLED_Clear>
		  Menu_ant = Menu;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <main+0x100>)
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <main+0x104>)
 8002f10:	701a      	strb	r2, [r3, #0]
	  }
	  // Actualiza pantalla
	  oled_show();
 8002f12:	f7fe ffe7 	bl	8001ee4 <oled_show>

      // Cuenta el numero de veces que se repite TIM1 hasta llegar a 10 (50ms)
      while (Cuenta_diez_periodos < 10);
 8002f16:	bf00      	nop
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <main+0x108>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d9fb      	bls.n	8002f18 <main+0xcc>
      Cuenta_diez_periodos = 0;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <main+0x108>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
	  if (Menu!=Menu_ant) {
 8002f26:	e7e8      	b.n	8002efa <main+0xae>
 8002f28:	20000260 	.word	0x20000260
 8002f2c:	200001ac 	.word	0x200001ac
 8002f30:	20000114 	.word	0x20000114
 8002f34:	20000030 	.word	0x20000030
 8002f38:	200000c8 	.word	0x200000c8
 8002f3c:	20000338 	.word	0x20000338
 8002f40:	2000011c 	.word	0x2000011c
 8002f44:	20000330 	.word	0x20000330
 8002f48:	20000220 	.word	0x20000220
 8002f4c:	20000028 	.word	0x20000028
 8002f50:	200000c0 	.word	0x200000c0
 8002f54:	2000006c 	.word	0x2000006c

08002f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b094      	sub	sp, #80	; 0x50
 8002f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f62:	2228      	movs	r2, #40	; 0x28
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 fcda 	bl	8007920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f96:	2301      	movs	r3, #1
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fa4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fa48 	bl	8005444 <HAL_RCC_OscConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002fba:	f000 fb13 	bl	80035e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2102      	movs	r1, #2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fcb2 	bl	8005944 <HAL_RCC_ClockConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002fe6:	f000 fafd 	bl	80035e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fea:	2302      	movs	r3, #2
 8002fec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 fe3e 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003002:	f000 faef 	bl	80035e4 <Error_Handler>
  }
}
 8003006:	bf00      	nop
 8003008:	3750      	adds	r7, #80	; 0x50
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003020:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003022:	4a76      	ldr	r2, [pc, #472]	; (80031fc <MX_ADC1_Init+0x1ec>)
 8003024:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003026:	4b74      	ldr	r3, [pc, #464]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800302e:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003030:	2201      	movs	r2, #1
 8003032:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003034:	4b70      	ldr	r3, [pc, #448]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003036:	2200      	movs	r2, #0
 8003038:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800303a:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 800303c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003042:	4b6d      	ldr	r3, [pc, #436]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8003048:	4b6b      	ldr	r3, [pc, #428]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 800304a:	2210      	movs	r2, #16
 800304c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800304e:	486a      	ldr	r0, [pc, #424]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003050:	f001 f8e6 	bl	8004220 <HAL_ADC_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800305a:	f000 fac3 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800305e:	2303      	movs	r3, #3
 8003060:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003062:	2301      	movs	r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003066:	2307      	movs	r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4862      	ldr	r0, [pc, #392]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003070:	f001 faa8 	bl	80045c4 <HAL_ADC_ConfigChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800307a:	f000 fab3 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800307e:	2306      	movs	r3, #6
 8003080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003082:	2302      	movs	r3, #2
 8003084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	4619      	mov	r1, r3
 800308a:	485b      	ldr	r0, [pc, #364]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 800308c:	f001 fa9a 	bl	80045c4 <HAL_ADC_ConfigChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003096:	f000 faa5 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800309a:	2303      	movs	r3, #3
 800309c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800309e:	2303      	movs	r3, #3
 80030a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4854      	ldr	r0, [pc, #336]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80030a8:	f001 fa8c 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80030b2:	f000 fa97 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80030b6:	2304      	movs	r3, #4
 80030b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	484e      	ldr	r0, [pc, #312]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80030c0:	f001 fa80 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80030ca:	f000 fa8b 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80030ce:	2305      	movs	r3, #5
 80030d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4848      	ldr	r0, [pc, #288]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80030d8:	f001 fa74 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80030e2:	f000 fa7f 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80030e6:	2306      	movs	r3, #6
 80030e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4842      	ldr	r0, [pc, #264]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80030f0:	f001 fa68 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80030fa:	f000 fa73 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80030fe:	2307      	movs	r3, #7
 8003100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	4619      	mov	r1, r3
 8003106:	483c      	ldr	r0, [pc, #240]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003108:	f001 fa5c 	bl	80045c4 <HAL_ADC_ConfigChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003112:	f000 fa67 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003116:	2308      	movs	r3, #8
 8003118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4836      	ldr	r0, [pc, #216]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003120:	f001 fa50 	bl	80045c4 <HAL_ADC_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800312a:	f000 fa5b 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800312e:	2309      	movs	r3, #9
 8003130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4830      	ldr	r0, [pc, #192]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003138:	f001 fa44 	bl	80045c4 <HAL_ADC_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8003142:	f000 fa4f 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8003146:	230a      	movs	r3, #10
 8003148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	4619      	mov	r1, r3
 800314e:	482a      	ldr	r0, [pc, #168]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003150:	f001 fa38 	bl	80045c4 <HAL_ADC_ConfigChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800315a:	f000 fa43 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800315e:	230b      	movs	r3, #11
 8003160:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4824      	ldr	r0, [pc, #144]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003168:	f001 fa2c 	bl	80045c4 <HAL_ADC_ConfigChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8003172:	f000 fa37 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8003176:	230c      	movs	r3, #12
 8003178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	4619      	mov	r1, r3
 800317e:	481e      	ldr	r0, [pc, #120]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003180:	f001 fa20 	bl	80045c4 <HAL_ADC_ConfigChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 800318a:	f000 fa2b 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800318e:	230d      	movs	r3, #13
 8003190:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4818      	ldr	r0, [pc, #96]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 8003198:	f001 fa14 	bl	80045c4 <HAL_ADC_ConfigChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 80031a2:	f000 fa1f 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80031a6:	230e      	movs	r3, #14
 80031a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4812      	ldr	r0, [pc, #72]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80031b0:	f001 fa08 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 80031ba:	f000 fa13 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80031be:	230f      	movs	r3, #15
 80031c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	480c      	ldr	r0, [pc, #48]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80031c8:	f001 f9fc 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80031d2:	f000 fa07 	bl	80035e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80031d6:	2310      	movs	r3, #16
 80031d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4806      	ldr	r0, [pc, #24]	; (80031f8 <MX_ADC1_Init+0x1e8>)
 80031e0:	f001 f9f0 	bl	80045c4 <HAL_ADC_ConfigChannel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 80031ea:	f000 f9fb 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200001ac 	.word	0x200001ac
 80031fc:	40012400 	.word	0x40012400

08003200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003214:	463b      	mov	r3, r7
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <MX_TIM1_Init+0x98>)
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <MX_TIM1_Init+0x9c>)
 8003220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <MX_TIM1_Init+0x98>)
 8003224:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003228:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <MX_TIM1_Init+0x98>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <MX_TIM1_Init+0x98>)
 8003232:	2231      	movs	r2, #49	; 0x31
 8003234:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <MX_TIM1_Init+0x98>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <MX_TIM1_Init+0x98>)
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <MX_TIM1_Init+0x98>)
 8003244:	2280      	movs	r2, #128	; 0x80
 8003246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003248:	4813      	ldr	r0, [pc, #76]	; (8003298 <MX_TIM1_Init+0x98>)
 800324a:	f002 fdcb 	bl	8005de4 <HAL_TIM_Base_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003254:	f000 f9c6 	bl	80035e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800325c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	4619      	mov	r1, r3
 8003264:	480c      	ldr	r0, [pc, #48]	; (8003298 <MX_TIM1_Init+0x98>)
 8003266:	f003 fa67 	bl	8006738 <HAL_TIM_ConfigClockSource>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003270:	f000 f9b8 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800327c:	463b      	mov	r3, r7
 800327e:	4619      	mov	r1, r3
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <MX_TIM1_Init+0x98>)
 8003282:	f003 fde5 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800328c:	f000 f9aa 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000338 	.word	0x20000338
 800329c:	40012c00 	.word	0x40012c00

080032a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a6:	f107 0320 	add.w	r3, r7, #32
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	611a      	str	r2, [r3, #16]
 80032be:	615a      	str	r2, [r3, #20]
 80032c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <MX_TIM3_Init+0xac>)
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <MX_TIM3_Init+0xb0>)
 80032c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032c8:	4b20      	ldr	r3, [pc, #128]	; (800334c <MX_TIM3_Init+0xac>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ce:	4b1f      	ldr	r3, [pc, #124]	; (800334c <MX_TIM3_Init+0xac>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <MX_TIM3_Init+0xac>)
 80032d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80032da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <MX_TIM3_Init+0xac>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <MX_TIM3_Init+0xac>)
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032e8:	4818      	ldr	r0, [pc, #96]	; (800334c <MX_TIM3_Init+0xac>)
 80032ea:	f002 fe1d 	bl	8005f28 <HAL_TIM_PWM_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80032f4:	f000 f976 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003300:	f107 0320 	add.w	r3, r7, #32
 8003304:	4619      	mov	r1, r3
 8003306:	4811      	ldr	r0, [pc, #68]	; (800334c <MX_TIM3_Init+0xac>)
 8003308:	f003 fda2 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003312:	f000 f967 	bl	80035e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003316:	2360      	movs	r3, #96	; 0x60
 8003318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	220c      	movs	r2, #12
 800332a:	4619      	mov	r1, r3
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <MX_TIM3_Init+0xac>)
 800332e:	f003 f945 	bl	80065bc <HAL_TIM_PWM_ConfigChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003338:	f000 f954 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800333c:	4803      	ldr	r0, [pc, #12]	; (800334c <MX_TIM3_Init+0xac>)
 800333e:	f000 fd2d 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 8003342:	bf00      	nop
 8003344:	3728      	adds	r7, #40	; 0x28
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	2000011c 	.word	0x2000011c
 8003350:	40000400 	.word	0x40000400

08003354 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800335a:	f107 030c 	add.w	r3, r7, #12
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fadc 	bl	8007920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <MX_TIM4_Init+0xa0>)
 8003372:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <MX_TIM4_Init+0xa4>)
 8003374:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <MX_TIM4_Init+0xa0>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <MX_TIM4_Init+0xa0>)
 800337e:	2210      	movs	r2, #16
 8003380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8003382:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <MX_TIM4_Init+0xa0>)
 8003384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <MX_TIM4_Init+0xa0>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <MX_TIM4_Init+0xa0>)
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003396:	2303      	movs	r3, #3
 8003398:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800339e:	2301      	movs	r3, #1
 80033a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80033a6:	2308      	movs	r3, #8
 80033a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033ae:	2301      	movs	r3, #1
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80033b6:	2308      	movs	r3, #8
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	4619      	mov	r1, r3
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <MX_TIM4_Init+0xa0>)
 80033c2:	f002 fea3 	bl	800610c <HAL_TIM_Encoder_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80033cc:	f000 f90a 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033d0:	2320      	movs	r3, #32
 80033d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_TIM4_Init+0xa0>)
 80033de:	f003 fd37 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80033e8:	f000 f8fc 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033ec:	bf00      	nop
 80033ee:	3730      	adds	r7, #48	; 0x30
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200000c8 	.word	0x200000c8
 80033f8:	40000800 	.word	0x40000800

080033fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_USART1_UART_Init+0x50>)
 8003404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003408:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800340c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003434:	f003 fd7c 	bl	8006f30 <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800343e:	f000 f8d1 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000220 	.word	0x20000220
 800344c:	40013800 	.word	0x40013800

08003450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <MX_DMA_Init+0x58>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <MX_DMA_Init+0x58>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6153      	str	r3, [r2, #20]
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_DMA_Init+0x58>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	200b      	movs	r0, #11
 8003474:	f001 fb67 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003478:	200b      	movs	r0, #11
 800347a:	f001 fb80 	bl	8004b7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	200e      	movs	r0, #14
 8003484:	f001 fb5f 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003488:	200e      	movs	r0, #14
 800348a:	f001 fb78 	bl	8004b7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	2100      	movs	r1, #0
 8003492:	200f      	movs	r0, #15
 8003494:	f001 fb57 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003498:	200f      	movs	r0, #15
 800349a:	f001 fb70 	bl	8004b7e <HAL_NVIC_EnableIRQ>

}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b2:	f107 0310 	add.w	r3, r7, #16
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	4a42      	ldr	r2, [pc, #264]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034c6:	f043 0310 	orr.w	r3, r3, #16
 80034ca:	6193      	str	r3, [r2, #24]
 80034cc:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d8:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034de:	f043 0320 	orr.w	r3, r3, #32
 80034e2:	6193      	str	r3, [r2, #24]
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6193      	str	r3, [r2, #24]
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <MX_GPIO_Init+0x124>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003508:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <MX_GPIO_Init+0x124>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <MX_GPIO_Init+0x124>)
 800350e:	f043 0308 	orr.w	r3, r3, #8
 8003512:	6193      	str	r3, [r2, #24]
 8003514:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <MX_GPIO_Init+0x124>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8003520:	2200      	movs	r2, #0
 8003522:	f248 0112 	movw	r1, #32786	; 0x8012
 8003526:	482b      	ldr	r0, [pc, #172]	; (80035d4 <MX_GPIO_Init+0x128>)
 8003528:	f001 ff43 	bl	80053b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN2_Pin|BIN1_Pin|GPIO_PIN_3|GPIO_PIN_4
 800352c:	2200      	movs	r2, #0
 800352e:	f243 0138 	movw	r1, #12344	; 0x3038
 8003532:	4829      	ldr	r0, [pc, #164]	; (80035d8 <MX_GPIO_Init+0x12c>)
 8003534:	f001 ff3d 	bl	80053b2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8003538:	f248 0312 	movw	r3, #32786	; 0x8012
 800353c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353e:	2301      	movs	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2302      	movs	r3, #2
 8003548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	4619      	mov	r1, r3
 8003550:	4820      	ldr	r0, [pc, #128]	; (80035d4 <MX_GPIO_Init+0x128>)
 8003552:	f001 fd93 	bl	800507c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA5 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_12;
 8003556:	f241 03a4 	movw	r3, #4260	; 0x10a4
 800355a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <MX_GPIO_Init+0x130>)
 800355e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003560:	2301      	movs	r3, #1
 8003562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f107 0310 	add.w	r3, r7, #16
 8003568:	4619      	mov	r1, r3
 800356a:	481a      	ldr	r0, [pc, #104]	; (80035d4 <MX_GPIO_Init+0x128>)
 800356c:	f001 fd86 	bl	800507c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|GPIO_PIN_3|GPIO_PIN_4
 8003570:	f243 0338 	movw	r3, #12344	; 0x3038
 8003574:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003576:	2301      	movs	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2302      	movs	r3, #2
 8003580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003582:	f107 0310 	add.w	r3, r7, #16
 8003586:	4619      	mov	r1, r3
 8003588:	4813      	ldr	r0, [pc, #76]	; (80035d8 <MX_GPIO_Init+0x12c>)
 800358a:	f001 fd77 	bl	800507c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800358e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <MX_GPIO_Init+0x134>)
 8003596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	4619      	mov	r1, r3
 80035a2:	480c      	ldr	r0, [pc, #48]	; (80035d4 <MX_GPIO_Init+0x128>)
 80035a4:	f001 fd6a 	bl	800507c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2102      	movs	r1, #2
 80035ac:	2017      	movs	r0, #23
 80035ae:	f001 faca 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80035b2:	2017      	movs	r0, #23
 80035b4:	f001 fae3 	bl	8004b7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2102      	movs	r1, #2
 80035bc:	2028      	movs	r0, #40	; 0x28
 80035be:	f001 fac2 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035c2:	2028      	movs	r0, #40	; 0x28
 80035c4:	f001 fadb 	bl	8004b7e <HAL_NVIC_EnableIRQ>

}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010800 	.word	0x40010800
 80035d8:	40010c00 	.word	0x40010c00
 80035dc:	10210000 	.word	0x10210000
 80035e0:	10110000 	.word	0x10110000

080035e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <OLED_Refresh_Gram>:
**************************************************************************/
uint8_t OLED_GRAM[128][8];


void OLED_Refresh_Gram(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	71fb      	strb	r3, [r7, #7]
 80035fa:	e026      	b.n	800364a <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //Setting page address (0~7)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	3b50      	subs	r3, #80	; 0x50
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f82b 	bl	8003660 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //Set display location - low address
 800360a:	2100      	movs	r1, #0
 800360c:	2000      	movs	r0, #0
 800360e:	f000 f827 	bl	8003660 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //Set display location - column high address
 8003612:	2100      	movs	r1, #0
 8003614:	2010      	movs	r0, #16
 8003616:	f000 f823 	bl	8003660 <OLED_WR_Byte>
		for(n=0;n<128;n++)
 800361a:	2300      	movs	r3, #0
 800361c:	71bb      	strb	r3, [r7, #6]
 800361e:	e00d      	b.n	800363c <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8003620:	79ba      	ldrb	r2, [r7, #6]
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	490d      	ldr	r1, [pc, #52]	; (800365c <OLED_Refresh_Gram+0x6c>)
 8003626:	00d2      	lsls	r2, r2, #3
 8003628:	440a      	add	r2, r1
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f815 	bl	8003660 <OLED_WR_Byte>
		for(n=0;n<128;n++)
 8003636:	79bb      	ldrb	r3, [r7, #6]
 8003638:	3301      	adds	r3, #1
 800363a:	71bb      	strb	r3, [r7, #6]
 800363c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003640:	2b00      	cmp	r3, #0
 8003642:	daed      	bge.n	8003620 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	3301      	adds	r3, #1
 8003648:	71fb      	strb	r3, [r7, #7]
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	2b07      	cmp	r3, #7
 800364e:	d9d5      	bls.n	80035fc <OLED_Refresh_Gram+0xc>
	}
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200003a8 	.word	0x200003a8

08003660 <OLED_WR_Byte>:

// write a byte to OLED.
//dat: to write data / commands
//cmd: data / command flag 0, indicating command; 1, representing data;
void OLED_WR_Byte(uint8_t byte,uint8_t cmd)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	460a      	mov	r2, r1
 800366a:	71fb      	strb	r3, [r7, #7]
 800366c:	4613      	mov	r3, r2
 800366e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 8003670:	79bb      	ldrb	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <OLED_WR_Byte+0x24>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // command PA13=1
 8003676:	2201      	movs	r2, #1
 8003678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800367c:	481c      	ldr	r0, [pc, #112]	; (80036f0 <OLED_WR_Byte+0x90>)
 800367e:	f001 fe98 	bl	80053b2 <HAL_GPIO_WritePin>
 8003682:	e005      	b.n	8003690 <OLED_WR_Byte+0x30>
	else
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // data PA13=0
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800368a:	4819      	ldr	r0, [pc, #100]	; (80036f0 <OLED_WR_Byte+0x90>)
 800368c:	f001 fe91 	bl	80053b2 <HAL_GPIO_WritePin>
	for (i=0; i<8; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e01e      	b.n	80036d4 <OLED_WR_Byte+0x74>
	{
	    HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // SCLK PB5=0
 8003696:	2200      	movs	r2, #0
 8003698:	2120      	movs	r1, #32
 800369a:	4816      	ldr	r0, [pc, #88]	; (80036f4 <OLED_WR_Byte+0x94>)
 800369c:	f001 fe89 	bl	80053b2 <HAL_GPIO_WritePin>
	    if (byte & 0x80)	// Serializar byte
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da05      	bge.n	80036b4 <OLED_WR_Byte+0x54>
	    	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // SDA PB4=1
 80036a8:	2201      	movs	r2, #1
 80036aa:	2110      	movs	r1, #16
 80036ac:	4811      	ldr	r0, [pc, #68]	; (80036f4 <OLED_WR_Byte+0x94>)
 80036ae:	f001 fe80 	bl	80053b2 <HAL_GPIO_WritePin>
 80036b2:	e004      	b.n	80036be <OLED_WR_Byte+0x5e>
	    else
	    	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // SDA PB4=0
 80036b4:	2200      	movs	r2, #0
 80036b6:	2110      	movs	r1, #16
 80036b8:	480e      	ldr	r0, [pc, #56]	; (80036f4 <OLED_WR_Byte+0x94>)
 80036ba:	f001 fe7a 	bl	80053b2 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // SCLK PB5=1
 80036be:	2201      	movs	r2, #1
 80036c0:	2120      	movs	r1, #32
 80036c2:	480c      	ldr	r0, [pc, #48]	; (80036f4 <OLED_WR_Byte+0x94>)
 80036c4:	f001 fe75 	bl	80053b2 <HAL_GPIO_WritePin>
	    byte<<=1;
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	71fb      	strb	r3, [r7, #7]
	for (i=0; i<8; i++)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b07      	cmp	r3, #7
 80036d8:	d9dd      	bls.n	8003696 <OLED_WR_Byte+0x36>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);  // command PA13=1
 80036da:	2201      	movs	r2, #1
 80036dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036e0:	4803      	ldr	r0, [pc, #12]	; (80036f0 <OLED_WR_Byte+0x90>)
 80036e2:	f001 fe66 	bl	80053b2 <HAL_GPIO_WritePin>
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40010800 	.word	0x40010800
 80036f4:	40010c00 	.word	0x40010c00

080036f8 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}
// clear screen function, clear the screen, the whole screen is black! And not lit!!!
void OLED_Clear(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80036fe:	2300      	movs	r3, #0
 8003700:	71fb      	strb	r3, [r7, #7]
 8003702:	e014      	b.n	800372e <OLED_Clear+0x36>
		for(n=0;n<128;n++)
 8003704:	2300      	movs	r3, #0
 8003706:	71bb      	strb	r3, [r7, #6]
 8003708:	e00a      	b.n	8003720 <OLED_Clear+0x28>
			OLED_GRAM[n][i]=0X00;
 800370a:	79ba      	ldrb	r2, [r7, #6]
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	490c      	ldr	r1, [pc, #48]	; (8003740 <OLED_Clear+0x48>)
 8003710:	00d2      	lsls	r2, r2, #3
 8003712:	440a      	add	r2, r1
 8003714:	4413      	add	r3, r2
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
		for(n=0;n<128;n++)
 800371a:	79bb      	ldrb	r3, [r7, #6]
 800371c:	3301      	adds	r3, #1
 800371e:	71bb      	strb	r3, [r7, #6]
 8003720:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003724:	2b00      	cmp	r3, #0
 8003726:	daf0      	bge.n	800370a <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	3301      	adds	r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b07      	cmp	r3, #7
 8003732:	d9e7      	bls.n	8003704 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//update display
 8003734:	f7ff ff5c 	bl	80035f0 <OLED_Refresh_Gram>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200003a8 	.word	0x200003a8

08003744 <OLED_DrawPoint>:
// draw a point
//x:0~127
//y:0~63
//t:1 fill 0, empty.
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
 800374e:	460b      	mov	r3, r1
 8003750:	71bb      	strb	r3, [r7, #6]
 8003752:	4613      	mov	r3, r2
 8003754:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//It's out of range.
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db41      	blt.n	80037e6 <OLED_DrawPoint+0xa2>
 8003762:	79bb      	ldrb	r3, [r7, #6]
 8003764:	2b3f      	cmp	r3, #63	; 0x3f
 8003766:	d83e      	bhi.n	80037e6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003768:	79bb      	ldrb	r3, [r7, #6]
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003774:	79bb      	ldrb	r3, [r7, #6]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800377c:	7b7b      	ldrb	r3, [r7, #13]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2201      	movs	r2, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800378a:	797b      	ldrb	r3, [r7, #5]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <OLED_DrawPoint+0x72>
 8003790:	79fa      	ldrb	r2, [r7, #7]
 8003792:	7bbb      	ldrb	r3, [r7, #14]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <OLED_DrawPoint+0xac>)
 8003796:	00d2      	lsls	r2, r2, #3
 8003798:	440a      	add	r2, r1
 800379a:	4413      	add	r3, r2
 800379c:	7818      	ldrb	r0, [r3, #0]
 800379e:	79fa      	ldrb	r2, [r7, #7]
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	7bf9      	ldrb	r1, [r7, #15]
 80037a4:	4301      	orrs	r1, r0
 80037a6:	b2c8      	uxtb	r0, r1
 80037a8:	4911      	ldr	r1, [pc, #68]	; (80037f0 <OLED_DrawPoint+0xac>)
 80037aa:	00d2      	lsls	r2, r2, #3
 80037ac:	440a      	add	r2, r1
 80037ae:	4413      	add	r3, r2
 80037b0:	4602      	mov	r2, r0
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e018      	b.n	80037e8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 80037b6:	79fa      	ldrb	r2, [r7, #7]
 80037b8:	7bbb      	ldrb	r3, [r7, #14]
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <OLED_DrawPoint+0xac>)
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	440a      	add	r2, r1
 80037c0:	4413      	add	r3, r2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b25a      	sxtb	r2, r3
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	4013      	ands	r3, r2
 80037d0:	b259      	sxtb	r1, r3
 80037d2:	79fa      	ldrb	r2, [r7, #7]
 80037d4:	7bbb      	ldrb	r3, [r7, #14]
 80037d6:	b2c8      	uxtb	r0, r1
 80037d8:	4905      	ldr	r1, [pc, #20]	; (80037f0 <OLED_DrawPoint+0xac>)
 80037da:	00d2      	lsls	r2, r2, #3
 80037dc:	440a      	add	r2, r1
 80037de:	4413      	add	r3, r2
 80037e0:	4602      	mov	r2, r0
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e000      	b.n	80037e8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//It's out of range.
 80037e6:	bf00      	nop
}
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	200003a8 	.word	0x200003a8

080037f4 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0, reverse display; 1, normal display.
//size: choose font 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	461a      	mov	r2, r3
 8003802:	4623      	mov	r3, r4
 8003804:	71fb      	strb	r3, [r7, #7]
 8003806:	4603      	mov	r3, r0
 8003808:	71bb      	strb	r3, [r7, #6]
 800380a:	460b      	mov	r3, r1
 800380c:	717b      	strb	r3, [r7, #5]
 800380e:	4613      	mov	r3, r2
 8003810:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003812:	79bb      	ldrb	r3, [r7, #6]
 8003814:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';// get the offset value.
 8003816:	797b      	ldrb	r3, [r7, #5]
 8003818:	3b20      	subs	r3, #32
 800381a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800381c:	2300      	movs	r3, #0
 800381e:	73bb      	strb	r3, [r7, #14]
 8003820:	e04d      	b.n	80038be <OLED_ShowChar+0xca>
    {
		if(size==12)temp=oled_asc2_1206[chr][t];  //Call 1206 font
 8003822:	793b      	ldrb	r3, [r7, #4]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d10b      	bne.n	8003840 <OLED_ShowChar+0x4c>
 8003828:	797a      	ldrb	r2, [r7, #5]
 800382a:	7bb9      	ldrb	r1, [r7, #14]
 800382c:	4828      	ldr	r0, [pc, #160]	; (80038d0 <OLED_ShowChar+0xdc>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4403      	add	r3, r0
 8003838:	440b      	add	r3, r1
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	73fb      	strb	r3, [r7, #15]
 800383e:	e007      	b.n	8003850 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //Call 1608 font
 8003840:	797a      	ldrb	r2, [r7, #5]
 8003842:	7bbb      	ldrb	r3, [r7, #14]
 8003844:	4923      	ldr	r1, [pc, #140]	; (80038d4 <OLED_ShowChar+0xe0>)
 8003846:	0112      	lsls	r2, r2, #4
 8003848:	440a      	add	r2, r1
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003850:	2300      	movs	r3, #0
 8003852:	737b      	strb	r3, [r7, #13]
 8003854:	e02d      	b.n	80038b2 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	da07      	bge.n	800386e <OLED_ShowChar+0x7a>
 800385e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003862:	79b9      	ldrb	r1, [r7, #6]
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff6c 	bl	8003744 <OLED_DrawPoint>
 800386c:	e00c      	b.n	8003888 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800386e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	79b9      	ldrb	r1, [r7, #6]
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff5e 	bl	8003744 <OLED_DrawPoint>
			temp<<=1;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
			y++;
 800388e:	79bb      	ldrb	r3, [r7, #6]
 8003890:	3301      	adds	r3, #1
 8003892:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003894:	79ba      	ldrb	r2, [r7, #6]
 8003896:	7b3b      	ldrb	r3, [r7, #12]
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	793b      	ldrb	r3, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	d105      	bne.n	80038ac <OLED_ShowChar+0xb8>
			{
				y=y0;
 80038a0:	7b3b      	ldrb	r3, [r7, #12]
 80038a2:	71bb      	strb	r3, [r7, #6]
				x++;
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	3301      	adds	r3, #1
 80038a8:	71fb      	strb	r3, [r7, #7]
				break;
 80038aa:	e005      	b.n	80038b8 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80038ac:	7b7b      	ldrb	r3, [r7, #13]
 80038ae:	3301      	adds	r3, #1
 80038b0:	737b      	strb	r3, [r7, #13]
 80038b2:	7b7b      	ldrb	r3, [r7, #13]
 80038b4:	2b07      	cmp	r3, #7
 80038b6:	d9ce      	bls.n	8003856 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	3301      	adds	r3, #1
 80038bc:	73bb      	strb	r3, [r7, #14]
 80038be:	7bba      	ldrb	r2, [r7, #14]
 80038c0:	793b      	ldrb	r3, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3ad      	bcc.n	8003822 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	08007a78 	.word	0x08007a78
 80038d4:	08007eec 	.word	0x08007eec

080038d8 <oled_pow>:
//m^n function
uint32_t oled_pow(uint8_t m, uint8_t n)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	460a      	mov	r2, r1
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80038ec:	e004      	b.n	80038f8 <oled_pow+0x20>
 80038ee:	79fa      	ldrb	r2, [r7, #7]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	79bb      	ldrb	r3, [r7, #6]
 80038fa:	1e5a      	subs	r2, r3, #1
 80038fc:	71ba      	strb	r2, [r7, #6]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f5      	bne.n	80038ee <oled_pow+0x16>
	return result;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
	...

08003910 <OLED_ShowNumber>:
//len: number of digits
//size: font size
//mode: mode 0, fill mode; 1, overlay mode.
//num: value (0~4294967295);
void OLED_ShowNumber(uint8_t x,uint8_t y, uint32_t num,uint8_t len,uint8_t size)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b087      	sub	sp, #28
 8003914:	af02      	add	r7, sp, #8
 8003916:	603a      	str	r2, [r7, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
 800391e:	460b      	mov	r3, r1
 8003920:	71bb      	strb	r3, [r7, #6]
 8003922:	4613      	mov	r3, r2
 8003924:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003926:	2300      	movs	r3, #0
 8003928:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e051      	b.n	80039d4 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8003930:	797a      	ldrb	r2, [r7, #5]
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	200a      	movs	r0, #10
 8003940:	f7ff ffca 	bl	80038d8 <oled_pow>
 8003944:	4602      	mov	r2, r0
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	fbb3 f1f2 	udiv	r1, r3, r2
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <OLED_ShowNumber+0xd8>)
 800394e:	fba3 2301 	umull	r2, r3, r3, r1
 8003952:	08da      	lsrs	r2, r3, #3
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	1aca      	subs	r2, r1, r3
 800395e:	4613      	mov	r3, r2
 8003960:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11d      	bne.n	80039a4 <OLED_ShowNumber+0x94>
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	797b      	ldrb	r3, [r7, #5]
 800396c:	3b01      	subs	r3, #1
 800396e:	429a      	cmp	r2, r3
 8003970:	da18      	bge.n	80039a4 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 8003972:	7b7b      	ldrb	r3, [r7, #13]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d113      	bne.n	80039a0 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8003978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	b2da      	uxtb	r2, r3
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	4413      	add	r3, r2
 800398c:	b2d8      	uxtb	r0, r3
 800398e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003992:	79b9      	ldrb	r1, [r7, #6]
 8003994:	2201      	movs	r2, #1
 8003996:	9200      	str	r2, [sp, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	f7ff ff2b 	bl	80037f4 <OLED_ShowChar>
				continue;
 800399e:	e016      	b.n	80039ce <OLED_ShowNumber+0xbe>
			}else enshow=1;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73bb      	strb	r3, [r7, #14]

		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1);
 80039a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	4413      	add	r3, r2
 80039b8:	b2d8      	uxtb	r0, r3
 80039ba:	7b7b      	ldrb	r3, [r7, #13]
 80039bc:	3330      	adds	r3, #48	; 0x30
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039c4:	79b9      	ldrb	r1, [r7, #6]
 80039c6:	2401      	movs	r4, #1
 80039c8:	9400      	str	r4, [sp, #0]
 80039ca:	f7ff ff13 	bl	80037f4 <OLED_ShowChar>
	for(t=0;t<len;t++)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	3301      	adds	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	797b      	ldrb	r3, [r7, #5]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3a9      	bcc.n	8003930 <OLED_ShowNumber+0x20>
	}
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	cccccccd 	.word	0xcccccccd

080039ec <OLED_ShowString>:
// display string
//x, y: starting coordinates
//*p: string start address
// 16 font.
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	4603      	mov	r3, r0
 80039f4:	603a      	str	r2, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
 80039f8:	460b      	mov	r3, r1
 80039fa:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while(*p!='\0')
 80039fc:	e01f      	b.n	8003a3e <OLED_ShowString+0x52>
    {
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	2b7a      	cmp	r3, #122	; 0x7a
 8003a02:	d904      	bls.n	8003a0e <OLED_ShowString+0x22>
 8003a04:	2300      	movs	r3, #0
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	79bb      	ldrb	r3, [r7, #6]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003a0e:	79bb      	ldrb	r3, [r7, #6]
 8003a10:	2b3a      	cmp	r3, #58	; 0x3a
 8003a12:	d905      	bls.n	8003a20 <OLED_ShowString+0x34>
 8003a14:	2300      	movs	r3, #0
 8003a16:	71fb      	strb	r3, [r7, #7]
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	71bb      	strb	r3, [r7, #6]
 8003a1c:	f7ff fe6c 	bl	80036f8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	79b9      	ldrb	r1, [r7, #6]
 8003a26:	79f8      	ldrb	r0, [r7, #7]
 8003a28:	2301      	movs	r3, #1
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	f7ff fee1 	bl	80037f4 <OLED_ShowChar>
        x+=8;
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	3308      	adds	r3, #8
 8003a36:	71fb      	strb	r3, [r7, #7]
        p++;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1db      	bne.n	80039fe <OLED_ShowString+0x12>
    }
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <OLED_Init>:
//初始化oled
void OLED_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
 	RCC->APB2ENR|=1<<2;    //Enable PORTA clock
	GPIOA->CRH&=0X0FFFFFFF;
	GPIOA->CRH|=0X20000000;//PA15 push-pull
*/

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // RESET PB3=0
 8003a54:	2200      	movs	r2, #0
 8003a56:	2108      	movs	r1, #8
 8003a58:	4839      	ldr	r0, [pc, #228]	; (8003b40 <OLED_Init+0xf0>)
 8003a5a:	f001 fcaa 	bl	80053b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003a5e:	2064      	movs	r0, #100	; 0x64
 8003a60:	f000 fbba 	bl	80041d8 <HAL_Delay>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // RESET PB3=1
 8003a64:	2201      	movs	r2, #1
 8003a66:	2108      	movs	r1, #8
 8003a68:	4835      	ldr	r0, [pc, #212]	; (8003b40 <OLED_Init+0xf0>)
 8003a6a:	f001 fca2 	bl	80053b2 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); //Close display
 8003a6e:	2100      	movs	r1, #0
 8003a70:	20ae      	movs	r0, #174	; 0xae
 8003a72:	f7ff fdf5 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5, OLED_CMD);
 8003a76:	2100      	movs	r1, #0
 8003a78:	20d5      	movs	r0, #213	; 0xd5
 8003a7a:	f7ff fdf1 	bl	8003660 <OLED_WR_Byte>
	//Set clock frequency factor, oscillation frequency
	OLED_WR_Byte(80, OLED_CMD);
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2050      	movs	r0, #80	; 0x50
 8003a82:	f7ff fded 	bl	8003660 <OLED_WR_Byte>
	//[3:0], frequency divisor; [7:4], oscillation frequency.
	OLED_WR_Byte(0xA8,OLED_CMD); //Set the number of drivers
 8003a86:	2100      	movs	r1, #0
 8003a88:	20a8      	movs	r0, #168	; 0xa8
 8003a8a:	f7ff fde9 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //Default 0X3F (1/64)
 8003a8e:	2100      	movs	r1, #0
 8003a90:	203f      	movs	r0, #63	; 0x3f
 8003a92:	f7ff fde5 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //Set display offset
 8003a96:	2100      	movs	r1, #0
 8003a98:	20d3      	movs	r0, #211	; 0xd3
 8003a9a:	f7ff fde1 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //The default is 0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f7ff fddd 	bl	8003660 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //Set the start line [5:0] and the number of rows.
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2040      	movs	r0, #64	; 0x40
 8003aaa:	f7ff fdd9 	bl	8003660 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD); //Charge pump settings
 8003aae:	2100      	movs	r1, #0
 8003ab0:	208d      	movs	r0, #141	; 0x8d
 8003ab2:	f7ff fdd5 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Bit2, on / off
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	2014      	movs	r0, #20
 8003aba:	f7ff fdd1 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set memory address mode
 8003abe:	2100      	movs	r1, #0
 8003ac0:	2020      	movs	r0, #32
 8003ac2:	f7ff fdcd 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //[1:0], 00, column address mode;
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	2002      	movs	r0, #2
 8003aca:	f7ff fdc9 	bl	8003660 <OLED_WR_Byte>
	// 01, row address mode; 10, page address mode; default 10;
	OLED_WR_Byte(0xA1,OLED_CMD); //Segment redefinition settings, bit0:0,0->0; 1,0->127;
 8003ace:	2100      	movs	r1, #0
 8003ad0:	20a1      	movs	r0, #161	; 0xa1
 8003ad2:	f7ff fdc5 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	20c0      	movs	r0, #192	; 0xc0
 8003ada:	f7ff fdc1 	bl	8003660 <OLED_WR_Byte>
	//Set COM scan direction; bit3:0, normal mode;
	// 1, redefine mode COM[N-1]->COM0; N: drive path.
	OLED_WR_Byte(0xDA,OLED_CMD); //Setting up COM hardware pin configuration
 8003ade:	2100      	movs	r1, #0
 8003ae0:	20da      	movs	r0, #218	; 0xda
 8003ae2:	f7ff fdbd 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]To configure
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2012      	movs	r0, #18
 8003aea:	f7ff fdb9 	bl	8003660 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD); //Contrast settings
 8003aee:	2100      	movs	r1, #0
 8003af0:	2081      	movs	r0, #129	; 0x81
 8003af2:	f7ff fdb5 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD);
 8003af6:	2100      	movs	r1, #0
 8003af8:	20ef      	movs	r0, #239	; 0xef
 8003afa:	f7ff fdb1 	bl	8003660 <OLED_WR_Byte>
	//1~255; default 0X7F (brightness setting, larger and brighter)
	OLED_WR_Byte(0xD9,OLED_CMD); //Set up pre charge cycle
 8003afe:	2100      	movs	r1, #0
 8003b00:	20d9      	movs	r0, #217	; 0xd9
 8003b02:	f7ff fdad 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003b06:	2100      	movs	r1, #0
 8003b08:	20f1      	movs	r0, #241	; 0xf1
 8003b0a:	f7ff fda9 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH voltage multiplying rate
 8003b0e:	2100      	movs	r1, #0
 8003b10:	20db      	movs	r0, #219	; 0xdb
 8003b12:	f7ff fda5 	bl	8003660 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003b16:	2100      	movs	r1, #0
 8003b18:	2030      	movs	r0, #48	; 0x30
 8003b1a:	f7ff fda1 	bl	8003660 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD);
 8003b1e:	2100      	movs	r1, #0
 8003b20:	20a4      	movs	r0, #164	; 0xa4
 8003b22:	f7ff fd9d 	bl	8003660 <OLED_WR_Byte>
	//The global display is turned on; bit0:1, turn on; 0, turn off;
	//(white screen / black screen).
	OLED_WR_Byte(0xA6, OLED_CMD);
 8003b26:	2100      	movs	r1, #0
 8003b28:	20a6      	movs	r0, #166	; 0xa6
 8003b2a:	f7ff fd99 	bl	8003660 <OLED_WR_Byte>
	//Set the display mode; bit0:1, reverse display; 0, normal display.
	OLED_WR_Byte(0xAF,OLED_CMD); //Open display
 8003b2e:	2100      	movs	r1, #0
 8003b30:	20af      	movs	r0, #175	; 0xaf
 8003b32:	f7ff fd95 	bl	8003660 <OLED_WR_Byte>
	OLED_Clear();
 8003b36:	f7ff fddf 	bl	80036f8 <OLED_Clear>
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40010c00 	.word	0x40010c00

08003b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	61d3      	str	r3, [r2, #28]
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_MspInit+0x60>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_MspInit+0x60>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010000 	.word	0x40010000

08003ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0310 	add.w	r3, r7, #16
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <HAL_ADC_MspInit+0xbc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d149      	bne.n	8003c5c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	6193      	str	r3, [r2, #24]
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6193      	str	r3, [r2, #24]
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003bf8:	2348      	movs	r3, #72	; 0x48
 8003bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4819      	ldr	r0, [pc, #100]	; (8003c6c <HAL_ADC_MspInit+0xc4>)
 8003c08:	f001 fa38 	bl	800507c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c0e:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_ADC_MspInit+0xcc>)
 8003c10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c18:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c36:	2220      	movs	r2, #32
 8003c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c40:	480b      	ldr	r0, [pc, #44]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c42:	f000 ffb7 	bl	8004bb4 <HAL_DMA_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003c4c:	f7ff fcca 	bl	80035e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c54:	621a      	str	r2, [r3, #32]
 8003c56:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c5c:	bf00      	nop
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40012400 	.word	0x40012400
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010800 	.word	0x40010800
 8003c70:	200002e8 	.word	0x200002e8
 8003c74:	40020008 	.word	0x40020008

08003c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <HAL_TIM_Base_MspInit+0x54>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d11b      	bne.n	8003cc2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_TIM_Base_MspInit+0x58>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <HAL_TIM_Base_MspInit+0x58>)
 8003c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c94:	6193      	str	r3, [r2, #24]
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_TIM_Base_MspInit+0x58>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2019      	movs	r0, #25
 8003ca8:	f000 ff4d 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003cac:	2019      	movs	r0, #25
 8003cae:	f000 ff66 	bl	8004b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	201a      	movs	r0, #26
 8003cb8:	f000 ff45 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003cbc:	201a      	movs	r0, #26
 8003cbe:	f000 ff5e 	bl	8004b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_TIM_PWM_MspInit+0x34>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10b      	bne.n	8003cfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_TIM_PWM_MspInit+0x38>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <HAL_TIM_PWM_MspInit+0x38>)
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	61d3      	str	r3, [r2, #28]
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_TIM_PWM_MspInit+0x38>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0310 	add.w	r3, r7, #16
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_TIM_Encoder_MspInit+0x80>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d12b      	bne.n	8003d88 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	61d3      	str	r3, [r2, #28]
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d48:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d60:	23c0      	movs	r3, #192	; 0xc0
 8003d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6c:	f107 0310 	add.w	r3, r7, #16
 8003d70:	4619      	mov	r1, r3
 8003d72:	4809      	ldr	r0, [pc, #36]	; (8003d98 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d74:	f001 f982 	bl	800507c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	201e      	movs	r0, #30
 8003d7e:	f000 fee2 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d82:	201e      	movs	r0, #30
 8003d84:	f000 fefb 	bl	8004b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d88:	bf00      	nop
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40010c00 	.word	0x40010c00

08003d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0310 	add.w	r3, r7, #16
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_TIM_MspPostInit+0x58>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d117      	bne.n	8003dec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_TIM_MspPostInit+0x5c>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <HAL_TIM_MspPostInit+0x5c>)
 8003dc2:	f043 0308 	orr.w	r3, r3, #8
 8003dc6:	6193      	str	r3, [r2, #24]
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_TIM_MspPostInit+0x5c>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de0:	f107 0310 	add.w	r3, r7, #16
 8003de4:	4619      	mov	r1, r3
 8003de6:	4805      	ldr	r0, [pc, #20]	; (8003dfc <HAL_TIM_MspPostInit+0x60>)
 8003de8:	f001 f948 	bl	800507c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003dec:	bf00      	nop
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40010c00 	.word	0x40010c00

08003e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 0310 	add.w	r3, r7, #16
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a47      	ldr	r2, [pc, #284]	; (8003f38 <HAL_UART_MspInit+0x138>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	f040 8087 	bne.w	8003f30 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e22:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_UART_MspInit+0x13c>)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	4a45      	ldr	r2, [pc, #276]	; (8003f3c <HAL_UART_MspInit+0x13c>)
 8003e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2c:	6193      	str	r3, [r2, #24]
 8003e2e:	4b43      	ldr	r3, [pc, #268]	; (8003f3c <HAL_UART_MspInit+0x13c>)
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3a:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <HAL_UART_MspInit+0x13c>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	4a3f      	ldr	r2, [pc, #252]	; (8003f3c <HAL_UART_MspInit+0x13c>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	6193      	str	r3, [r2, #24]
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_UART_MspInit+0x13c>)
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	4619      	mov	r1, r3
 8003e66:	4836      	ldr	r0, [pc, #216]	; (8003f40 <HAL_UART_MspInit+0x140>)
 8003e68:	f001 f908 	bl	800507c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	4619      	mov	r1, r3
 8003e80:	482f      	ldr	r0, [pc, #188]	; (8003f40 <HAL_UART_MspInit+0x140>)
 8003e82:	f001 f8fb 	bl	800507c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003e88:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <HAL_UART_MspInit+0x148>)
 8003e8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e92:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003eaa:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003eac:	2220      	movs	r2, #32
 8003eae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003eb6:	4823      	ldr	r0, [pc, #140]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003eb8:	f000 fe7c 	bl	8004bb4 <HAL_DMA_Init>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003ec2:	f7ff fb8f 	bl	80035e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_UART_MspInit+0x144>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_UART_MspInit+0x150>)
 8003ed6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003eda:	2210      	movs	r2, #16
 8003edc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003efe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f04:	4811      	ldr	r0, [pc, #68]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003f06:	f000 fe55 	bl	8004bb4 <HAL_DMA_Init>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8003f10:	f7ff fb68 	bl	80035e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_UART_MspInit+0x14c>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f20:	2200      	movs	r2, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	2025      	movs	r0, #37	; 0x25
 8003f26:	f000 fe0e 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f2a:	2025      	movs	r0, #37	; 0x25
 8003f2c:	f000 fe27 	bl	8004b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f30:	bf00      	nop
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40010800 	.word	0x40010800
 8003f44:	200001dc 	.word	0x200001dc
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	20000168 	.word	0x20000168
 8003f50:	40020044 	.word	0x40020044

08003f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f64:	e7fe      	b.n	8003f64 <HardFault_Handler+0x4>

08003f66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f6a:	e7fe      	b.n	8003f6a <MemManage_Handler+0x4>

08003f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f70:	e7fe      	b.n	8003f70 <BusFault_Handler+0x4>

08003f72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f76:	e7fe      	b.n	8003f76 <UsageFault_Handler+0x4>

08003f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fa0:	f000 f8fe 	bl	80041a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fa4:	bf00      	nop
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <DMA1_Channel1_IRQHandler+0x10>)
 8003fae:	f000 ff31 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200002e8 	.word	0x200002e8

08003fbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <DMA1_Channel4_IRQHandler+0x10>)
 8003fc2:	f000 ff27 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000168 	.word	0x20000168

08003fd0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <DMA1_Channel5_IRQHandler+0x10>)
 8003fd6:	f000 ff1d 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200001dc 	.word	0x200001dc

08003fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003fe8:	2020      	movs	r0, #32
 8003fea:	f001 fa13 	bl	8005414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003fee:	2080      	movs	r0, #128	; 0x80
 8003ff0:	f001 fa10 	bl	8005414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <TIM1_UP_IRQHandler+0x10>)
 8003ffe:	f002 f9d5 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000338 	.word	0x20000338

0800400c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004012:	f002 f9cb 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000338 	.word	0x20000338

08004020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <TIM4_IRQHandler+0x10>)
 8004026:	f002 f9c1 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200000c8 	.word	0x200000c8

08004034 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <USART1_IRQHandler+0x10>)
 800403a:	f003 f8b3 	bl	80071a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000220 	.word	0x20000220

08004048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800404c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004050:	f001 f9e0 	bl	8005414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004054:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004058:	f001 f9dc 	bl	8005414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}

08004060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <SystemInit+0x5c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <SystemInit+0x5c>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <SystemInit+0x5c>)
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4911      	ldr	r1, [pc, #68]	; (80040bc <SystemInit+0x5c>)
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <SystemInit+0x60>)
 8004078:	4013      	ands	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <SystemInit+0x5c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <SystemInit+0x5c>)
 8004082:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <SystemInit+0x5c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <SystemInit+0x5c>)
 8004092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004096:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <SystemInit+0x5c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a07      	ldr	r2, [pc, #28]	; (80040bc <SystemInit+0x5c>)
 800409e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <SystemInit+0x5c>)
 80040a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <SystemInit+0x64>)
 80040ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40021000 	.word	0x40021000
 80040c0:	f8ff0000 	.word	0xf8ff0000
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80040c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80040ca:	e003      	b.n	80040d4 <LoopCopyDataInit>

080040cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80040ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80040d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80040d2:	3104      	adds	r1, #4

080040d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80040d4:	480a      	ldr	r0, [pc, #40]	; (8004100 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80040d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80040da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80040dc:	d3f6      	bcc.n	80040cc <CopyDataInit>
  ldr r2, =_sbss
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80040e0:	e002      	b.n	80040e8 <LoopFillZerobss>

080040e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80040e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80040e4:	f842 3b04 	str.w	r3, [r2], #4

080040e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80040ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80040ec:	d3f9      	bcc.n	80040e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040ee:	f7ff ffb7 	bl	8004060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040f2:	f003 fbf1 	bl	80078d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040f6:	f7fe fea9 	bl	8002e4c <main>
  bx lr
 80040fa:	4770      	bx	lr
  ldr r3, =_sidata
 80040fc:	080084fc 	.word	0x080084fc
  ldr r0, =_sdata
 8004100:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004104:	20000040 	.word	0x20000040
  ldr r2, =_sbss
 8004108:	20000040 	.word	0x20000040
  ldr r3, = _ebss
 800410c:	200007ac 	.word	0x200007ac

08004110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004110:	e7fe      	b.n	8004110 <ADC1_2_IRQHandler>
	...

08004114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_Init+0x28>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_Init+0x28>)
 800411e:	f043 0310 	orr.w	r3, r3, #16
 8004122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004124:	2003      	movs	r0, #3
 8004126:	f000 fd03 	bl	8004b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800412a:	2000      	movs	r0, #0
 800412c:	f000 f808 	bl	8004140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004130:	f7ff fd08 	bl	8003b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40022000 	.word	0x40022000

08004140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_InitTick+0x54>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_InitTick+0x58>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004156:	fbb3 f3f1 	udiv	r3, r3, r1
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fd1b 	bl	8004b9a <HAL_SYSTICK_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e00e      	b.n	800418c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	d80a      	bhi.n	800418a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004174:	2200      	movs	r2, #0
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	f000 fce3 	bl	8004b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004180:	4a06      	ldr	r2, [pc, #24]	; (800419c <HAL_InitTick+0x5c>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000034 	.word	0x20000034
 8004198:	2000003c 	.word	0x2000003c
 800419c:	20000038 	.word	0x20000038

080041a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_IncTick+0x1c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_IncTick+0x20>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <HAL_IncTick+0x20>)
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	2000003c 	.word	0x2000003c
 80041c0:	200007a8 	.word	0x200007a8

080041c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return uwTick;
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <HAL_GetTick+0x10>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	200007a8 	.word	0x200007a8

080041d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_GetTick>
 80041e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d005      	beq.n	80041fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_Delay+0x44>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041fe:	bf00      	nop
 8004200:	f7ff ffe0 	bl	80041c4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d8f7      	bhi.n	8004200 <HAL_Delay+0x28>
  {
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000003c 	.word	0x2000003c

08004220 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0be      	b.n	80043c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fca2 	bl	8003ba8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 faf7 	bl	8004858 <ADC_ConversionStop_Disable>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8099 	bne.w	80043ae <HAL_ADC_Init+0x18e>
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 8095 	bne.w	80043ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800428c:	f023 0302 	bic.w	r3, r3, #2
 8004290:	f043 0202 	orr.w	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7b1b      	ldrb	r3, [r3, #12]
 80042a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b8:	d003      	beq.n	80042c2 <HAL_ADC_Init+0xa2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_ADC_Init+0xa8>
 80042c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042c6:	e000      	b.n	80042ca <HAL_ADC_Init+0xaa>
 80042c8:	2300      	movs	r3, #0
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7d1b      	ldrb	r3, [r3, #20]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d119      	bne.n	800430c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7b1b      	ldrb	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	035a      	lsls	r2, r3, #13
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e00b      	b.n	800430c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_ADC_Init+0x1a8>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	430b      	orrs	r3, r1
 8004332:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433c:	d003      	beq.n	8004346 <HAL_ADC_Init+0x126>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d104      	bne.n	8004350 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	3b01      	subs	r3, #1
 800434c:	051b      	lsls	r3, r3, #20
 800434e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	430a      	orrs	r2, r1
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_ADC_Init+0x1ac>)
 800436c:	4013      	ands	r3, r2
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d10b      	bne.n	800438c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800438a:	e018      	b.n	80043be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	f023 0312 	bic.w	r3, r3, #18
 8004394:	f043 0210 	orr.w	r2, r3, #16
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043ac:	e007      	b.n	80043be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f043 0210 	orr.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	ffe1f7fd 	.word	0xffe1f7fd
 80043cc:	ff1f0efe 	.word	0xff1f0efe

080043d0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a64      	ldr	r2, [pc, #400]	; (8004578 <HAL_ADC_Start_DMA+0x1a8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_ADC_Start_DMA+0x24>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a63      	ldr	r2, [pc, #396]	; (800457c <HAL_ADC_Start_DMA+0x1ac>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d106      	bne.n	8004402 <HAL_ADC_Start_DMA+0x32>
 80043f4:	4b60      	ldr	r3, [pc, #384]	; (8004578 <HAL_ADC_Start_DMA+0x1a8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 80b3 	bne.w	8004568 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_ADC_Start_DMA+0x40>
 800440c:	2302      	movs	r3, #2
 800440e:	e0ae      	b.n	800456e <HAL_ADC_Start_DMA+0x19e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f9cb 	bl	80047b4 <ADC_Enable>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 809a 	bne.w	800455e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4e      	ldr	r2, [pc, #312]	; (800457c <HAL_ADC_Start_DMA+0x1ac>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d105      	bne.n	8004454 <HAL_ADC_Start_DMA+0x84>
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_ADC_Start_DMA+0x1a8>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d115      	bne.n	8004480 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446a:	2b00      	cmp	r3, #0
 800446c:	d026      	beq.n	80044bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004476:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800447e:	e01d      	b.n	80044bc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a39      	ldr	r2, [pc, #228]	; (8004578 <HAL_ADC_Start_DMA+0x1a8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_ADC_Start_DMA+0xd0>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a38      	ldr	r2, [pc, #224]	; (800457c <HAL_ADC_Start_DMA+0x1ac>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10d      	bne.n	80044bc <HAL_ADC_Start_DMA+0xec>
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_ADC_Start_DMA+0x1a8>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f023 0206 	bic.w	r2, r3, #6
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80044d4:	e002      	b.n	80044dc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <HAL_ADC_Start_DMA+0x1b0>)
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_ADC_Start_DMA+0x1b4>)
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4a23      	ldr	r2, [pc, #140]	; (8004588 <HAL_ADC_Start_DMA+0x1b8>)
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0202 	mvn.w	r2, #2
 8004504:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004514:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a18      	ldr	r0, [r3, #32]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	334c      	adds	r3, #76	; 0x4c
 8004520:	4619      	mov	r1, r3
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f000 fb9f 	bl	8004c68 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004534:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004538:	d108      	bne.n	800454c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004548:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800454a:	e00f      	b.n	800456c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800455a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800455c:	e006      	b.n	800456c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004566:	e001      	b.n	800456c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40012400 	.word	0x40012400
 800457c:	40012800 	.word	0x40012800
 8004580:	080048cd 	.word	0x080048cd
 8004584:	08004949 	.word	0x08004949
 8004588:	08004965 	.word	0x08004965

0800458c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x20>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0dc      	b.n	800479e <HAL_ADC_ConfigChannel+0x1da>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d81c      	bhi.n	800462e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	3b05      	subs	r3, #5
 8004606:	221f      	movs	r2, #31
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	4019      	ands	r1, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	3b05      	subs	r3, #5
 8004620:	fa00 f203 	lsl.w	r2, r0, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	635a      	str	r2, [r3, #52]	; 0x34
 800462c:	e03c      	b.n	80046a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d81c      	bhi.n	8004670 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	3b23      	subs	r3, #35	; 0x23
 8004648:	221f      	movs	r2, #31
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	4019      	ands	r1, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	3b23      	subs	r3, #35	; 0x23
 8004662:	fa00 f203 	lsl.w	r2, r0, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
 800466e:	e01b      	b.n	80046a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	3b41      	subs	r3, #65	; 0x41
 8004682:	221f      	movs	r2, #31
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	4019      	ands	r1, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	3b41      	subs	r3, #65	; 0x41
 800469c:	fa00 f203 	lsl.w	r2, r0, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b09      	cmp	r3, #9
 80046ae:	d91c      	bls.n	80046ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68d9      	ldr	r1, [r3, #12]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	3b1e      	subs	r3, #30
 80046c2:	2207      	movs	r2, #7
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	4019      	ands	r1, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6898      	ldr	r0, [r3, #8]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	3b1e      	subs	r3, #30
 80046dc:	fa00 f203 	lsl.w	r2, r0, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e019      	b.n	800471e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6919      	ldr	r1, [r3, #16]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	2207      	movs	r2, #7
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	4019      	ands	r1, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6898      	ldr	r0, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	fa00 f203 	lsl.w	r2, r0, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b10      	cmp	r3, #16
 8004724:	d003      	beq.n	800472e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800472a:	2b11      	cmp	r3, #17
 800472c:	d132      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d126      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004754:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b10      	cmp	r3, #16
 800475c:	d11a      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_ADC_ConfigChannel+0x1e8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	0c9a      	lsrs	r2, r3, #18
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004774:	e002      	b.n	800477c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3b01      	subs	r3, #1
 800477a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f9      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x1b2>
 8004782:	e007      	b.n	8004794 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	40012400 	.word	0x40012400
 80047ac:	20000034 	.word	0x20000034
 80047b0:	431bde83 	.word	0x431bde83

080047b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d039      	beq.n	8004846 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <ADC_Enable+0x9c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <ADC_Enable+0xa0>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	0c9b      	lsrs	r3, r3, #18
 80047ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80047f0:	e002      	b.n	80047f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f9      	bne.n	80047f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047fe:	f7ff fce1 	bl	80041c4 <HAL_GetTick>
 8004802:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004804:	e018      	b.n	8004838 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004806:	f7ff fcdd 	bl	80041c4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d911      	bls.n	8004838 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	f043 0210 	orr.w	r2, r3, #16
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e007      	b.n	8004848 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d1df      	bne.n	8004806 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000034 	.word	0x20000034
 8004854:	431bde83 	.word	0x431bde83

08004858 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b01      	cmp	r3, #1
 8004870:	d127      	bne.n	80048c2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004882:	f7ff fc9f 	bl	80041c4 <HAL_GetTick>
 8004886:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004888:	e014      	b.n	80048b4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800488a:	f7ff fc9b 	bl	80041c4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d90d      	bls.n	80048b4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e007      	b.n	80048c4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d0e3      	beq.n	800488a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d127      	bne.n	8004936 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80048fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004900:	d115      	bne.n	800492e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004906:	2b00      	cmp	r3, #0
 8004908:	d111      	bne.n	800492e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fe2c 	bl	800458c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004934:	e004      	b.n	8004940 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fe21 	bl	800459e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f043 0204 	orr.w	r2, r3, #4
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff fe10 	bl	80045b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <__NVIC_SetPriorityGrouping+0x44>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b4:	4013      	ands	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ca:	4a04      	ldr	r2, [pc, #16]	; (80049dc <__NVIC_SetPriorityGrouping+0x44>)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	60d3      	str	r3, [r2, #12]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <__NVIC_GetPriorityGrouping+0x18>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 0307 	and.w	r3, r3, #7
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db0b      	blt.n	8004a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	f003 021f 	and.w	r2, r3, #31
 8004a14:	4906      	ldr	r1, [pc, #24]	; (8004a30 <__NVIC_EnableIRQ+0x34>)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	e000e100 	.word	0xe000e100

08004a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	db0a      	blt.n	8004a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	490c      	ldr	r1, [pc, #48]	; (8004a80 <__NVIC_SetPriority+0x4c>)
 8004a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a52:	0112      	lsls	r2, r2, #4
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	440b      	add	r3, r1
 8004a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a5c:	e00a      	b.n	8004a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	4908      	ldr	r1, [pc, #32]	; (8004a84 <__NVIC_SetPriority+0x50>)
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	3b04      	subs	r3, #4
 8004a6c:	0112      	lsls	r2, r2, #4
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	440b      	add	r3, r1
 8004a72:	761a      	strb	r2, [r3, #24]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e100 	.word	0xe000e100
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f1c3 0307 	rsb	r3, r3, #7
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	bf28      	it	cs
 8004aa6:	2304      	movcs	r3, #4
 8004aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d902      	bls.n	8004ab8 <NVIC_EncodePriority+0x30>
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3b03      	subs	r3, #3
 8004ab6:	e000      	b.n	8004aba <NVIC_EncodePriority+0x32>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004abc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	401a      	ands	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	43d9      	mvns	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae0:	4313      	orrs	r3, r2
         );
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3724      	adds	r7, #36	; 0x24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004afc:	d301      	bcc.n	8004b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00f      	b.n	8004b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <SysTick_Config+0x40>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b0a:	210f      	movs	r1, #15
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	f7ff ff90 	bl	8004a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <SysTick_Config+0x40>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <SysTick_Config+0x40>)
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	e000e010 	.word	0xe000e010

08004b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff2d 	bl	8004998 <__NVIC_SetPriorityGrouping>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b58:	f7ff ff42 	bl	80049e0 <__NVIC_GetPriorityGrouping>
 8004b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	6978      	ldr	r0, [r7, #20]
 8004b64:	f7ff ff90 	bl	8004a88 <NVIC_EncodePriority>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff ff5f 	bl	8004a34 <__NVIC_SetPriority>
}
 8004b76:	bf00      	nop
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4603      	mov	r3, r0
 8004b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff35 	bl	80049fc <__NVIC_EnableIRQ>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ffa2 	bl	8004aec <SysTick_Config>
 8004ba8:	4603      	mov	r3, r0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e043      	b.n	8004c52 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_DMA_Init+0xa8>)
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <HAL_DMA_Init+0xac>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	009a      	lsls	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_DMA_Init+0xb0>)
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bfe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	bffdfff8 	.word	0xbffdfff8
 8004c60:	cccccccd 	.word	0xcccccccd
 8004c64:	40020000 	.word	0x40020000

08004c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_DMA_Start_IT+0x20>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e04a      	b.n	8004d1e <HAL_DMA_Start_IT+0xb6>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d13a      	bne.n	8004d10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f9ae 	bl	8005020 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 020e 	orr.w	r2, r2, #14
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e00f      	b.n	8004cfe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0204 	bic.w	r2, r2, #4
 8004cec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 020a 	orr.w	r2, r2, #10
 8004cfc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e005      	b.n	8004d1c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d005      	beq.n	8004d4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	e051      	b.n	8004dee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 020e 	bic.w	r2, r2, #14
 8004d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a22      	ldr	r2, [pc, #136]	; (8004df8 <HAL_DMA_Abort_IT+0xd0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d029      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0xa0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <HAL_DMA_Abort_IT+0xd4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d022      	beq.n	8004dc4 <HAL_DMA_Abort_IT+0x9c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <HAL_DMA_Abort_IT+0xd8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d01a      	beq.n	8004dbe <HAL_DMA_Abort_IT+0x96>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <HAL_DMA_Abort_IT+0xdc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d012      	beq.n	8004db8 <HAL_DMA_Abort_IT+0x90>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <HAL_DMA_Abort_IT+0xe0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00a      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x8a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <HAL_DMA_Abort_IT+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d102      	bne.n	8004dac <HAL_DMA_Abort_IT+0x84>
 8004da6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004daa:	e00e      	b.n	8004dca <HAL_DMA_Abort_IT+0xa2>
 8004dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004db0:	e00b      	b.n	8004dca <HAL_DMA_Abort_IT+0xa2>
 8004db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004db6:	e008      	b.n	8004dca <HAL_DMA_Abort_IT+0xa2>
 8004db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dbc:	e005      	b.n	8004dca <HAL_DMA_Abort_IT+0xa2>
 8004dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dc2:	e002      	b.n	8004dca <HAL_DMA_Abort_IT+0xa2>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	e000      	b.n	8004dca <HAL_DMA_Abort_IT+0xa2>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <HAL_DMA_Abort_IT+0xe8>)
 8004dcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
    } 
  }
  return status;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40020008 	.word	0x40020008
 8004dfc:	4002001c 	.word	0x4002001c
 8004e00:	40020030 	.word	0x40020030
 8004e04:	40020044 	.word	0x40020044
 8004e08:	40020058 	.word	0x40020058
 8004e0c:	4002006c 	.word	0x4002006c
 8004e10:	40020000 	.word	0x40020000

08004e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	2204      	movs	r2, #4
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d04f      	beq.n	8004edc <HAL_DMA_IRQHandler+0xc8>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d04a      	beq.n	8004edc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a66      	ldr	r2, [pc, #408]	; (8005004 <HAL_DMA_IRQHandler+0x1f0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d029      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xae>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a65      	ldr	r2, [pc, #404]	; (8005008 <HAL_DMA_IRQHandler+0x1f4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_DMA_IRQHandler+0xaa>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a63      	ldr	r2, [pc, #396]	; (800500c <HAL_DMA_IRQHandler+0x1f8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01a      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0xa4>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a62      	ldr	r2, [pc, #392]	; (8005010 <HAL_DMA_IRQHandler+0x1fc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d012      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x9e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a60      	ldr	r2, [pc, #384]	; (8005014 <HAL_DMA_IRQHandler+0x200>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00a      	beq.n	8004eac <HAL_DMA_IRQHandler+0x98>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a5f      	ldr	r2, [pc, #380]	; (8005018 <HAL_DMA_IRQHandler+0x204>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d102      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0x92>
 8004ea0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ea4:	e00e      	b.n	8004ec4 <HAL_DMA_IRQHandler+0xb0>
 8004ea6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004eaa:	e00b      	b.n	8004ec4 <HAL_DMA_IRQHandler+0xb0>
 8004eac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004eb0:	e008      	b.n	8004ec4 <HAL_DMA_IRQHandler+0xb0>
 8004eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eb6:	e005      	b.n	8004ec4 <HAL_DMA_IRQHandler+0xb0>
 8004eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ebc:	e002      	b.n	8004ec4 <HAL_DMA_IRQHandler+0xb0>
 8004ebe:	2340      	movs	r3, #64	; 0x40
 8004ec0:	e000      	b.n	8004ec4 <HAL_DMA_IRQHandler+0xb0>
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	4a55      	ldr	r2, [pc, #340]	; (800501c <HAL_DMA_IRQHandler+0x208>)
 8004ec6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8094 	beq.w	8004ffa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004eda:	e08e      	b.n	8004ffa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d056      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x186>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d051      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 020a 	bic.w	r2, r2, #10
 8004f12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a38      	ldr	r2, [pc, #224]	; (8005004 <HAL_DMA_IRQHandler+0x1f0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d029      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x166>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a37      	ldr	r2, [pc, #220]	; (8005008 <HAL_DMA_IRQHandler+0x1f4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x162>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a35      	ldr	r2, [pc, #212]	; (800500c <HAL_DMA_IRQHandler+0x1f8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01a      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x15c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a34      	ldr	r2, [pc, #208]	; (8005010 <HAL_DMA_IRQHandler+0x1fc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d012      	beq.n	8004f6a <HAL_DMA_IRQHandler+0x156>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a32      	ldr	r2, [pc, #200]	; (8005014 <HAL_DMA_IRQHandler+0x200>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00a      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x150>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a31      	ldr	r2, [pc, #196]	; (8005018 <HAL_DMA_IRQHandler+0x204>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d102      	bne.n	8004f5e <HAL_DMA_IRQHandler+0x14a>
 8004f58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f5c:	e00e      	b.n	8004f7c <HAL_DMA_IRQHandler+0x168>
 8004f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f62:	e00b      	b.n	8004f7c <HAL_DMA_IRQHandler+0x168>
 8004f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f68:	e008      	b.n	8004f7c <HAL_DMA_IRQHandler+0x168>
 8004f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f6e:	e005      	b.n	8004f7c <HAL_DMA_IRQHandler+0x168>
 8004f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f74:	e002      	b.n	8004f7c <HAL_DMA_IRQHandler+0x168>
 8004f76:	2320      	movs	r3, #32
 8004f78:	e000      	b.n	8004f7c <HAL_DMA_IRQHandler+0x168>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <HAL_DMA_IRQHandler+0x208>)
 8004f7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d034      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f98:	e02f      	b.n	8004ffa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d028      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x1e8>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d023      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 020e 	bic.w	r2, r2, #14
 8004fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
    }
  }
  return;
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
}
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40020008 	.word	0x40020008
 8005008:	4002001c 	.word	0x4002001c
 800500c:	40020030 	.word	0x40020030
 8005010:	40020044 	.word	0x40020044
 8005014:	40020058 	.word	0x40020058
 8005018:	4002006c 	.word	0x4002006c
 800501c:	40020000 	.word	0x40020000

08005020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f202 	lsl.w	r2, r1, r2
 800503c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b10      	cmp	r3, #16
 800504c:	d108      	bne.n	8005060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800505e:	e007      	b.n	8005070 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
	...

0800507c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800507c:	b480      	push	{r7}
 800507e:	b08b      	sub	sp, #44	; 0x2c
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800508a:	2300      	movs	r3, #0
 800508c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800508e:	e169      	b.n	8005364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005090:	2201      	movs	r2, #1
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	f040 8158 	bne.w	800535e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4a9a      	ldr	r2, [pc, #616]	; (800531c <HAL_GPIO_Init+0x2a0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d05e      	beq.n	8005176 <HAL_GPIO_Init+0xfa>
 80050b8:	4a98      	ldr	r2, [pc, #608]	; (800531c <HAL_GPIO_Init+0x2a0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d875      	bhi.n	80051aa <HAL_GPIO_Init+0x12e>
 80050be:	4a98      	ldr	r2, [pc, #608]	; (8005320 <HAL_GPIO_Init+0x2a4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d058      	beq.n	8005176 <HAL_GPIO_Init+0xfa>
 80050c4:	4a96      	ldr	r2, [pc, #600]	; (8005320 <HAL_GPIO_Init+0x2a4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d86f      	bhi.n	80051aa <HAL_GPIO_Init+0x12e>
 80050ca:	4a96      	ldr	r2, [pc, #600]	; (8005324 <HAL_GPIO_Init+0x2a8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d052      	beq.n	8005176 <HAL_GPIO_Init+0xfa>
 80050d0:	4a94      	ldr	r2, [pc, #592]	; (8005324 <HAL_GPIO_Init+0x2a8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d869      	bhi.n	80051aa <HAL_GPIO_Init+0x12e>
 80050d6:	4a94      	ldr	r2, [pc, #592]	; (8005328 <HAL_GPIO_Init+0x2ac>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04c      	beq.n	8005176 <HAL_GPIO_Init+0xfa>
 80050dc:	4a92      	ldr	r2, [pc, #584]	; (8005328 <HAL_GPIO_Init+0x2ac>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d863      	bhi.n	80051aa <HAL_GPIO_Init+0x12e>
 80050e2:	4a92      	ldr	r2, [pc, #584]	; (800532c <HAL_GPIO_Init+0x2b0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d046      	beq.n	8005176 <HAL_GPIO_Init+0xfa>
 80050e8:	4a90      	ldr	r2, [pc, #576]	; (800532c <HAL_GPIO_Init+0x2b0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d85d      	bhi.n	80051aa <HAL_GPIO_Init+0x12e>
 80050ee:	2b12      	cmp	r3, #18
 80050f0:	d82a      	bhi.n	8005148 <HAL_GPIO_Init+0xcc>
 80050f2:	2b12      	cmp	r3, #18
 80050f4:	d859      	bhi.n	80051aa <HAL_GPIO_Init+0x12e>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <HAL_GPIO_Init+0x80>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	08005177 	.word	0x08005177
 8005100:	08005151 	.word	0x08005151
 8005104:	08005163 	.word	0x08005163
 8005108:	080051a5 	.word	0x080051a5
 800510c:	080051ab 	.word	0x080051ab
 8005110:	080051ab 	.word	0x080051ab
 8005114:	080051ab 	.word	0x080051ab
 8005118:	080051ab 	.word	0x080051ab
 800511c:	080051ab 	.word	0x080051ab
 8005120:	080051ab 	.word	0x080051ab
 8005124:	080051ab 	.word	0x080051ab
 8005128:	080051ab 	.word	0x080051ab
 800512c:	080051ab 	.word	0x080051ab
 8005130:	080051ab 	.word	0x080051ab
 8005134:	080051ab 	.word	0x080051ab
 8005138:	080051ab 	.word	0x080051ab
 800513c:	080051ab 	.word	0x080051ab
 8005140:	08005159 	.word	0x08005159
 8005144:	0800516d 	.word	0x0800516d
 8005148:	4a79      	ldr	r2, [pc, #484]	; (8005330 <HAL_GPIO_Init+0x2b4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800514e:	e02c      	b.n	80051aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	623b      	str	r3, [r7, #32]
          break;
 8005156:	e029      	b.n	80051ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	623b      	str	r3, [r7, #32]
          break;
 8005160:	e024      	b.n	80051ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	3308      	adds	r3, #8
 8005168:	623b      	str	r3, [r7, #32]
          break;
 800516a:	e01f      	b.n	80051ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	330c      	adds	r3, #12
 8005172:	623b      	str	r3, [r7, #32]
          break;
 8005174:	e01a      	b.n	80051ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800517e:	2304      	movs	r3, #4
 8005180:	623b      	str	r3, [r7, #32]
          break;
 8005182:	e013      	b.n	80051ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d105      	bne.n	8005198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800518c:	2308      	movs	r3, #8
 800518e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	611a      	str	r2, [r3, #16]
          break;
 8005196:	e009      	b.n	80051ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005198:	2308      	movs	r3, #8
 800519a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	615a      	str	r2, [r3, #20]
          break;
 80051a2:	e003      	b.n	80051ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051a4:	2300      	movs	r3, #0
 80051a6:	623b      	str	r3, [r7, #32]
          break;
 80051a8:	e000      	b.n	80051ac <HAL_GPIO_Init+0x130>
          break;
 80051aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2bff      	cmp	r3, #255	; 0xff
 80051b0:	d801      	bhi.n	80051b6 <HAL_GPIO_Init+0x13a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	e001      	b.n	80051ba <HAL_GPIO_Init+0x13e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
 80051ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2bff      	cmp	r3, #255	; 0xff
 80051c0:	d802      	bhi.n	80051c8 <HAL_GPIO_Init+0x14c>
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	e002      	b.n	80051ce <HAL_GPIO_Init+0x152>
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	3b08      	subs	r3, #8
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	210f      	movs	r1, #15
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	401a      	ands	r2, r3
 80051e0:	6a39      	ldr	r1, [r7, #32]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	431a      	orrs	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80b1 	beq.w	800535e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80051fc:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <HAL_GPIO_Init+0x2b8>)
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	4a4c      	ldr	r2, [pc, #304]	; (8005334 <HAL_GPIO_Init+0x2b8>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6193      	str	r3, [r2, #24]
 8005208:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <HAL_GPIO_Init+0x2b8>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005214:	4a48      	ldr	r2, [pc, #288]	; (8005338 <HAL_GPIO_Init+0x2bc>)
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	3302      	adds	r3, #2
 800521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	220f      	movs	r2, #15
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a40      	ldr	r2, [pc, #256]	; (800533c <HAL_GPIO_Init+0x2c0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_GPIO_Init+0x1ec>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3f      	ldr	r2, [pc, #252]	; (8005340 <HAL_GPIO_Init+0x2c4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00d      	beq.n	8005264 <HAL_GPIO_Init+0x1e8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3e      	ldr	r2, [pc, #248]	; (8005344 <HAL_GPIO_Init+0x2c8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <HAL_GPIO_Init+0x1e4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3d      	ldr	r2, [pc, #244]	; (8005348 <HAL_GPIO_Init+0x2cc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_GPIO_Init+0x1e0>
 8005258:	2303      	movs	r3, #3
 800525a:	e006      	b.n	800526a <HAL_GPIO_Init+0x1ee>
 800525c:	2304      	movs	r3, #4
 800525e:	e004      	b.n	800526a <HAL_GPIO_Init+0x1ee>
 8005260:	2302      	movs	r3, #2
 8005262:	e002      	b.n	800526a <HAL_GPIO_Init+0x1ee>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_GPIO_Init+0x1ee>
 8005268:	2300      	movs	r3, #0
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	f002 0203 	and.w	r2, r2, #3
 8005270:	0092      	lsls	r2, r2, #2
 8005272:	4093      	lsls	r3, r2
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800527a:	492f      	ldr	r1, [pc, #188]	; (8005338 <HAL_GPIO_Init+0x2bc>)
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	3302      	adds	r3, #2
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005294:	4b2d      	ldr	r3, [pc, #180]	; (800534c <HAL_GPIO_Init+0x2d0>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	492c      	ldr	r1, [pc, #176]	; (800534c <HAL_GPIO_Init+0x2d0>)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]
 80052a0:	e006      	b.n	80052b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052a2:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	4928      	ldr	r1, [pc, #160]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4922      	ldr	r1, [pc, #136]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	604b      	str	r3, [r1, #4]
 80052c8:	e006      	b.n	80052d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	491e      	ldr	r1, [pc, #120]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	4918      	ldr	r1, [pc, #96]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]
 80052f0:	e006      	b.n	8005300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052f2:	4b16      	ldr	r3, [pc, #88]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	4914      	ldr	r1, [pc, #80]	; (800534c <HAL_GPIO_Init+0x2d0>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d021      	beq.n	8005350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <HAL_GPIO_Init+0x2d0>)
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	490e      	ldr	r1, [pc, #56]	; (800534c <HAL_GPIO_Init+0x2d0>)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	60cb      	str	r3, [r1, #12]
 8005318:	e021      	b.n	800535e <HAL_GPIO_Init+0x2e2>
 800531a:	bf00      	nop
 800531c:	10320000 	.word	0x10320000
 8005320:	10310000 	.word	0x10310000
 8005324:	10220000 	.word	0x10220000
 8005328:	10210000 	.word	0x10210000
 800532c:	10120000 	.word	0x10120000
 8005330:	10110000 	.word	0x10110000
 8005334:	40021000 	.word	0x40021000
 8005338:	40010000 	.word	0x40010000
 800533c:	40010800 	.word	0x40010800
 8005340:	40010c00 	.word	0x40010c00
 8005344:	40011000 	.word	0x40011000
 8005348:	40011400 	.word	0x40011400
 800534c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_GPIO_Init+0x304>)
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	43db      	mvns	r3, r3
 8005358:	4909      	ldr	r1, [pc, #36]	; (8005380 <HAL_GPIO_Init+0x304>)
 800535a:	4013      	ands	r3, r2
 800535c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	3301      	adds	r3, #1
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	f47f ae8e 	bne.w	8005090 <HAL_GPIO_Init+0x14>
  }
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	372c      	adds	r7, #44	; 0x2c
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr
 8005380:	40010400 	.word	0x40010400

08005384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e001      	b.n	80053a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	807b      	strh	r3, [r7, #2]
 80053be:	4613      	mov	r3, r2
 80053c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053c2:	787b      	ldrb	r3, [r7, #1]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053c8:	887a      	ldrh	r2, [r7, #2]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053ce:	e003      	b.n	80053d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053d0:	887b      	ldrh	r3, [r7, #2]
 80053d2:	041a      	lsls	r2, r3, #16
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	611a      	str	r2, [r3, #16]
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053f4:	887a      	ldrh	r2, [r7, #2]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4013      	ands	r3, r2
 80053fa:	041a      	lsls	r2, r3, #16
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	43d9      	mvns	r1, r3
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	400b      	ands	r3, r1
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d006      	beq.n	8005438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800542a:	4a05      	ldr	r2, [pc, #20]	; (8005440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fd f96a 	bl	800270c <HAL_GPIO_EXTI_Callback>
  }
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40010400 	.word	0x40010400

08005444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e26c      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8087 	beq.w	8005572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005464:	4b92      	ldr	r3, [pc, #584]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b04      	cmp	r3, #4
 800546e:	d00c      	beq.n	800548a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005470:	4b8f      	ldr	r3, [pc, #572]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	d112      	bne.n	80054a2 <HAL_RCC_OscConfig+0x5e>
 800547c:	4b8c      	ldr	r3, [pc, #560]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d10b      	bne.n	80054a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548a:	4b89      	ldr	r3, [pc, #548]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d06c      	beq.n	8005570 <HAL_RCC_OscConfig+0x12c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d168      	bne.n	8005570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e246      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054aa:	d106      	bne.n	80054ba <HAL_RCC_OscConfig+0x76>
 80054ac:	4b80      	ldr	r3, [pc, #512]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7f      	ldr	r2, [pc, #508]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e02e      	b.n	8005518 <HAL_RCC_OscConfig+0xd4>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <HAL_RCC_OscConfig+0x98>
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a7a      	ldr	r2, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	4b78      	ldr	r3, [pc, #480]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a77      	ldr	r2, [pc, #476]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e01d      	b.n	8005518 <HAL_RCC_OscConfig+0xd4>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0xbc>
 80054e6:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a71      	ldr	r2, [pc, #452]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b6f      	ldr	r3, [pc, #444]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6e      	ldr	r2, [pc, #440]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_OscConfig+0xd4>
 8005500:	4b6b      	ldr	r3, [pc, #428]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6a      	ldr	r2, [pc, #424]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b68      	ldr	r3, [pc, #416]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a67      	ldr	r2, [pc, #412]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fe fe50 	bl	80041c4 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005528:	f7fe fe4c 	bl	80041c4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b64      	cmp	r3, #100	; 0x64
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e1fa      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b5d      	ldr	r3, [pc, #372]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0xe4>
 8005546:	e014      	b.n	8005572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7fe fe3c 	bl	80041c4 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005550:	f7fe fe38 	bl	80041c4 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e1e6      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005562:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x10c>
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d063      	beq.n	8005646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800557e:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800558a:	4b49      	ldr	r3, [pc, #292]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b08      	cmp	r3, #8
 8005594:	d11c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x18c>
 8005596:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d116      	bne.n	80055d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	4b43      	ldr	r3, [pc, #268]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_RCC_OscConfig+0x176>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d001      	beq.n	80055ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e1ba      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4939      	ldr	r1, [pc, #228]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ce:	e03a      	b.n	8005646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d020      	beq.n	800561a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d8:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <HAL_RCC_OscConfig+0x270>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055de:	f7fe fdf1 	bl	80041c4 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e6:	f7fe fded 	bl	80041c4 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e19b      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4927      	ldr	r1, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]
 8005618:	e015      	b.n	8005646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561a:	4b26      	ldr	r3, [pc, #152]	; (80056b4 <HAL_RCC_OscConfig+0x270>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fe fdd0 	bl	80041c4 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005628:	f7fe fdcc 	bl	80041c4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e17a      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d03a      	beq.n	80056c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d019      	beq.n	800568e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_RCC_OscConfig+0x274>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005660:	f7fe fdb0 	bl	80041c4 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005668:	f7fe fdac 	bl	80041c4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e15a      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCC_OscConfig+0x26c>)
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005686:	2001      	movs	r0, #1
 8005688:	f000 fad8 	bl	8005c3c <RCC_Delay>
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <HAL_RCC_OscConfig+0x274>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005694:	f7fe fd96 	bl	80041c4 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800569a:	e00f      	b.n	80056bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800569c:	f7fe fd92 	bl	80041c4 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d908      	bls.n	80056bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e140      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000
 80056b4:	42420000 	.word	0x42420000
 80056b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056bc:	4b9e      	ldr	r3, [pc, #632]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e9      	bne.n	800569c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80a6 	beq.w	8005822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056da:	4b97      	ldr	r3, [pc, #604]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	4b94      	ldr	r3, [pc, #592]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4a93      	ldr	r2, [pc, #588]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80056ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f0:	61d3      	str	r3, [r2, #28]
 80056f2:	4b91      	ldr	r3, [pc, #580]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005702:	4b8e      	ldr	r3, [pc, #568]	; (800593c <HAL_RCC_OscConfig+0x4f8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d118      	bne.n	8005740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800570e:	4b8b      	ldr	r3, [pc, #556]	; (800593c <HAL_RCC_OscConfig+0x4f8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a8a      	ldr	r2, [pc, #552]	; (800593c <HAL_RCC_OscConfig+0x4f8>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571a:	f7fe fd53 	bl	80041c4 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005722:	f7fe fd4f 	bl	80041c4 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b64      	cmp	r3, #100	; 0x64
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0fd      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005734:	4b81      	ldr	r3, [pc, #516]	; (800593c <HAL_RCC_OscConfig+0x4f8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d106      	bne.n	8005756 <HAL_RCC_OscConfig+0x312>
 8005748:	4b7b      	ldr	r3, [pc, #492]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	4a7a      	ldr	r2, [pc, #488]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6213      	str	r3, [r2, #32]
 8005754:	e02d      	b.n	80057b2 <HAL_RCC_OscConfig+0x36e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10c      	bne.n	8005778 <HAL_RCC_OscConfig+0x334>
 800575e:	4b76      	ldr	r3, [pc, #472]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	4a75      	ldr	r2, [pc, #468]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	6213      	str	r3, [r2, #32]
 800576a:	4b73      	ldr	r3, [pc, #460]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	4a72      	ldr	r2, [pc, #456]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005770:	f023 0304 	bic.w	r3, r3, #4
 8005774:	6213      	str	r3, [r2, #32]
 8005776:	e01c      	b.n	80057b2 <HAL_RCC_OscConfig+0x36e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b05      	cmp	r3, #5
 800577e:	d10c      	bne.n	800579a <HAL_RCC_OscConfig+0x356>
 8005780:	4b6d      	ldr	r3, [pc, #436]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	4a6c      	ldr	r2, [pc, #432]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005786:	f043 0304 	orr.w	r3, r3, #4
 800578a:	6213      	str	r3, [r2, #32]
 800578c:	4b6a      	ldr	r3, [pc, #424]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4a69      	ldr	r2, [pc, #420]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	6213      	str	r3, [r2, #32]
 8005798:	e00b      	b.n	80057b2 <HAL_RCC_OscConfig+0x36e>
 800579a:	4b67      	ldr	r3, [pc, #412]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	4a66      	ldr	r2, [pc, #408]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6213      	str	r3, [r2, #32]
 80057a6:	4b64      	ldr	r3, [pc, #400]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4a63      	ldr	r2, [pc, #396]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d015      	beq.n	80057e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ba:	f7fe fd03 	bl	80041c4 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fe fcff 	bl	80041c4 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e0ab      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d8:	4b57      	ldr	r3, [pc, #348]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ee      	beq.n	80057c2 <HAL_RCC_OscConfig+0x37e>
 80057e4:	e014      	b.n	8005810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e6:	f7fe fced 	bl	80041c4 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ee:	f7fe fce9 	bl	80041c4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e095      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005804:	4b4c      	ldr	r3, [pc, #304]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ee      	bne.n	80057ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d105      	bne.n	8005822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005816:	4b48      	ldr	r3, [pc, #288]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4a47      	ldr	r2, [pc, #284]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800581c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8081 	beq.w	800592e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800582c:	4b42      	ldr	r3, [pc, #264]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	2b08      	cmp	r3, #8
 8005836:	d061      	beq.n	80058fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d146      	bne.n	80058ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <HAL_RCC_OscConfig+0x4fc>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005846:	f7fe fcbd 	bl	80041c4 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584e:	f7fe fcb9 	bl	80041c4 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e067      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005874:	d108      	bne.n	8005888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	492d      	ldr	r1, [pc, #180]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 8005884:	4313      	orrs	r3, r2
 8005886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005888:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a19      	ldr	r1, [r3, #32]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	430b      	orrs	r3, r1
 800589a:	4927      	ldr	r1, [pc, #156]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800589c:	4313      	orrs	r3, r2
 800589e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <HAL_RCC_OscConfig+0x4fc>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a6:	f7fe fc8d 	bl	80041c4 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ae:	f7fe fc89 	bl	80041c4 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e037      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x46a>
 80058cc:	e02f      	b.n	800592e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <HAL_RCC_OscConfig+0x4fc>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7fe fc76 	bl	80041c4 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058dc:	f7fe fc72 	bl	80041c4 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e020      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x498>
 80058fa:	e018      	b.n	800592e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e013      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_RCC_OscConfig+0x4f4>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	429a      	cmp	r2, r3
 800591a:	d106      	bne.n	800592a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d001      	beq.n	800592e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40021000 	.word	0x40021000
 800593c:	40007000 	.word	0x40007000
 8005940:	42420060 	.word	0x42420060

08005944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0d0      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005958:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d910      	bls.n	8005988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b67      	ldr	r3, [pc, #412]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 0207 	bic.w	r2, r3, #7
 800596e:	4965      	ldr	r1, [pc, #404]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b63      	ldr	r3, [pc, #396]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0b8      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a0:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a58      	ldr	r2, [pc, #352]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b8:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4a52      	ldr	r2, [pc, #328]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	494d      	ldr	r1, [pc, #308]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d040      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d115      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a02:	4b41      	ldr	r3, [pc, #260]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e073      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a12:	4b3d      	ldr	r3, [pc, #244]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e06b      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a22:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f023 0203 	bic.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4936      	ldr	r1, [pc, #216]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fe fbc6 	bl	80041c4 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fe fbc2 	bl	80041c4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e053      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 020c 	and.w	r2, r3, #12
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d1eb      	bne.n	8005a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a64:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d210      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 0207 	bic.w	r2, r3, #7
 8005a7a:	4922      	ldr	r1, [pc, #136]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e032      	b.n	8005afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4916      	ldr	r1, [pc, #88]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	490e      	ldr	r1, [pc, #56]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ad2:	f000 f821 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	490a      	ldr	r1, [pc, #40]	; (8005b0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ae4:	5ccb      	ldrb	r3, [r1, r3]
 8005ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <HAL_RCC_ClockConfig+0x1cc>)
 8005aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_RCC_ClockConfig+0x1d0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fb24 	bl	8004140 <HAL_InitTick>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40022000 	.word	0x40022000
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	080084dc 	.word	0x080084dc
 8005b10:	20000034 	.word	0x20000034
 8005b14:	20000038 	.word	0x20000038

08005b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b18:	b490      	push	{r4, r7}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b1e:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b20:	1d3c      	adds	r4, r7, #4
 8005b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b28:	f240 2301 	movw	r3, #513	; 0x201
 8005b2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d002      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x40>
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d003      	beq.n	8005b5e <HAL_RCC_GetSysClockFreq+0x46>
 8005b56:	e02d      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b5a:	623b      	str	r3, [r7, #32]
      break;
 8005b5c:	e02d      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	0c9b      	lsrs	r3, r3, #18
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005b70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d013      	beq.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	0c5b      	lsrs	r3, r3, #17
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005b90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b96:	fb02 f203 	mul.w	r2, r2, r3
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba2:	e004      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4a0b      	ldr	r2, [pc, #44]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	623b      	str	r3, [r7, #32]
      break;
 8005bb2:	e002      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb6:	623b      	str	r3, [r7, #32]
      break;
 8005bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bba:	6a3b      	ldr	r3, [r7, #32]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3728      	adds	r7, #40	; 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc90      	pop	{r4, r7}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	08007a68 	.word	0x08007a68
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	007a1200 	.word	0x007a1200
 8005bd4:	003d0900 	.word	0x003d0900

08005bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr
 8005be8:	20000034 	.word	0x20000034

08005bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bf0:	f7ff fff2 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	4903      	ldr	r1, [pc, #12]	; (8005c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c02:	5ccb      	ldrb	r3, [r1, r3]
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	080084ec 	.word	0x080084ec

08005c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c18:	f7ff ffde 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	0adb      	lsrs	r3, r3, #11
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4903      	ldr	r1, [pc, #12]	; (8005c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40021000 	.word	0x40021000
 8005c38:	080084ec 	.word	0x080084ec

08005c3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <RCC_Delay+0x34>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <RCC_Delay+0x38>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0a5b      	lsrs	r3, r3, #9
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c58:	bf00      	nop
  }
  while (Delay --);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1e5a      	subs	r2, r3, #1
 8005c5e:	60fa      	str	r2, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f9      	bne.n	8005c58 <RCC_Delay+0x1c>
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	20000034 	.word	0x20000034
 8005c74:	10624dd3 	.word	0x10624dd3

08005c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d07d      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c98:	4b4f      	ldr	r3, [pc, #316]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10d      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca4:	4b4c      	ldr	r3, [pc, #304]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	4a4b      	ldr	r2, [pc, #300]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cae:	61d3      	str	r3, [r2, #28]
 8005cb0:	4b49      	ldr	r3, [pc, #292]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc0:	4b46      	ldr	r3, [pc, #280]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d118      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ccc:	4b43      	ldr	r3, [pc, #268]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a42      	ldr	r2, [pc, #264]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd8:	f7fe fa74 	bl	80041c4 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cde:	e008      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce0:	f7fe fa70 	bl	80041c4 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e06d      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf2:	4b3a      	ldr	r3, [pc, #232]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cfe:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02e      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d027      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d1c:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d26:	4b2e      	ldr	r3, [pc, #184]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d2c:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d32:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d014      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fe fa3f 	bl	80041c4 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fe fa3b 	bl	80041c4 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e036      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ee      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	4917      	ldr	r1, [pc, #92]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d105      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	490b      	ldr	r1, [pc, #44]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	40007000 	.word	0x40007000
 8005de0:	42420440 	.word	0x42420440

08005de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e041      	b.n	8005e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fd ff34 	bl	8003c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 fd70 	bl	8006908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d001      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e03a      	b.n	8005f12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_TIM_Base_Start_IT+0x98>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x58>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec6:	d009      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x58>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x58>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d111      	bne.n	8005f00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d010      	beq.n	8005f10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	e007      	b.n	8005f10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800

08005f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e041      	b.n	8005fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fd fec0 	bl	8003cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f000 fcce 	bl	8006908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <HAL_TIM_PWM_Start+0x24>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	e022      	b.n	8006032 <HAL_TIM_PWM_Start+0x6a>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d109      	bne.n	8006006 <HAL_TIM_PWM_Start+0x3e>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	bf14      	ite	ne
 8005ffe:	2301      	movne	r3, #1
 8006000:	2300      	moveq	r3, #0
 8006002:	b2db      	uxtb	r3, r3
 8006004:	e015      	b.n	8006032 <HAL_TIM_PWM_Start+0x6a>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d109      	bne.n	8006020 <HAL_TIM_PWM_Start+0x58>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	bf14      	ite	ne
 8006018:	2301      	movne	r3, #1
 800601a:	2300      	moveq	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	e008      	b.n	8006032 <HAL_TIM_PWM_Start+0x6a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	bf14      	ite	ne
 800602c:	2301      	movne	r3, #1
 800602e:	2300      	moveq	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e05e      	b.n	80060f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <HAL_TIM_PWM_Start+0x82>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006048:	e013      	b.n	8006072 <HAL_TIM_PWM_Start+0xaa>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b04      	cmp	r3, #4
 800604e:	d104      	bne.n	800605a <HAL_TIM_PWM_Start+0x92>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	e00b      	b.n	8006072 <HAL_TIM_PWM_Start+0xaa>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b08      	cmp	r3, #8
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Start+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006068:	e003      	b.n	8006072 <HAL_TIM_PWM_Start+0xaa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2201      	movs	r2, #1
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fec4 	bl	8006e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_TIM_PWM_Start+0x138>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d107      	bne.n	800609a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_TIM_PWM_Start+0x138>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_TIM_PWM_Start+0xfa>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d009      	beq.n	80060c2 <HAL_TIM_PWM_Start+0xfa>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a14      	ldr	r2, [pc, #80]	; (8006104 <HAL_TIM_PWM_Start+0x13c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_TIM_PWM_Start+0xfa>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a12      	ldr	r2, [pc, #72]	; (8006108 <HAL_TIM_PWM_Start+0x140>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d111      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d010      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e4:	e007      	b.n	80060f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800

0800610c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e093      	b.n	8006248 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7fd fdeb 	bl	8003d10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f000 fbd1 	bl	8006908 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	4313      	orrs	r3, r2
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061ac:	f023 030c 	bic.w	r3, r3, #12
 80061b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	4313      	orrs	r3, r2
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	011a      	lsls	r2, r3, #4
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	031b      	lsls	r3, r3, #12
 80061dc:	4313      	orrs	r3, r2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	4313      	orrs	r3, r2
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006260:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006268:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006270:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006278:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d110      	bne.n	80062a2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e089      	b.n	80063a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a0:	e031      	b.n	8006306 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d110      	bne.n	80062ca <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d102      	bne.n	80062b4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ae:	7b3b      	ldrb	r3, [r7, #12]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d001      	beq.n	80062b8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e075      	b.n	80063a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c8:	e01d      	b.n	8006306 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d108      	bne.n	80062e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d105      	bne.n	80062e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d6:	7b7b      	ldrb	r3, [r7, #13]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d102      	bne.n	80062e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062dc:	7b3b      	ldrb	r3, [r7, #12]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d001      	beq.n	80062e6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e05e      	b.n	80063a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_TIM_Encoder_Start_IT+0xc4>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b04      	cmp	r3, #4
 8006310:	d010      	beq.n	8006334 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006312:	e01f      	b.n	8006354 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2201      	movs	r2, #1
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fd73 	bl	8006e08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0202 	orr.w	r2, r2, #2
 8006330:	60da      	str	r2, [r3, #12]
      break;
 8006332:	e02e      	b.n	8006392 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2201      	movs	r2, #1
 800633a:	2104      	movs	r1, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fd63 	bl	8006e08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0204 	orr.w	r2, r2, #4
 8006350:	60da      	str	r2, [r3, #12]
      break;
 8006352:	e01e      	b.n	8006392 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2201      	movs	r2, #1
 800635a:	2100      	movs	r1, #0
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fd53 	bl	8006e08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2201      	movs	r2, #1
 8006368:	2104      	movs	r1, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fd4c 	bl	8006e08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0202 	orr.w	r2, r2, #2
 800637e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0204 	orr.w	r2, r2, #4
 800638e:	60da      	str	r2, [r3, #12]
      break;
 8006390:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d122      	bne.n	8006408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0202 	mvn.w	r2, #2
 80063d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa6f 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa62 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fa71 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d122      	bne.n	800645c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b04      	cmp	r3, #4
 8006422:	d11b      	bne.n	800645c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0204 	mvn.w	r2, #4
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa45 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa38 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa47 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b08      	cmp	r3, #8
 8006468:	d122      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b08      	cmp	r3, #8
 8006476:	d11b      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0208 	mvn.w	r2, #8
 8006480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2204      	movs	r2, #4
 8006486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa1b 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 800649c:	e005      	b.n	80064aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa0e 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa1d 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0210 	mvn.w	r2, #16
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2208      	movs	r2, #8
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f9f1 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9e4 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f9f3 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0201 	mvn.w	r2, #1
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fa fdd0 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d10e      	bne.n	800655c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d107      	bne.n	800655c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fce1 	bl	8006f1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d10e      	bne.n	8006588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d107      	bne.n	8006588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9b7 	bl	80068f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b20      	cmp	r3, #32
 8006594:	d10e      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0220 	mvn.w	r2, #32
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcac 	bl	8006f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e0ac      	b.n	8006730 <HAL_TIM_PWM_ConfigChannel+0x174>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b0c      	cmp	r3, #12
 80065e2:	f200 809f 	bhi.w	8006724 <HAL_TIM_PWM_ConfigChannel+0x168>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006621 	.word	0x08006621
 80065f0:	08006725 	.word	0x08006725
 80065f4:	08006725 	.word	0x08006725
 80065f8:	08006725 	.word	0x08006725
 80065fc:	08006661 	.word	0x08006661
 8006600:	08006725 	.word	0x08006725
 8006604:	08006725 	.word	0x08006725
 8006608:	08006725 	.word	0x08006725
 800660c:	080066a3 	.word	0x080066a3
 8006610:	08006725 	.word	0x08006725
 8006614:	08006725 	.word	0x08006725
 8006618:	08006725 	.word	0x08006725
 800661c:	080066e3 	.word	0x080066e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f9d0 	bl	80069cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0208 	orr.w	r2, r2, #8
 800663a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	619a      	str	r2, [r3, #24]
      break;
 800665e:	e062      	b.n	8006726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fa16 	bl	8006a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	021a      	lsls	r2, r3, #8
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	619a      	str	r2, [r3, #24]
      break;
 80066a0:	e041      	b.n	8006726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fa5f 	bl	8006b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0208 	orr.w	r2, r2, #8
 80066bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0204 	bic.w	r2, r2, #4
 80066cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	61da      	str	r2, [r3, #28]
      break;
 80066e0:	e021      	b.n	8006726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 faa9 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	021a      	lsls	r2, r3, #8
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	61da      	str	r2, [r3, #28]
      break;
 8006722:	e000      	b.n	8006726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIM_ConfigClockSource+0x18>
 800674c:	2302      	movs	r3, #2
 800674e:	e0b3      	b.n	80068b8 <HAL_TIM_ConfigClockSource+0x180>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800676e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006788:	d03e      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0xd0>
 800678a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678e:	f200 8087 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	f000 8085 	beq.w	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	d87f      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067a0:	2b70      	cmp	r3, #112	; 0x70
 80067a2:	d01a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0xa2>
 80067a4:	2b70      	cmp	r3, #112	; 0x70
 80067a6:	d87b      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067a8:	2b60      	cmp	r3, #96	; 0x60
 80067aa:	d050      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x116>
 80067ac:	2b60      	cmp	r3, #96	; 0x60
 80067ae:	d877      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067b0:	2b50      	cmp	r3, #80	; 0x50
 80067b2:	d03c      	beq.n	800682e <HAL_TIM_ConfigClockSource+0xf6>
 80067b4:	2b50      	cmp	r3, #80	; 0x50
 80067b6:	d873      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d058      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x136>
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d86f      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067c0:	2b30      	cmp	r3, #48	; 0x30
 80067c2:	d064      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
 80067c4:	2b30      	cmp	r3, #48	; 0x30
 80067c6:	d86b      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d060      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d867      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d05c      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d05a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067d8:	e062      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6899      	ldr	r1, [r3, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f000 faee 	bl	8006dca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
      break;
 8006806:	e04e      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6899      	ldr	r1, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 fad7 	bl	8006dca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682a:	609a      	str	r2, [r3, #8]
      break;
 800682c:	e03b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 fa4e 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2150      	movs	r1, #80	; 0x50
 8006846:	4618      	mov	r0, r3
 8006848:	f000 faa5 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 800684c:	e02b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 fa6c 	bl	8006d38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2160      	movs	r1, #96	; 0x60
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fa95 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 800686c:	e01b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fa2e 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fa85 	bl	8006d96 <TIM_ITRx_SetConfig>
      break;
 800688c:	e00b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f000 fa7c 	bl	8006d96 <TIM_ITRx_SetConfig>
        break;
 800689e:	e002      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0xb8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00b      	beq.n	8006938 <TIM_Base_SetConfig+0x30>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006926:	d007      	beq.n	8006938 <TIM_Base_SetConfig+0x30>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_Base_SetConfig+0xbc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0x30>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0xc0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <TIM_Base_SetConfig+0xb8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0x62>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0x62>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <TIM_Base_SetConfig+0xbc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0x62>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <TIM_Base_SetConfig+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <TIM_Base_SetConfig+0xb8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800

080069cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0302 	bic.w	r3, r3, #2
 8006a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <TIM_OC1_SetConfig+0xc8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10c      	bne.n	8006a42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0308 	bic.w	r3, r3, #8
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 0304 	bic.w	r3, r3, #4
 8006a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <TIM_OC1_SetConfig+0xc8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d111      	bne.n	8006a6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00

08006a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f023 0210 	bic.w	r2, r3, #16
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0320 	bic.w	r3, r3, #32
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <TIM_OC2_SetConfig+0xd0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d10d      	bne.n	8006b14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a14      	ldr	r2, [pc, #80]	; (8006b68 <TIM_OC2_SetConfig+0xd0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d113      	bne.n	8006b44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00

08006b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <TIM_OC3_SetConfig+0xd0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <TIM_OC3_SetConfig+0xd0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d113      	bne.n	8006c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a0f      	ldr	r2, [pc, #60]	; (8006cd8 <TIM_OC4_SetConfig+0x98>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00

08006cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 030a 	bic.w	r3, r3, #10
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f023 0210 	bic.w	r2, r3, #16
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	031b      	lsls	r3, r3, #12
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr

08006d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f043 0307 	orr.w	r3, r3, #7
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	021a      	lsls	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	609a      	str	r2, [r3, #8]
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	431a      	orrs	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e046      	b.n	8006ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d009      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a12      	ldr	r2, [pc, #72]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a10      	ldr	r2, [pc, #64]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800

08006f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e03f      	b.n	8006fc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fc ff52 	bl	8003e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2224      	movs	r2, #36	; 0x24
 8006f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc21 	bl	80077bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691a      	ldr	r2, [r3, #16]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695a      	ldr	r2, [r3, #20]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d153      	bne.n	800708e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_UART_Transmit_DMA+0x26>
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e04c      	b.n	8007090 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_UART_Transmit_DMA+0x38>
 8007000:	2302      	movs	r3, #2
 8007002:	e045      	b.n	8007090 <HAL_UART_Transmit_DMA+0xc4>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	88fa      	ldrh	r2, [r7, #6]
 800701c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2221      	movs	r2, #33	; 0x21
 8007028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <HAL_UART_Transmit_DMA+0xcc>)
 8007032:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_UART_Transmit_DMA+0xd0>)
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	4a17      	ldr	r2, [pc, #92]	; (80070a0 <HAL_UART_Transmit_DMA+0xd4>)
 8007042:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	2200      	movs	r2, #0
 800704a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800704c:	f107 0308 	add.w	r3, r7, #8
 8007050:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	6819      	ldr	r1, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3304      	adds	r3, #4
 8007060:	461a      	mov	r2, r3
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	f7fd fe00 	bl	8004c68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007070:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007088:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e000      	b.n	8007090 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800708e:	2302      	movs	r3, #2
  }
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	080073db 	.word	0x080073db
 800709c:	0800742d 	.word	0x0800742d
 80070a0:	080074cd 	.word	0x080074cd

080070a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d166      	bne.n	800718c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_UART_Receive_DMA+0x26>
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e05f      	b.n	800718e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Receive_DMA+0x38>
 80070d8:	2302      	movs	r3, #2
 80070da:	e058      	b.n	800718e <HAL_UART_Receive_DMA+0xea>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2222      	movs	r2, #34	; 0x22
 80070fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	4a25      	ldr	r2, [pc, #148]	; (8007198 <HAL_UART_Receive_DMA+0xf4>)
 8007104:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710a:	4a24      	ldr	r2, [pc, #144]	; (800719c <HAL_UART_Receive_DMA+0xf8>)
 800710c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	4a23      	ldr	r2, [pc, #140]	; (80071a0 <HAL_UART_Receive_DMA+0xfc>)
 8007114:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	2200      	movs	r2, #0
 800711c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	88fb      	ldrh	r3, [r7, #6]
 8007136:	f7fd fd97 	bl	8004c68 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007166:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695a      	ldr	r2, [r3, #20]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695a      	ldr	r2, [r3, #20]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007186:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e000      	b.n	800718e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	08007449 	.word	0x08007449
 800719c:	080074b1 	.word	0x080074b1
 80071a0:	080074cd 	.word	0x080074cd

080071a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10d      	bne.n	80071f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_UART_IRQHandler+0x52>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa63 	bl	80076ba <UART_Receive_IT>
      return;
 80071f4:	e0d0      	b.n	8007398 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 80b0 	beq.w	800735e <HAL_UART_IRQHandler+0x1ba>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d105      	bne.n	8007214 <HAL_UART_IRQHandler+0x70>
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80a5 	beq.w	800735e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <HAL_UART_IRQHandler+0x90>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	f043 0201 	orr.w	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_UART_IRQHandler+0xb0>
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f043 0202 	orr.w	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_UART_IRQHandler+0xd0>
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726c:	f043 0204 	orr.w	r2, r3, #4
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00f      	beq.n	800729e <HAL_UART_IRQHandler+0xfa>
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_UART_IRQHandler+0xee>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	f043 0208 	orr.w	r2, r3, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d077      	beq.n	8007396 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <HAL_UART_IRQHandler+0x11c>
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9fd 	bl	80076ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bf14      	ite	ne
 80072ce:	2301      	movne	r3, #1
 80072d0:	2300      	moveq	r3, #0
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_UART_IRQHandler+0x144>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d031      	beq.n	800734c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f94e 	bl	800758a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d023      	beq.n	8007344 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695a      	ldr	r2, [r3, #20]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800730a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d013      	beq.n	800733c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	4a21      	ldr	r2, [pc, #132]	; (80073a0 <HAL_UART_IRQHandler+0x1fc>)
 800731a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	4618      	mov	r0, r3
 8007322:	f7fd fd01 	bl	8004d28 <HAL_DMA_Abort_IT>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d016      	beq.n	800735a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007336:	4610      	mov	r0, r2
 8007338:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733a:	e00e      	b.n	800735a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f843 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007342:	e00a      	b.n	800735a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f83f 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734a:	e006      	b.n	800735a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f83b 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007358:	e01d      	b.n	8007396 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735a:	bf00      	nop
    return;
 800735c:	e01b      	b.n	8007396 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_UART_IRQHandler+0x1d6>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f93a 	bl	80075ec <UART_Transmit_IT>
    return;
 8007378:	e00e      	b.n	8007398 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <HAL_UART_IRQHandler+0x1f4>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f97b 	bl	800768a <UART_EndTransmit_IT>
    return;
 8007394:	e000      	b.n	8007398 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007396:	bf00      	nop
  }
}
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	080075c5 	.word	0x080075c5

080073a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d113      	bne.n	800741e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695a      	ldr	r2, [r3, #20]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800740a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800741c:	e002      	b.n	8007424 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7fb fd0a 	bl	8002e38 <HAL_UART_TxCpltCallback>
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff ffb2 	bl	80073a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11e      	bne.n	80074a2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007478:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007498:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7fb fc86 	bl	8002db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff ff79 	bl	80073b6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf14      	ite	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	2300      	moveq	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b21      	cmp	r3, #33	; 0x21
 80074fe:	d108      	bne.n	8007512 <UART_DMAError+0x46>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2200      	movs	r2, #0
 800750a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800750c:	68b8      	ldr	r0, [r7, #8]
 800750e:	f000 f827 	bl	8007560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b22      	cmp	r3, #34	; 0x22
 8007532:	d108      	bne.n	8007546 <UART_DMAError+0x7a>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2200      	movs	r2, #0
 800753e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007540:	68b8      	ldr	r0, [r7, #8]
 8007542:	f000 f822 	bl	800758a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	f043 0210 	orr.w	r2, r3, #16
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007552:	68b8      	ldr	r0, [r7, #8]
 8007554:	f7ff ff38 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007576:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr

0800758a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fef2 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b21      	cmp	r3, #33	; 0x21
 80075fe:	d13e      	bne.n	800767e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007608:	d114      	bne.n	8007634 <UART_Transmit_IT+0x48>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d110      	bne.n	8007634 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007626:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	1c9a      	adds	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	621a      	str	r2, [r3, #32]
 8007632:	e008      	b.n	8007646 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	1c59      	adds	r1, r3, #1
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6211      	str	r1, [r2, #32]
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29b      	uxth	r3, r3
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4619      	mov	r1, r3
 8007654:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10f      	bne.n	800767a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007668:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007678:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e000      	b.n	8007680 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800767e:	2302      	movs	r3, #2
  }
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr

0800768a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fb fbc4 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b22      	cmp	r3, #34	; 0x22
 80076cc:	d170      	bne.n	80077b0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d6:	d117      	bne.n	8007708 <UART_Receive_IT+0x4e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d113      	bne.n	8007708 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	629a      	str	r2, [r3, #40]	; 0x28
 8007706:	e026      	b.n	8007756 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771a:	d007      	beq.n	800772c <UART_Receive_IT+0x72>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <UART_Receive_IT+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e008      	b.n	800774c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007746:	b2da      	uxtb	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29b      	uxth	r3, r3
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4619      	mov	r1, r3
 8007764:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007766:	2b00      	cmp	r3, #0
 8007768:	d120      	bne.n	80077ac <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0220 	bic.w	r2, r2, #32
 8007778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007788:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fb fb06 	bl	8002db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e002      	b.n	80077b2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e000      	b.n	80077b2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80077f6:	f023 030c 	bic.w	r3, r3, #12
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	430b      	orrs	r3, r1
 8007802:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <UART_SetConfig+0x114>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d103      	bne.n	800782c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007824:	f7fe f9f6 	bl	8005c14 <HAL_RCC_GetPCLK2Freq>
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	e002      	b.n	8007832 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800782c:	f7fe f9de 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 8007830:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009a      	lsls	r2, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	fbb2 f3f3 	udiv	r3, r2, r3
 8007848:	4a22      	ldr	r2, [pc, #136]	; (80078d4 <UART_SetConfig+0x118>)
 800784a:	fba2 2303 	umull	r2, r3, r2, r3
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	0119      	lsls	r1, r3, #4
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009a      	lsls	r2, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	fbb2 f2f3 	udiv	r2, r2, r3
 8007868:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <UART_SetConfig+0x118>)
 800786a:	fba3 0302 	umull	r0, r3, r3, r2
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	2064      	movs	r0, #100	; 0x64
 8007872:	fb00 f303 	mul.w	r3, r0, r3
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	3332      	adds	r3, #50	; 0x32
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <UART_SetConfig+0x118>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007888:	4419      	add	r1, r3
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009a      	lsls	r2, r3, #2
 8007894:	441a      	add	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	fbb2 f2f3 	udiv	r2, r2, r3
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <UART_SetConfig+0x118>)
 80078a2:	fba3 0302 	umull	r0, r3, r3, r2
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	2064      	movs	r0, #100	; 0x64
 80078aa:	fb00 f303 	mul.w	r3, r0, r3
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	3332      	adds	r3, #50	; 0x32
 80078b4:	4a07      	ldr	r2, [pc, #28]	; (80078d4 <UART_SetConfig+0x118>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	440a      	add	r2, r1
 80078c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	40013800 	.word	0x40013800
 80078d4:	51eb851f 	.word	0x51eb851f

080078d8 <__libc_init_array>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	2600      	movs	r6, #0
 80078dc:	4d0c      	ldr	r5, [pc, #48]	; (8007910 <__libc_init_array+0x38>)
 80078de:	4c0d      	ldr	r4, [pc, #52]	; (8007914 <__libc_init_array+0x3c>)
 80078e0:	1b64      	subs	r4, r4, r5
 80078e2:	10a4      	asrs	r4, r4, #2
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	d109      	bne.n	80078fc <__libc_init_array+0x24>
 80078e8:	f000 f822 	bl	8007930 <_init>
 80078ec:	2600      	movs	r6, #0
 80078ee:	4d0a      	ldr	r5, [pc, #40]	; (8007918 <__libc_init_array+0x40>)
 80078f0:	4c0a      	ldr	r4, [pc, #40]	; (800791c <__libc_init_array+0x44>)
 80078f2:	1b64      	subs	r4, r4, r5
 80078f4:	10a4      	asrs	r4, r4, #2
 80078f6:	42a6      	cmp	r6, r4
 80078f8:	d105      	bne.n	8007906 <__libc_init_array+0x2e>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007900:	4798      	blx	r3
 8007902:	3601      	adds	r6, #1
 8007904:	e7ee      	b.n	80078e4 <__libc_init_array+0xc>
 8007906:	f855 3b04 	ldr.w	r3, [r5], #4
 800790a:	4798      	blx	r3
 800790c:	3601      	adds	r6, #1
 800790e:	e7f2      	b.n	80078f6 <__libc_init_array+0x1e>
 8007910:	080084f4 	.word	0x080084f4
 8007914:	080084f4 	.word	0x080084f4
 8007918:	080084f4 	.word	0x080084f4
 800791c:	080084f8 	.word	0x080084f8

08007920 <memset>:
 8007920:	4603      	mov	r3, r0
 8007922:	4402      	add	r2, r0
 8007924:	4293      	cmp	r3, r2
 8007926:	d100      	bne.n	800792a <memset+0xa>
 8007928:	4770      	bx	lr
 800792a:	f803 1b01 	strb.w	r1, [r3], #1
 800792e:	e7f9      	b.n	8007924 <memset+0x4>

08007930 <_init>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr

0800793c <_fini>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr
